{"ast":null,"code":"import _toConsumableArray from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { defineComponent, ref, computed, nextTick, provide, reactive, watch, onBeforeUpdate, onMounted, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock } from 'vue';\nimport { isEqual, flattenDeep } from 'lodash-unified';\nimport { isClient } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport ElCascaderMenu from './menu.mjs';\nimport Store from './store.mjs';\nimport Node, { ExpandTrigger } from './node.mjs';\nimport { CommonProps, useCascaderConfig } from './config.mjs';\nimport { sortByOriginalOrder, checkNode, getMenuIndex } from './utils.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isEmpty } from '../../../utils/types.mjs';\nimport { unique, castArray } from '../../../utils/arrays.mjs';\nimport { scrollIntoView } from '../../../utils/dom/scroll.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { focusNode, getSibling } from '../../../utils/dom/aria.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElCascaderPanel\",\n  components: {\n    ElCascaderMenu: ElCascaderMenu\n  },\n  props: _objectSpread(_objectSpread({}, CommonProps), {}, {\n    border: {\n      type: Boolean,\n      \"default\": true\n    },\n    renderLabel: Function\n  }),\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, \"close\", \"expand-change\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n    var manualChecked = false;\n    var ns = useNamespace(\"cascader\");\n    var config = useCascaderConfig(props);\n    var store = null;\n    var initialLoaded = ref(true);\n    var menuList = ref([]);\n    var checkedValue = ref(null);\n    var menus = ref([]);\n    var expandingNode = ref(null);\n    var checkedNodes = ref([]);\n    var isHoverMenu = computed(function () {\n      return config.value.expandTrigger === ExpandTrigger.HOVER;\n    });\n    var renderLabelFn = computed(function () {\n      return props.renderLabel || slots[\"default\"];\n    });\n\n    var initStore = function initStore() {\n      var options = props.options;\n      var cfg = config.value;\n      manualChecked = false;\n      store = new Store(options, cfg);\n      menus.value = [store.getNodes()];\n\n      if (cfg.lazy && isEmpty(props.options)) {\n        initialLoaded.value = false;\n        lazyLoad(void 0, function (list) {\n          if (list) {\n            store = new Store(list, cfg);\n            menus.value = [store.getNodes()];\n          }\n\n          initialLoaded.value = true;\n          syncCheckedValue(false, true);\n        });\n      } else {\n        syncCheckedValue(false, true);\n      }\n    };\n\n    var lazyLoad = function lazyLoad(node, cb) {\n      var cfg = config.value;\n      node = node || new Node({}, cfg, void 0, true);\n      node.loading = true;\n\n      var resolve = function resolve(dataList) {\n        var _node = node;\n        var parent = _node.root ? null : _node;\n        dataList && (store == null ? void 0 : store.appendNodes(dataList, parent));\n        _node.loading = false;\n        _node.loaded = true;\n        _node.childrenData = _node.childrenData || [];\n        cb && cb(dataList);\n      };\n\n      cfg.lazyLoad(node, resolve);\n    };\n\n    var expandNode = function expandNode(node, silent) {\n      var _a;\n\n      var level = node.level;\n      var newMenus = menus.value.slice(0, level);\n      var newExpandingNode;\n\n      if (node.isLeaf) {\n        newExpandingNode = node.pathNodes[level - 2];\n      } else {\n        newExpandingNode = node;\n        newMenus.push(node.children);\n      }\n\n      if (((_a = expandingNode.value) == null ? void 0 : _a.uid) !== (newExpandingNode == null ? void 0 : newExpandingNode.uid)) {\n        expandingNode.value = node;\n        menus.value = newMenus;\n        !silent && emit(\"expand-change\", (node == null ? void 0 : node.pathValues) || []);\n      }\n    };\n\n    var handleCheckChange = function handleCheckChange(node, checked) {\n      var emitClose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var _config$value = config.value,\n          checkStrictly = _config$value.checkStrictly,\n          multiple = _config$value.multiple;\n      var oldNode = checkedNodes.value[0];\n      manualChecked = true;\n      !multiple && (oldNode == null ? void 0 : oldNode.doCheck(false));\n      node.doCheck(checked);\n      calculateCheckedValue();\n      emitClose && !multiple && !checkStrictly && emit(\"close\");\n      !emitClose && !multiple && !checkStrictly && expandParentNode(node);\n    };\n\n    var expandParentNode = function expandParentNode(node) {\n      if (!node) return;\n      node = node.parent;\n      expandParentNode(node);\n      node && expandNode(node);\n    };\n\n    var getFlattedNodes = function getFlattedNodes(leafOnly) {\n      return store == null ? void 0 : store.getFlattedNodes(leafOnly);\n    };\n\n    var getCheckedNodes = function getCheckedNodes(leafOnly) {\n      var _a;\n\n      return (_a = getFlattedNodes(leafOnly)) == null ? void 0 : _a.filter(function (node) {\n        return node.checked !== false;\n      });\n    };\n\n    var clearCheckedNodes = function clearCheckedNodes() {\n      checkedNodes.value.forEach(function (node) {\n        return node.doCheck(false);\n      });\n      calculateCheckedValue();\n    };\n\n    var calculateCheckedValue = function calculateCheckedValue() {\n      var _a;\n\n      var _config$value2 = config.value,\n          checkStrictly = _config$value2.checkStrictly,\n          multiple = _config$value2.multiple;\n      var oldNodes = checkedNodes.value;\n      var newNodes = getCheckedNodes(!checkStrictly);\n      var nodes = sortByOriginalOrder(oldNodes, newNodes);\n      var values = nodes.map(function (node) {\n        return node.valueByOption;\n      });\n      checkedNodes.value = nodes;\n      checkedValue.value = multiple ? values : (_a = values[0]) != null ? _a : null;\n    };\n\n    var syncCheckedValue = function syncCheckedValue() {\n      var loaded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var forced = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var modelValue = props.modelValue;\n      var _config$value3 = config.value,\n          lazy = _config$value3.lazy,\n          multiple = _config$value3.multiple,\n          checkStrictly = _config$value3.checkStrictly;\n      var leafOnly = !checkStrictly;\n      if (!initialLoaded.value || manualChecked || !forced && isEqual(modelValue, checkedValue.value)) return;\n\n      if (lazy && !loaded) {\n        var values = unique(flattenDeep(castArray(modelValue)));\n        var nodes = values.map(function (val) {\n          return store == null ? void 0 : store.getNodeByValue(val);\n        }).filter(function (node) {\n          return !!node && !node.loaded && !node.loading;\n        });\n\n        if (nodes.length) {\n          nodes.forEach(function (node) {\n            lazyLoad(node, function () {\n              return syncCheckedValue(false, forced);\n            });\n          });\n        } else {\n          syncCheckedValue(true, forced);\n        }\n      } else {\n        var _values = multiple ? castArray(modelValue) : [modelValue];\n\n        var _nodes = unique(_values.map(function (val) {\n          return store == null ? void 0 : store.getNodeByValue(val, leafOnly);\n        }));\n\n        syncMenuState(_nodes, forced);\n        checkedValue.value = modelValue;\n      }\n    };\n\n    var syncMenuState = function syncMenuState(newCheckedNodes) {\n      var reserveExpandingState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var checkStrictly = config.value.checkStrictly;\n      var oldNodes = checkedNodes.value;\n      var newNodes = newCheckedNodes.filter(function (node) {\n        return !!node && (checkStrictly || node.isLeaf);\n      });\n      var oldExpandingNode = store == null ? void 0 : store.getSameNode(expandingNode.value);\n      var newExpandingNode = reserveExpandingState && oldExpandingNode || newNodes[0];\n\n      if (newExpandingNode) {\n        newExpandingNode.pathNodes.forEach(function (node) {\n          return expandNode(node, true);\n        });\n      } else {\n        expandingNode.value = null;\n      }\n\n      oldNodes.forEach(function (node) {\n        return node.doCheck(false);\n      });\n      newNodes.forEach(function (node) {\n        return node.doCheck(true);\n      });\n      checkedNodes.value = newNodes;\n      nextTick(scrollToExpandingNode);\n    };\n\n    var scrollToExpandingNode = function scrollToExpandingNode() {\n      if (!isClient) return;\n      menuList.value.forEach(function (menu) {\n        var menuElement = menu == null ? void 0 : menu.$el;\n\n        if (menuElement) {\n          var container = menuElement.querySelector(\".\".concat(ns.namespace.value, \"-scrollbar__wrap\"));\n          var activeNode = menuElement.querySelector(\".\".concat(ns.b(\"node\"), \".\").concat(ns.is(\"active\"))) || menuElement.querySelector(\".\".concat(ns.b(\"node\"), \".in-active-path\"));\n          scrollIntoView(container, activeNode);\n        }\n      });\n    };\n\n    var handleKeyDown = function handleKeyDown(e) {\n      var target = e.target;\n      var code = e.code;\n\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down:\n          {\n            e.preventDefault();\n            var distance = code === EVENT_CODE.up ? -1 : 1;\n            focusNode(getSibling(target, distance, \".\".concat(ns.b(\"node\"), \"[tabindex=\\\"-1\\\"]\")));\n            break;\n          }\n\n        case EVENT_CODE.left:\n          {\n            e.preventDefault();\n            var preMenu = menuList.value[getMenuIndex(target) - 1];\n            var expandedNode = preMenu == null ? void 0 : preMenu.$el.querySelector(\".\".concat(ns.b(\"node\"), \"[aria-expanded=\\\"true\\\"]\"));\n            focusNode(expandedNode);\n            break;\n          }\n\n        case EVENT_CODE.right:\n          {\n            e.preventDefault();\n            var nextMenu = menuList.value[getMenuIndex(target) + 1];\n            var firstNode = nextMenu == null ? void 0 : nextMenu.$el.querySelector(\".\".concat(ns.b(\"node\"), \"[tabindex=\\\"-1\\\"]\"));\n            focusNode(firstNode);\n            break;\n          }\n\n        case EVENT_CODE.enter:\n          checkNode(target);\n          break;\n      }\n    };\n\n    provide(CASCADER_PANEL_INJECTION_KEY, reactive({\n      config: config,\n      expandingNode: expandingNode,\n      checkedNodes: checkedNodes,\n      isHoverMenu: isHoverMenu,\n      initialLoaded: initialLoaded,\n      renderLabelFn: renderLabelFn,\n      lazyLoad: lazyLoad,\n      expandNode: expandNode,\n      handleCheckChange: handleCheckChange\n    }));\n    watch([config, function () {\n      return props.options;\n    }], initStore, {\n      deep: true,\n      immediate: true\n    });\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      manualChecked = false;\n      syncCheckedValue();\n    });\n    watch(checkedValue, function (val) {\n      if (!isEqual(val, props.modelValue)) {\n        emit(UPDATE_MODEL_EVENT, val);\n        emit(CHANGE_EVENT, val);\n      }\n    });\n    onBeforeUpdate(function () {\n      return menuList.value = [];\n    });\n    onMounted(function () {\n      return !isEmpty(props.modelValue) && syncCheckedValue();\n    });\n    return {\n      ns: ns,\n      menuList: menuList,\n      menus: menus,\n      checkedNodes: checkedNodes,\n      handleKeyDown: handleKeyDown,\n      handleCheckChange: handleCheckChange,\n      getFlattedNodes: getFlattedNodes,\n      getCheckedNodes: getCheckedNodes,\n      clearCheckedNodes: clearCheckedNodes,\n      calculateCheckedValue: calculateCheckedValue,\n      scrollToExpandingNode: scrollToExpandingNode\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_cascader_menu = resolveComponent(\"el-cascader-menu\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    \"class\": normalizeClass([_ctx.ns.b(\"panel\"), _ctx.ns.is(\"bordered\", _ctx.border)]),\n    onKeydown: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleKeyDown && _ctx.handleKeyDown.apply(_ctx, arguments);\n    })\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.menus, function (menu, index) {\n    return openBlock(), createBlock(_component_el_cascader_menu, {\n      key: index,\n      ref_for: true,\n      ref: function ref(item) {\n        return _ctx.menuList[index] = item;\n      },\n      index: index,\n      nodes: _toConsumableArray(menu)\n    }, null, 8, [\"index\", \"nodes\"]);\n  }), 128))], 34);\n}\n\nvar CascaderPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/index.vue\"]]);\n\nexport { CascaderPanel as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElCascaderMenu","props","CommonProps","border","type","renderLabel","emits","UPDATE_MODEL_EVENT","CHANGE_EVENT","setup","emit","slots","manualChecked","useNamespace","useCascaderConfig","store","ref","isHoverMenu","computed","config","value","expandTrigger","ExpandTrigger","HOVER","renderLabelFn","initStore","options","cfg","Store","menus","isEmpty","initialLoaded","lazyLoad","list","syncCheckedValue","node","cb","Node","loading","resolve","dataList","_node","parent","loaded","expandNode","silent","level","newExpandingNode","newMenus","_a","expandingNode","handleCheckChange","oldNode","calculateCheckedValue","emitClose","multiple","checkStrictly","expandParentNode","leafOnly","checkedNodes","oldNodes","sortByOriginalOrder","nodes","checkedValue","isEqual","values","val","filter","syncMenuState","modelValue","reserveExpandingState","newNodes","forEach","nextTick","scrollToExpandingNode","menuList","menu","scrollIntoView","code","e","focusNode","checkNode","provide","watch","deep","immediate","onBeforeUpdate","onMounted","ns","handleKeyDown","getFlattedNodes","getCheckedNodes","clearCheckedNodes","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","key","ref_for"],"sources":["../../../../../../packages/components/cascader-panel/src/index.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b('panel'), ns.is('bordered', border)]\"\n    @keydown=\"handleKeyDown\"\n  >\n    <el-cascader-menu\n      v-for=\"(menu, index) in menus\"\n      :key=\"index\"\n      :ref=\"(item) => (menuList[index] = item)\"\n      :index=\"index\"\n      :nodes=\"[...menu]\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  nextTick,\n  onBeforeUpdate,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { flattenDeep, isEqual } from 'lodash-unified'\nimport { isClient } from '@vueuse/core'\nimport {\n  castArray,\n  focusNode,\n  getSibling,\n  isEmpty,\n  scrollIntoView,\n  unique,\n} from '@element-plus/utils'\nimport {\n  CHANGE_EVENT,\n  EVENT_CODE,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\n\nimport ElCascaderMenu from './menu.vue'\nimport Store from './store'\nimport Node, { ExpandTrigger } from './node'\nimport { CommonProps, useCascaderConfig } from './config'\nimport { checkNode, getMenuIndex, sortByOriginalOrder } from './utils'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  default as CascaderNode,\n  CascaderNodeValue,\n  CascaderOption,\n  CascaderValue,\n  RenderLabel,\n} from './node'\n\nimport type { ElCascaderPanelContext } from './types'\n\nexport default defineComponent({\n  name: 'ElCascaderPanel',\n\n  components: {\n    ElCascaderMenu,\n  },\n\n  props: {\n    ...CommonProps,\n    border: {\n      type: Boolean,\n      default: true,\n    },\n    renderLabel: Function as PropType<RenderLabel>,\n  },\n\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, 'close', 'expand-change'],\n\n  setup(props, { emit, slots }) {\n    // for interrupt sync check status in lazy mode\n    let manualChecked = false\n\n    const ns = useNamespace('cascader')\n    const config = useCascaderConfig(props)\n\n    let store: Nullable<Store> = null\n    const initialLoaded = ref(true)\n    const menuList = ref<any[]>([])\n    const checkedValue = ref<Nullable<CascaderValue>>(null)\n    const menus = ref<CascaderNode[][]>([])\n    const expandingNode = ref<Nullable<CascaderNode>>(null)\n    const checkedNodes = ref<CascaderNode[]>([])\n\n    const isHoverMenu = computed(\n      () => config.value.expandTrigger === ExpandTrigger.HOVER\n    )\n    const renderLabelFn = computed(() => props.renderLabel || slots.default)\n\n    const initStore = () => {\n      const { options } = props\n      const cfg = config.value\n\n      manualChecked = false\n      store = new Store(options, cfg)\n      menus.value = [store.getNodes()]\n\n      if (cfg.lazy && isEmpty(props.options)) {\n        initialLoaded.value = false\n        lazyLoad(undefined, (list) => {\n          if (list) {\n            store = new Store(list, cfg)\n            menus.value = [store.getNodes()]\n          }\n          initialLoaded.value = true\n          syncCheckedValue(false, true)\n        })\n      } else {\n        syncCheckedValue(false, true)\n      }\n    }\n\n    const lazyLoad: ElCascaderPanelContext['lazyLoad'] = (node, cb) => {\n      const cfg = config.value\n      node! = node || new Node({}, cfg, undefined, true)\n      node.loading = true\n\n      const resolve = (dataList: CascaderOption[]) => {\n        const _node = node as Node\n        const parent = _node.root ? null : _node\n        dataList && store?.appendNodes(dataList, parent as any)\n        _node.loading = false\n        _node.loaded = true\n        _node.childrenData = _node.childrenData || []\n        cb && cb(dataList)\n      }\n\n      cfg.lazyLoad(node, resolve as any)\n    }\n\n    const expandNode: ElCascaderPanelContext['expandNode'] = (node, silent) => {\n      const { level } = node\n      const newMenus = menus.value.slice(0, level)\n      let newExpandingNode: Nullable<CascaderNode>\n\n      if (node.isLeaf) {\n        newExpandingNode = node.pathNodes[level - 2]\n      } else {\n        newExpandingNode = node\n        newMenus.push(node.children)\n      }\n\n      if (expandingNode.value?.uid !== newExpandingNode?.uid) {\n        expandingNode.value = node\n        menus.value = newMenus\n        !silent && emit('expand-change', node?.pathValues || [])\n      }\n    }\n\n    const handleCheckChange: ElCascaderPanelContext['handleCheckChange'] = (\n      node,\n      checked,\n      emitClose = true\n    ) => {\n      const { checkStrictly, multiple } = config.value\n      const oldNode = checkedNodes.value[0]\n      manualChecked = true\n\n      !multiple && oldNode?.doCheck(false)\n      node.doCheck(checked)\n      calculateCheckedValue()\n      emitClose && !multiple && !checkStrictly && emit('close')\n      !emitClose && !multiple && !checkStrictly && expandParentNode(node)\n    }\n\n    const expandParentNode = (node) => {\n      if (!node) return\n      node = node.parent\n      expandParentNode(node)\n      node && expandNode(node)\n    }\n\n    const getFlattedNodes = (leafOnly: boolean) => {\n      return store?.getFlattedNodes(leafOnly)\n    }\n\n    const getCheckedNodes = (leafOnly: boolean) => {\n      return getFlattedNodes(leafOnly)?.filter((node) => node.checked !== false)\n    }\n\n    const clearCheckedNodes = () => {\n      checkedNodes.value.forEach((node) => node.doCheck(false))\n      calculateCheckedValue()\n    }\n\n    const calculateCheckedValue = () => {\n      const { checkStrictly, multiple } = config.value\n      const oldNodes = checkedNodes.value\n      const newNodes = getCheckedNodes(!checkStrictly)!\n      // ensure the original order\n      const nodes = sortByOriginalOrder(oldNodes, newNodes)\n      const values = nodes.map((node) => node.valueByOption)\n      checkedNodes.value = nodes\n      checkedValue.value = multiple ? values : values[0] ?? null\n    }\n\n    const syncCheckedValue = (loaded = false, forced = false) => {\n      const { modelValue } = props\n      const { lazy, multiple, checkStrictly } = config.value\n      const leafOnly = !checkStrictly\n\n      if (\n        !initialLoaded.value ||\n        manualChecked ||\n        (!forced && isEqual(modelValue, checkedValue.value))\n      )\n        return\n\n      if (lazy && !loaded) {\n        const values: CascaderNodeValue[] = unique(\n          flattenDeep(castArray(modelValue))\n        )\n        const nodes = values\n          .map((val) => store?.getNodeByValue(val))\n          .filter((node) => !!node && !node.loaded && !node.loading) as Node[]\n\n        if (nodes.length) {\n          nodes.forEach((node) => {\n            lazyLoad(node, () => syncCheckedValue(false, forced))\n          })\n        } else {\n          syncCheckedValue(true, forced)\n        }\n      } else {\n        const values = multiple ? castArray(modelValue) : [modelValue]\n        const nodes = unique(\n          values.map((val) => store?.getNodeByValue(val, leafOnly))\n        ) as Node[]\n        syncMenuState(nodes, forced)\n        checkedValue.value = modelValue!\n      }\n    }\n\n    const syncMenuState = (\n      newCheckedNodes: CascaderNode[],\n      reserveExpandingState = true\n    ) => {\n      const { checkStrictly } = config.value\n      const oldNodes = checkedNodes.value\n      const newNodes = newCheckedNodes.filter(\n        (node) => !!node && (checkStrictly || node.isLeaf)\n      )\n      const oldExpandingNode = store?.getSameNode(expandingNode.value!)\n      const newExpandingNode =\n        (reserveExpandingState && oldExpandingNode) || newNodes[0]\n\n      if (newExpandingNode) {\n        newExpandingNode.pathNodes.forEach((node) => expandNode(node, true))\n      } else {\n        expandingNode.value = null\n      }\n\n      oldNodes.forEach((node) => node.doCheck(false))\n      newNodes.forEach((node) => node.doCheck(true))\n\n      checkedNodes.value = newNodes\n      nextTick(scrollToExpandingNode)\n    }\n\n    const scrollToExpandingNode = () => {\n      if (!isClient) return\n\n      menuList.value.forEach((menu) => {\n        const menuElement = menu?.$el\n        if (menuElement) {\n          const container = menuElement.querySelector(\n            `.${ns.namespace.value}-scrollbar__wrap`\n          )\n          const activeNode =\n            menuElement.querySelector(`.${ns.b('node')}.${ns.is('active')}`) ||\n            menuElement.querySelector(`.${ns.b('node')}.in-active-path`)\n          scrollIntoView(container, activeNode)\n        }\n      })\n    }\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      const target = e.target as HTMLElement\n      const { code } = e\n\n      switch (code) {\n        case EVENT_CODE.up:\n        case EVENT_CODE.down: {\n          e.preventDefault()\n          const distance = code === EVENT_CODE.up ? -1 : 1\n          focusNode(\n            getSibling(target, distance, `.${ns.b('node')}[tabindex=\"-1\"]`)\n          )\n          break\n        }\n        case EVENT_CODE.left: {\n          e.preventDefault()\n          const preMenu = menuList.value[getMenuIndex(target) - 1]\n          const expandedNode = preMenu?.$el.querySelector(\n            `.${ns.b('node')}[aria-expanded=\"true\"]`\n          )\n          focusNode(expandedNode)\n          break\n        }\n        case EVENT_CODE.right: {\n          e.preventDefault()\n          const nextMenu = menuList.value[getMenuIndex(target) + 1]\n          const firstNode = nextMenu?.$el.querySelector(\n            `.${ns.b('node')}[tabindex=\"-1\"]`\n          )\n          focusNode(firstNode)\n          break\n        }\n        case EVENT_CODE.enter:\n          checkNode(target)\n          break\n      }\n    }\n\n    provide(\n      CASCADER_PANEL_INJECTION_KEY,\n      reactive({\n        config,\n        expandingNode,\n        checkedNodes,\n        isHoverMenu,\n        initialLoaded,\n        renderLabelFn,\n        lazyLoad,\n        expandNode,\n        handleCheckChange,\n      })\n    )\n\n    watch([config, () => props.options], initStore, {\n      deep: true,\n      immediate: true,\n    })\n\n    watch(\n      () => props.modelValue,\n      () => {\n        manualChecked = false\n        syncCheckedValue()\n      }\n    )\n\n    watch(checkedValue, (val) => {\n      if (!isEqual(val, props.modelValue)) {\n        emit(UPDATE_MODEL_EVENT, val)\n        emit(CHANGE_EVENT, val)\n      }\n    })\n\n    onBeforeUpdate(() => (menuList.value = []))\n\n    onMounted(() => !isEmpty(props.modelValue) && syncCheckedValue())\n\n    return {\n      ns,\n      menuList,\n      menus,\n      checkedNodes,\n      handleKeyDown,\n      handleCheckChange,\n      getFlattedNodes,\n      getCheckedNodes,\n      clearCheckedNodes,\n      calculateCheckedValue,\n      scrollToExpandingNode,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}