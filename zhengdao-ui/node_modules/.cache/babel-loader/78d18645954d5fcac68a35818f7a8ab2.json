{"ast":null,"code":"import \"core-js/modules/es.array.find-index.js\";\nimport { shallowReactive } from 'vue';\nvar instances = shallowReactive([]);\n\nvar getInstance = function getInstance(id) {\n  var idx = instances.findIndex(function (instance) {\n    return instance.id === id;\n  });\n  var current = instances[idx];\n  var prev;\n\n  if (idx > 0) {\n    prev = instances[idx - 1];\n  }\n\n  return {\n    current: current,\n    prev: prev\n  };\n};\n\nvar getLastOffset = function getLastOffset(id) {\n  var _getInstance = getInstance(id),\n      prev = _getInstance.prev;\n\n  if (!prev) return 0;\n  return prev.vm.exposeProxy.bottom;\n};\n\nexport { getInstance, getLastOffset, instances };","map":{"version":3,"mappings":";;AACY,IAACA,SAAS,GAAGC,eAAe,CAAC,EAAD,CAA5B;;AACA,IAACC,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD,EAAQ;EACjC,IAAMC,GAAG,GAAGJ,SAAS,CAACK,SAAV,CAAoB,UAACC,QAAD;IAAA,OAAcA,QAAQ,CAACH,EAAT,KAAgBA,EAA9B;EAAA,CAApB,CAAZ;EACA,IAAMI,OAAO,GAAGP,SAAS,CAACI,GAAD,CAAzB;EACA,IAAII,IAAJ;;EACA,IAAIJ,GAAG,GAAG,CAAV,EAAa;IACXI,IAAI,GAAGR,SAAS,CAACI,GAAG,GAAG,CAAP,CAAhB;EACD;;EACD,OAAO;IAAEG,OAAO,EAAPA,OAAF;IAAWC,IAAI,EAAJA;EAAX,CAAP;AACF,CARY;;AASA,IAACC,aAAa,GAAG,SAAhBA,aAAgB,CAACN,EAAD,EAAQ;EACnC,mBAAiBD,WAAW,CAACC,EAAD,CAA5B;EAAA,IAAQK,IAAR,gBAAQA,IAAR;;EACA,IAAI,CAACA,IAAL,EACE,OAAO,CAAP;EACF,OAAOA,IAAI,CAACE,EAAL,CAAQC,WAAR,CAAoBC,MAA3B;AACF,CALY","names":["instances","shallowReactive","getInstance","id","idx","findIndex","instance","current","prev","getLastOffset","vm","exposeProxy","bottom"],"sources":["../../../../../../packages/components/message/src/instance.ts"],"sourcesContent":["import { shallowReactive } from 'vue'\nimport type { ComponentInternalInstance, VNode } from 'vue'\nimport type { Mutable } from '@element-plus/utils'\nimport type { MessageHandler, MessageProps } from './message'\n\nexport type MessageContext = {\n  id: string\n  vnode: VNode\n  handler: MessageHandler\n  vm: ComponentInternalInstance\n  props: Mutable<MessageProps>\n}\n\nexport const instances: MessageContext[] = shallowReactive([])\n\nexport const getInstance = (id: string) => {\n  const idx = instances.findIndex((instance) => instance.id === id)\n  const current = instances[idx]\n  let prev: MessageContext | undefined\n  if (idx > 0) {\n    prev = instances[idx - 1]\n  }\n  return { current, prev }\n}\n\nexport const getLastOffset = (id: string): number => {\n  const { prev } = getInstance(id)\n  if (!prev) return 0\n  return prev.vm.exposeProxy!.bottom\n}\n"]},"metadata":{},"sourceType":"module"}