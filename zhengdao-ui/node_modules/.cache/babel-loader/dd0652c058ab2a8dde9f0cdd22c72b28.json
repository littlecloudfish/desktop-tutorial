{"ast":null,"code":"import _objectSpread from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { h, render, watch, isVNode } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport MessageBoxConstructor from './index.mjs';\nimport { hasOwn, isString, isObject } from '@vue/shared';\nimport { isUndefined } from '../../../utils/types.mjs';\nvar messageInstance = /* @__PURE__ */new Map();\n\nvar initInstance = function initInstance(props, container) {\n  var appContext = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var vnode = h(MessageBoxConstructor, props);\n  vnode.appContext = appContext;\n  render(vnode, container);\n  document.body.appendChild(container.firstElementChild);\n  return vnode.component;\n};\n\nvar genContainer = function genContainer() {\n  return document.createElement(\"div\");\n};\n\nvar showMessage = function showMessage(options, appContext) {\n  var container = genContainer();\n\n  options.onVanish = function () {\n    render(null, container);\n    messageInstance[\"delete\"](vm);\n  };\n\n  options.onAction = function (action) {\n    var currentMsg = messageInstance.get(vm);\n    var resolve;\n\n    if (options.showInput) {\n      resolve = {\n        value: vm.inputValue,\n        action: action\n      };\n    } else {\n      resolve = action;\n    }\n\n    if (options.callback) {\n      options.callback(resolve, instance.proxy);\n    } else {\n      if (action === \"cancel\" || action === \"close\") {\n        if (options.distinguishCancelAndClose && action !== \"cancel\") {\n          currentMsg.reject(\"close\");\n        } else {\n          currentMsg.reject(\"cancel\");\n        }\n      } else {\n        currentMsg.resolve(resolve);\n      }\n    }\n  };\n\n  var instance = initInstance(options, container, appContext);\n  var vm = instance.proxy;\n\n  for (var prop in options) {\n    if (hasOwn(options, prop) && !hasOwn(vm.$props, prop)) {\n      vm[prop] = options[prop];\n    }\n  }\n\n  watch(function () {\n    return vm.message;\n  }, function (newVal, oldVal) {\n    if (isVNode(newVal)) {\n      instance.slots[\"default\"] = function () {\n        return [newVal];\n      };\n    } else if (isVNode(oldVal) && !isVNode(newVal)) {\n      delete instance.slots[\"default\"];\n    }\n  }, {\n    immediate: true\n  });\n  vm.visible = true;\n  return vm;\n};\n\nfunction MessageBox(options) {\n  var appContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (!isClient) return Promise.reject();\n  var callback;\n\n  if (isString(options) || isVNode(options)) {\n    options = {\n      message: options\n    };\n  } else {\n    callback = options.callback;\n  }\n\n  return new Promise(function (resolve, reject) {\n    var vm = showMessage(options, appContext != null ? appContext : MessageBox._context);\n    messageInstance.set(vm, {\n      options: options,\n      callback: callback,\n      resolve: resolve,\n      reject: reject\n    });\n  });\n}\n\nvar MESSAGE_BOX_VARIANTS = [\"alert\", \"confirm\", \"prompt\"];\nvar MESSAGE_BOX_DEFAULT_OPTS = {\n  alert: {\n    closeOnPressEscape: false,\n    closeOnClickModal: false\n  },\n  confirm: {\n    showCancelButton: true\n  },\n  prompt: {\n    showCancelButton: true,\n    showInput: true\n  }\n};\nMESSAGE_BOX_VARIANTS.forEach(function (boxType) {\n  MessageBox[boxType] = messageBoxFactory(boxType);\n});\n\nfunction messageBoxFactory(boxType) {\n  return function (message, titleOrOpts, options, appContext) {\n    var title;\n\n    if (isObject(titleOrOpts)) {\n      options = titleOrOpts;\n      title = \"\";\n    } else if (isUndefined(titleOrOpts)) {\n      title = \"\";\n    } else {\n      title = titleOrOpts;\n    }\n\n    return MessageBox(Object.assign(_objectSpread({\n      title: title,\n      message: message,\n      type: \"\"\n    }, MESSAGE_BOX_DEFAULT_OPTS[boxType]), options, {\n      boxType: boxType\n    }), appContext);\n  };\n}\n\nMessageBox.close = function () {\n  messageInstance.forEach(function (_, vm) {\n    vm.doClose();\n  });\n  messageInstance.clear();\n};\n\nMessageBox._context = null;\nexport { MessageBox as default };","map":{"version":3,"mappings":"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","names":["messageInstance","Map","initInstance","props","container","appContext","vnode","h","MessageBoxConstructor","render","document","body","appendChild","firstElementChild","component","genContainer","createElement","showMessage","options","onVanish","vm","onAction","action","currentMsg","get","resolve","showInput","value","inputValue","callback","instance","proxy","distinguishCancelAndClose","reject","prop","hasOwn","$props","watch","message","newVal","oldVal","isVNode","slots","immediate","visible","MessageBox","isClient","Promise","isString","_context","set","MESSAGE_BOX_VARIANTS","MESSAGE_BOX_DEFAULT_OPTS","alert","closeOnPressEscape","closeOnClickModal","confirm","showCancelButton","prompt","forEach","boxType","messageBoxFactory","titleOrOpts","title","isObject","isUndefined","Object","assign","type","close","_","doClose","clear"],"sources":["../../../../../../packages/components/message-box/src/messageBox.ts"],"sourcesContent":["// @ts-nocheck\nimport { h, render, watch } from 'vue'\nimport { isClient } from '@vueuse/core'\nimport {\n  hasOwn,\n  isObject,\n  isString,\n  isUndefined,\n  isVNode,\n} from '@element-plus/utils'\nimport MessageBoxConstructor from './index.vue'\n\nimport type { AppContext, ComponentPublicInstance, VNode } from 'vue'\nimport type {\n  Action,\n  Callback,\n  ElMessageBoxOptions,\n  IElMessageBox,\n  MessageBoxData,\n  MessageBoxState,\n} from './message-box.type'\n\n// component default merge props & data\n\nconst messageInstance = new Map<\n  ComponentPublicInstance<{ doClose: () => void }>, // marking doClose as function\n  {\n    options: any\n    callback: Callback\n    resolve: (res: any) => void\n    reject: (reason?: any) => void\n  }\n>()\n\nconst initInstance = (\n  props: any,\n  container: HTMLElement,\n  appContext: AppContext | null = null\n) => {\n  const vnode = h(MessageBoxConstructor, props)\n  vnode.appContext = appContext\n  render(vnode, container)\n  document.body.appendChild(container.firstElementChild!)\n  return vnode.component\n}\n\nconst genContainer = () => {\n  return document.createElement('div')\n}\n\nconst showMessage = (options: any, appContext?: AppContext | null) => {\n  const container = genContainer()\n  // Adding destruct method.\n  // when transition leaves emitting `vanish` evt. so that we can do the clean job.\n  options.onVanish = () => {\n    // not sure if this causes mem leak, need proof to verify that.\n    // maybe calling out like 1000 msg-box then close them all.\n    render(null, container)\n    messageInstance.delete(vm) // Remove vm to avoid mem leak.\n    // here we were suppose to call document.body.removeChild(container.firstElementChild)\n    // but render(null, container) did that job for us. so that we do not call that directly\n  }\n\n  options.onAction = (action: Action) => {\n    const currentMsg = messageInstance.get(vm)!\n    let resolve: Action | { value: string; action: Action }\n    if (options.showInput) {\n      resolve = { value: vm.inputValue, action }\n    } else {\n      resolve = action\n    }\n    if (options.callback) {\n      options.callback(resolve, instance.proxy)\n    } else {\n      if (action === 'cancel' || action === 'close') {\n        if (options.distinguishCancelAndClose && action !== 'cancel') {\n          currentMsg.reject('close')\n        } else {\n          currentMsg.reject('cancel')\n        }\n      } else {\n        currentMsg.resolve(resolve)\n      }\n    }\n  }\n\n  const instance = initInstance(options, container, appContext)!\n\n  // This is how we use message box programmably.\n  // Maybe consider releasing a template version?\n  // get component instance like v2.\n  const vm = instance.proxy as ComponentPublicInstance<\n    {\n      visible: boolean\n      doClose: () => void\n    } & MessageBoxState\n  >\n\n  for (const prop in options) {\n    if (hasOwn(options, prop) && !hasOwn(vm.$props, prop)) {\n      vm[prop as string] = options[prop]\n    }\n  }\n\n  watch(\n    () => vm.message,\n    (newVal, oldVal) => {\n      if (isVNode(newVal)) {\n        // Override slots since message is vnode type.\n        instance.slots.default = () => [newVal]\n      } else if (isVNode(oldVal) && !isVNode(newVal)) {\n        delete instance.slots.default\n      }\n    },\n    {\n      immediate: true,\n    }\n  )\n\n  // change visibility after everything is settled\n  vm.visible = true\n  return vm\n}\n\nasync function MessageBox(\n  options: ElMessageBoxOptions,\n  appContext?: AppContext | null\n): Promise<MessageBoxData>\nfunction MessageBox(\n  options: ElMessageBoxOptions | string | VNode,\n  appContext: AppContext | null = null\n): Promise<{ value: string; action: Action } | Action> {\n  if (!isClient) return Promise.reject()\n  let callback\n  if (isString(options) || isVNode(options)) {\n    options = {\n      message: options,\n    }\n  } else {\n    callback = options.callback\n  }\n\n  return new Promise((resolve, reject) => {\n    const vm = showMessage(options, appContext ?? MessageBox._context)\n    // collect this vm in order to handle upcoming events.\n    messageInstance.set(vm, {\n      options,\n      callback,\n      resolve,\n      reject,\n    })\n  })\n}\n\nconst MESSAGE_BOX_VARIANTS = ['alert', 'confirm', 'prompt'] as const\nconst MESSAGE_BOX_DEFAULT_OPTS: Record<\n  typeof MESSAGE_BOX_VARIANTS[number],\n  Partial<ElMessageBoxOptions>\n> = {\n  alert: { closeOnPressEscape: false, closeOnClickModal: false },\n  confirm: { showCancelButton: true },\n  prompt: { showCancelButton: true, showInput: true },\n}\n\nMESSAGE_BOX_VARIANTS.forEach((boxType) => {\n  MessageBox[boxType] = messageBoxFactory(boxType)\n})\n\nfunction messageBoxFactory(boxType: typeof MESSAGE_BOX_VARIANTS[number]) {\n  return (\n    message: string,\n    titleOrOpts: string | ElMessageBoxOptions,\n    options?: ElMessageBoxOptions,\n    appContext?: AppContext | null\n  ) => {\n    let title: string\n    if (isObject(titleOrOpts)) {\n      options = titleOrOpts\n      title = ''\n    } else if (isUndefined(titleOrOpts)) {\n      title = ''\n    } else {\n      title = titleOrOpts\n    }\n\n    return MessageBox(\n      Object.assign(\n        {\n          title,\n          message,\n          type: '',\n          ...MESSAGE_BOX_DEFAULT_OPTS[boxType],\n        },\n        options,\n        {\n          boxType,\n        }\n      ),\n      appContext\n    )\n  }\n}\n\nMessageBox.close = () => {\n  // instance.setupInstall.doClose()\n  // instance.setupInstall.state.visible = false\n\n  messageInstance.forEach((_, vm) => {\n    vm.doClose()\n  })\n\n  messageInstance.clear()\n}\n\nMessageBox._context = null\n\nexport default MessageBox as IElMessageBox\n"]},"metadata":{},"sourceType":"module"}