{"ast":null,"code":"import _toConsumableArray from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createForOfIteratorHelper from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\n\nvar obtainAllFocusableElements = function obtainAllFocusableElements(element) {\n  var nodes = [];\n  var walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: function acceptNode(node) {\n      var isHiddenInput = node.tagName === \"INPUT\" && node.type === \"hidden\";\n      if (node.disabled || node.hidden || isHiddenInput) return NodeFilter.FILTER_SKIP;\n      return node.tabIndex >= 0 || node === document.activeElement ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;\n    }\n  });\n\n  while (walker.nextNode()) {\n    nodes.push(walker.currentNode);\n  }\n\n  return nodes;\n};\n\nvar getVisibleElement = function getVisibleElement(elements, container) {\n  var _iterator = _createForOfIteratorHelper(elements),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var element = _step.value;\n      if (!isHidden(element, container)) return element;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n};\n\nvar isHidden = function isHidden(element, container) {\n  if (process.env.NODE_ENV === \"test\") return false;\n  if (getComputedStyle(element).visibility === \"hidden\") return true;\n\n  while (element) {\n    if (container && element === container) return false;\n    if (getComputedStyle(element).display === \"none\") return true;\n    element = element.parentElement;\n  }\n\n  return false;\n};\n\nvar getEdges = function getEdges(container) {\n  var focusable = obtainAllFocusableElements(container);\n  var first = getVisibleElement(focusable, container);\n  var last = getVisibleElement(focusable.reverse(), container);\n  return [first, last];\n};\n\nvar isSelectable = function isSelectable(element) {\n  return element instanceof HTMLInputElement && \"select\" in element;\n};\n\nvar tryFocus = function tryFocus(element, shouldSelect) {\n  if (element && element.focus) {\n    var prevFocusedElement = document.activeElement;\n    element.focus({\n      preventScroll: true\n    });\n\n    if (element !== prevFocusedElement && isSelectable(element) && shouldSelect) {\n      element.select();\n    }\n  }\n};\n\nfunction removeFromStack(list, item) {\n  var copy = _toConsumableArray(list);\n\n  var idx = list.indexOf(item);\n\n  if (idx !== -1) {\n    copy.splice(idx, 1);\n  }\n\n  return copy;\n}\n\nvar createFocusableStack = function createFocusableStack() {\n  var stack = [];\n\n  var push = function push(layer) {\n    var currentLayer = stack[0];\n\n    if (currentLayer && layer !== currentLayer) {\n      currentLayer.pause();\n    }\n\n    stack = removeFromStack(stack, layer);\n    stack.unshift(layer);\n  };\n\n  var remove = function remove(layer) {\n    var _a, _b;\n\n    stack = removeFromStack(stack, layer);\n    (_b = (_a = stack[0]) == null ? void 0 : _a.resume) == null ? void 0 : _b.call(_a);\n  };\n\n  return {\n    push: push,\n    remove: remove\n  };\n};\n\nvar focusFirstDescendant = function focusFirstDescendant(elements) {\n  var shouldSelect = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var prevFocusedElement = document.activeElement;\n\n  var _iterator2 = _createForOfIteratorHelper(elements),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var element = _step2.value;\n      tryFocus(element, shouldSelect);\n      if (document.activeElement !== prevFocusedElement) return;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n};\n\nvar focusableStack = createFocusableStack();\nexport { focusFirstDescendant, focusableStack, getEdges, getVisibleElement, isHidden, obtainAllFocusableElements, tryFocus };","map":{"version":3,"mappings":"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","names":["obtainAllFocusableElements","element","nodes","walker","document","createTreeWalker","NodeFilter","SHOW_ELEMENT","acceptNode","node","isHiddenInput","tagName","type","disabled","hidden","FILTER_SKIP","tabIndex","activeElement","FILTER_ACCEPT","nextNode","push","currentNode","getVisibleElement","elements","container","isHidden","process","env","NODE_ENV","getComputedStyle","visibility","display","parentElement","getEdges","focusable","first","last","reverse","isSelectable","HTMLInputElement","tryFocus","shouldSelect","focus","prevFocusedElement","preventScroll","select","removeFromStack","list","item","copy","idx","indexOf","splice","createFocusableStack","stack","layer","currentLayer","pause","unshift","remove","_a","_b","resume","call","focusFirstDescendant","focusableStack"],"sources":["../../../../../../packages/components/focus-trap/src/utils.ts"],"sourcesContent":["export type FocusLayer = {\n  paused: boolean\n  pause: () => void\n  resume: () => void\n}\n\nexport type FocusStack = FocusLayer[]\n\nexport const obtainAllFocusableElements = (\n  element: HTMLElement\n): HTMLElement[] => {\n  const nodes: HTMLElement[] = []\n  const walker = document.createTreeWalker(element, NodeFilter.SHOW_ELEMENT, {\n    acceptNode: (\n      node: Element & {\n        disabled: boolean\n        hidden: boolean\n        type: string\n        tabIndex: number\n      }\n    ) => {\n      const isHiddenInput = node.tagName === 'INPUT' && node.type === 'hidden'\n      if (node.disabled || node.hidden || isHiddenInput)\n        return NodeFilter.FILTER_SKIP\n      return node.tabIndex >= 0 || node === document.activeElement\n        ? NodeFilter.FILTER_ACCEPT\n        : NodeFilter.FILTER_SKIP\n    },\n  })\n  while (walker.nextNode()) nodes.push(walker.currentNode as HTMLElement)\n\n  return nodes\n}\n\nexport const getVisibleElement = (\n  elements: HTMLElement[],\n  container: HTMLElement\n) => {\n  for (const element of elements) {\n    if (!isHidden(element, container)) return element\n  }\n}\n\nexport const isHidden = (element: HTMLElement, container: HTMLElement) => {\n  if (process.env.NODE_ENV === 'test') return false\n  if (getComputedStyle(element).visibility === 'hidden') return true\n\n  while (element) {\n    if (container && element === container) return false\n    if (getComputedStyle(element).display === 'none') return true\n    element = element.parentElement as HTMLElement\n  }\n\n  return false\n}\n\nexport const getEdges = (container: HTMLElement) => {\n  const focusable = obtainAllFocusableElements(container)\n  const first = getVisibleElement(focusable, container)\n  const last = getVisibleElement(focusable.reverse(), container)\n  return [first, last]\n}\n\nconst isSelectable = (\n  element: any\n): element is HTMLInputElement & { select: () => void } => {\n  return element instanceof HTMLInputElement && 'select' in element\n}\n\nexport const tryFocus = (\n  element?: HTMLElement | { focus: () => void } | null,\n  shouldSelect?: boolean\n) => {\n  if (element && element.focus) {\n    const prevFocusedElement = document.activeElement\n    element.focus({ preventScroll: true })\n    if (\n      element !== prevFocusedElement &&\n      isSelectable(element) &&\n      shouldSelect\n    ) {\n      element.select()\n    }\n  }\n}\n\nfunction removeFromStack<T>(list: T[], item: T) {\n  const copy = [...list]\n\n  const idx = list.indexOf(item)\n\n  if (idx !== -1) {\n    copy.splice(idx, 1)\n  }\n  return copy\n}\n\nconst createFocusableStack = () => {\n  let stack = [] as FocusStack\n\n  const push = (layer: FocusLayer) => {\n    const currentLayer = stack[0]\n\n    if (currentLayer && layer !== currentLayer) {\n      currentLayer.pause()\n    }\n\n    stack = removeFromStack(stack, layer)\n    stack.unshift(layer)\n  }\n\n  const remove = (layer: FocusLayer) => {\n    stack = removeFromStack(stack, layer)\n    stack[0]?.resume?.()\n  }\n\n  return {\n    push,\n    remove,\n  }\n}\n\nexport const focusFirstDescendant = (\n  elements: HTMLElement[],\n  shouldSelect = false\n) => {\n  const prevFocusedElement = document.activeElement\n  for (const element of elements) {\n    tryFocus(element, shouldSelect)\n    if (document.activeElement !== prevFocusedElement) return\n  }\n}\n\nexport const focusableStack = createFocusableStack()\n"]},"metadata":{},"sourceType":"module"}