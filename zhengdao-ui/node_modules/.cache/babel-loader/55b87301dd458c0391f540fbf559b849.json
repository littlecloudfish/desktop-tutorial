{"ast":null,"code":"import _objectSpread from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport { watch, nextTick, computed, toRefs } from 'vue';\nimport { isEqual, pick } from 'lodash-unified';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport _Tree from '../../tree/index.mjs';\nimport component from './tree-select-option.mjs';\nimport { toValidArray, treeFind, isValidValue, isValidArray } from './utils.mjs';\nimport { isFunction } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\n\nvar useTree = function useTree(props, _ref, _ref2) {\n  var attrs = _ref.attrs,\n      slots = _ref.slots,\n      emit = _ref.emit;\n  var select = _ref2.select,\n      tree = _ref2.tree,\n      key = _ref2.key;\n  watch(function () {\n    return props.modelValue;\n  }, function () {\n    if (props.showCheckbox) {\n      nextTick(function () {\n        var treeInstance = tree.value;\n\n        if (treeInstance && !isEqual(treeInstance.getCheckedKeys(), toValidArray(props.modelValue))) {\n          treeInstance.setCheckedKeys(toValidArray(props.modelValue));\n        }\n      });\n    }\n  }, {\n    immediate: true,\n    deep: true\n  });\n  var propsMap = computed(function () {\n    return _objectSpread({\n      value: key.value\n    }, props.props);\n  });\n\n  var getNodeValByProp = function getNodeValByProp(prop, data) {\n    var _a;\n\n    var propVal = propsMap.value[prop];\n\n    if (isFunction(propVal)) {\n      return propVal(data, (_a = tree.value) == null ? void 0 : _a.getNode(getNodeValByProp(\"value\", data)));\n    } else {\n      return data[propVal];\n    }\n  };\n\n  var defaultExpandedParentKeys = toValidArray(props.modelValue).map(function (value) {\n    return treeFind(props.data || [], function (data) {\n      return getNodeValByProp(\"value\", data) === value;\n    }, function (data) {\n      return getNodeValByProp(\"children\", data);\n    }, function (data, index, array, parent) {\n      return parent && getNodeValByProp(\"value\", parent);\n    });\n  }).filter(function (item) {\n    return isValidValue(item);\n  });\n  return _objectSpread(_objectSpread(_objectSpread({}, pick(toRefs(props), Object.keys(_Tree.props))), attrs), {}, {\n    nodeKey: key,\n    expandOnClickNode: computed(function () {\n      return !props.checkStrictly;\n    }),\n    defaultExpandedKeys: computed(function () {\n      return props.defaultExpandedKeys ? props.defaultExpandedKeys.concat(defaultExpandedParentKeys) : defaultExpandedParentKeys;\n    }),\n    renderContent: function renderContent(h, _ref3) {\n      var node = _ref3.node,\n          data = _ref3.data,\n          store = _ref3.store;\n      return h(component, {\n        value: getNodeValByProp(\"value\", data),\n        label: getNodeValByProp(\"label\", data),\n        disabled: getNodeValByProp(\"disabled\", data)\n      }, props.renderContent ? function () {\n        return props.renderContent(h, {\n          node: node,\n          data: data,\n          store: store\n        });\n      } : slots[\"default\"] ? function () {\n        return slots[\"default\"]({\n          node: node,\n          data: data,\n          store: store\n        });\n      } : void 0);\n    },\n    filterNodeMethod: function filterNodeMethod(value, data, node) {\n      var _a;\n\n      if (props.filterNodeMethod) return props.filterNodeMethod(value, data, node);\n      if (!value) return true;\n      return (_a = getNodeValByProp(\"label\", data)) == null ? void 0 : _a.includes(value);\n    },\n    onNodeClick: function onNodeClick(data, node, e) {\n      var _a, _b, _c;\n\n      (_a = attrs.onNodeClick) == null ? void 0 : _a.call(attrs, data, node, e);\n      if (props.showCheckbox && props.checkOnClickNode) return;\n\n      if (!props.showCheckbox && (props.checkStrictly || node.isLeaf)) {\n        if (!getNodeValByProp(\"disabled\", data)) {\n          var option = (_b = select.value) == null ? void 0 : _b.options.get(getNodeValByProp(\"value\", data));\n          (_c = select.value) == null ? void 0 : _c.handleOptionSelect(option, true);\n        }\n      } else {\n        e.proxy.handleExpandIconClick();\n      }\n    },\n    onCheck: function onCheck(data, params) {\n      var _a;\n\n      (_a = attrs.onCheck) == null ? void 0 : _a.call(attrs, data, params);\n      var dataValue = getNodeValByProp(\"value\", data);\n\n      if (props.checkStrictly) {\n        emit(UPDATE_MODEL_EVENT, props.multiple ? params.checkedKeys : params.checkedKeys.includes(dataValue) ? dataValue : void 0);\n      } else {\n        if (props.multiple) {\n          emit(UPDATE_MODEL_EVENT, tree.value.getCheckedKeys(true));\n        } else {\n          var firstLeaf = treeFind([data], function (data2) {\n            return !isValidArray(getNodeValByProp(\"children\", data2)) && !getNodeValByProp(\"disabled\", data2);\n          }, function (data2) {\n            return getNodeValByProp(\"children\", data2);\n          });\n          var firstLeafKey = firstLeaf ? getNodeValByProp(\"value\", firstLeaf) : void 0;\n          var hasCheckedChild = isValidValue(props.modelValue) && !!treeFind([data], function (data2) {\n            return getNodeValByProp(\"value\", data2) === props.modelValue;\n          }, function (data2) {\n            return getNodeValByProp(\"children\", data2);\n          });\n          emit(UPDATE_MODEL_EVENT, firstLeafKey === props.modelValue || hasCheckedChild ? void 0 : firstLeafKey);\n        }\n      }\n    }\n  });\n};\n\nexport { useTree };","map":{"version":3,"mappings":"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","names":["useTree","props","attrs","slots","emit","select","tree","key","watch","modelValue","showCheckbox","nextTick","treeInstance","value","isEqual","getCheckedKeys","toValidArray","setCheckedKeys","immediate","deep","propsMap","computed","getNodeValByProp","prop","data","_a","propVal","isFunction","getNode","defaultExpandedParentKeys","map","treeFind","index","array","parent","filter","item","isValidValue","pick","toRefs","Object","keys","ElTree","nodeKey","expandOnClickNode","checkStrictly","defaultExpandedKeys","concat","renderContent","h","node","store","TreeSelectOption","label","disabled","filterNodeMethod","includes","onNodeClick","e","_b","_c","call","checkOnClickNode","isLeaf","option","options","get","handleOptionSelect","proxy","handleExpandIconClick","onCheck","params","dataValue","UPDATE_MODEL_EVENT","multiple","checkedKeys","firstLeaf","data2","isValidArray","firstLeafKey","hasCheckedChild"],"sources":["../../../../../../packages/components/tree-select/src/tree.ts"],"sourcesContent":["// @ts-nocheck\nimport { computed, nextTick, toRefs, watch } from 'vue'\nimport { isEqual, pick } from 'lodash-unified'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { isFunction } from '@element-plus/utils'\nimport ElTree from '@element-plus/components/tree'\nimport TreeSelectOption from './tree-select-option'\nimport { isValidArray, isValidValue, toValidArray, treeFind } from './utils'\nimport type { Ref } from 'vue'\nimport type ElSelect from '@element-plus/components/select'\nimport type Node from '@element-plus/components/tree/src/model/node'\nimport type { TreeNodeData } from '@element-plus/components/tree/src/tree.type'\n\nexport const useTree = (\n  props,\n  { attrs, slots, emit },\n  {\n    select,\n    tree,\n    key,\n  }: {\n    select: Ref<InstanceType<typeof ElSelect> | undefined>\n    tree: Ref<InstanceType<typeof ElTree> | undefined>\n    key: Ref<string>\n  }\n) => {\n  watch(\n    () => props.modelValue,\n    () => {\n      if (props.showCheckbox) {\n        nextTick(() => {\n          const treeInstance = tree.value\n          if (\n            treeInstance &&\n            !isEqual(\n              treeInstance.getCheckedKeys(),\n              toValidArray(props.modelValue)\n            )\n          ) {\n            treeInstance.setCheckedKeys(toValidArray(props.modelValue))\n          }\n        })\n      }\n    },\n    {\n      immediate: true,\n      deep: true,\n    }\n  )\n\n  const propsMap = computed(() => ({\n    value: key.value,\n    ...props.props,\n  }))\n\n  const getNodeValByProp = (\n    prop: 'value' | 'label' | 'children' | 'disabled' | 'isLeaf',\n    data: TreeNodeData\n  ) => {\n    const propVal = propsMap.value[prop]\n    if (isFunction(propVal)) {\n      return propVal(\n        data,\n        tree.value?.getNode(getNodeValByProp('value', data)) as Node\n      )\n    } else {\n      return data[propVal as string]\n    }\n  }\n\n  const defaultExpandedParentKeys = toValidArray(props.modelValue)\n    .map((value) => {\n      return treeFind(\n        props.data || [],\n        (data) => getNodeValByProp('value', data) === value,\n        (data) => getNodeValByProp('children', data),\n        (data, index, array, parent) =>\n          parent && getNodeValByProp('value', parent)\n      )\n    })\n    .filter((item) => isValidValue(item))\n\n  return {\n    ...pick(toRefs(props), Object.keys(ElTree.props)),\n    ...attrs,\n    nodeKey: key,\n\n    // only expand on click node when the `check-strictly` is false\n    expandOnClickNode: computed(() => {\n      return !props.checkStrictly\n    }),\n\n    // show current selected node only first time,\n    // fix the problem of expanding multiple nodes when checking multiple nodes\n    defaultExpandedKeys: computed(() => {\n      return props.defaultExpandedKeys\n        ? props.defaultExpandedKeys.concat(defaultExpandedParentKeys)\n        : defaultExpandedParentKeys\n    }),\n\n    renderContent: (h, { node, data, store }) => {\n      return h(\n        TreeSelectOption,\n        {\n          value: getNodeValByProp('value', data),\n          label: getNodeValByProp('label', data),\n          disabled: getNodeValByProp('disabled', data),\n        },\n        props.renderContent\n          ? () => props.renderContent(h, { node, data, store })\n          : slots.default\n          ? () => slots.default({ node, data, store })\n          : undefined\n      )\n    },\n    filterNodeMethod: (value, data, node) => {\n      if (props.filterNodeMethod)\n        return props.filterNodeMethod(value, data, node)\n      if (!value) return true\n      return getNodeValByProp('label', data)?.includes(value)\n    },\n    onNodeClick: (data, node, e) => {\n      attrs.onNodeClick?.(data, node, e)\n\n      // `onCheck` is trigger when `checkOnClickNode`\n      if (props.showCheckbox && props.checkOnClickNode) return\n\n      // now `checkOnClickNode` is false, only no checkbox and `checkStrictly` or `isLeaf`\n      if (!props.showCheckbox && (props.checkStrictly || node.isLeaf)) {\n        if (!getNodeValByProp('disabled', data)) {\n          const option = select.value?.options.get(\n            getNodeValByProp('value', data)\n          )\n          select.value?.handleOptionSelect(option, true)\n        }\n      } else {\n        e.proxy.handleExpandIconClick()\n      }\n    },\n    onCheck: (data, params) => {\n      attrs.onCheck?.(data, params)\n\n      const dataValue = getNodeValByProp('value', data)\n      if (props.checkStrictly) {\n        emit(\n          UPDATE_MODEL_EVENT,\n          // Checking for changes may come from `check-on-node-click`\n          props.multiple\n            ? params.checkedKeys\n            : params.checkedKeys.includes(dataValue)\n            ? dataValue\n            : undefined\n        )\n      }\n      // only can select leaf node\n      else {\n        if (props.multiple) {\n          emit(\n            UPDATE_MODEL_EVENT,\n            (tree.value as InstanceType<typeof ElTree>).getCheckedKeys(true)\n          )\n        } else {\n          // select first leaf node when check parent\n          const firstLeaf = treeFind(\n            [data],\n            (data) =>\n              !isValidArray(getNodeValByProp('children', data)) &&\n              !getNodeValByProp('disabled', data),\n            (data) => getNodeValByProp('children', data)\n          )\n          const firstLeafKey = firstLeaf\n            ? getNodeValByProp('value', firstLeaf)\n            : undefined\n\n          // unselect when any child checked\n          const hasCheckedChild =\n            isValidValue(props.modelValue) &&\n            !!treeFind(\n              [data],\n              (data) => getNodeValByProp('value', data) === props.modelValue,\n              (data) => getNodeValByProp('children', data)\n            )\n\n          emit(\n            UPDATE_MODEL_EVENT,\n            firstLeafKey === props.modelValue || hasCheckedChild\n              ? undefined\n              : firstLeafKey\n          )\n        }\n      }\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}