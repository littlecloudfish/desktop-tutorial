{"ast":null,"code":"import \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport { shallowRef, onMounted, onUpdated, watch } from 'vue';\nimport { useEventListener } from '@vueuse/core';\nimport '../../../../constants/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { EVENT_CODE } from '../../../../constants/aria.mjs';\n\nfunction useKeydown(_ref, store) {\n  var el$ = _ref.el$;\n  var ns = useNamespace(\"tree\");\n  var treeItems = shallowRef([]);\n  var checkboxItems = shallowRef([]);\n  onMounted(function () {\n    initTabIndex();\n  });\n  onUpdated(function () {\n    treeItems.value = Array.from(el$.value.querySelectorAll(\"[role=treeitem]\"));\n    checkboxItems.value = Array.from(el$.value.querySelectorAll(\"input[type=checkbox]\"));\n  });\n  watch(checkboxItems, function (val) {\n    val.forEach(function (checkbox) {\n      checkbox.setAttribute(\"tabindex\", \"-1\");\n    });\n  });\n\n  var handleKeydown = function handleKeydown(ev) {\n    var currentItem = ev.target;\n    if (!currentItem.className.includes(ns.b(\"node\"))) return;\n    var code = ev.code;\n    treeItems.value = Array.from(el$.value.querySelectorAll(\".\".concat(ns.is(\"focusable\"), \"[role=treeitem]\")));\n    var currentIndex = treeItems.value.indexOf(currentItem);\n    var nextIndex;\n\n    if ([EVENT_CODE.up, EVENT_CODE.down].includes(code)) {\n      ev.preventDefault();\n\n      if (code === EVENT_CODE.up) {\n        nextIndex = currentIndex === -1 ? 0 : currentIndex !== 0 ? currentIndex - 1 : treeItems.value.length - 1;\n        var startIndex = nextIndex;\n\n        while (true) {\n          if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus) break;\n          nextIndex--;\n\n          if (nextIndex === startIndex) {\n            nextIndex = -1;\n            break;\n          }\n\n          if (nextIndex < 0) {\n            nextIndex = treeItems.value.length - 1;\n          }\n        }\n      } else {\n        nextIndex = currentIndex === -1 ? 0 : currentIndex < treeItems.value.length - 1 ? currentIndex + 1 : 0;\n        var _startIndex = nextIndex;\n\n        while (true) {\n          if (store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus) break;\n          nextIndex++;\n\n          if (nextIndex === _startIndex) {\n            nextIndex = -1;\n            break;\n          }\n\n          if (nextIndex >= treeItems.value.length) {\n            nextIndex = 0;\n          }\n        }\n      }\n\n      nextIndex !== -1 && treeItems.value[nextIndex].focus();\n    }\n\n    if ([EVENT_CODE.left, EVENT_CODE.right].includes(code)) {\n      ev.preventDefault();\n      currentItem.click();\n    }\n\n    var hasInput = currentItem.querySelector('[type=\"checkbox\"]');\n\n    if ([EVENT_CODE.enter, EVENT_CODE.space].includes(code) && hasInput) {\n      ev.preventDefault();\n      hasInput.click();\n    }\n  };\n\n  useEventListener(el$, \"keydown\", handleKeydown);\n\n  var initTabIndex = function initTabIndex() {\n    var _a;\n\n    treeItems.value = Array.from(el$.value.querySelectorAll(\".\".concat(ns.is(\"focusable\"), \"[role=treeitem]\")));\n    checkboxItems.value = Array.from(el$.value.querySelectorAll(\"input[type=checkbox]\"));\n    var checkedItem = el$.value.querySelectorAll(\".\".concat(ns.is(\"checked\"), \"[role=treeitem]\"));\n\n    if (checkedItem.length) {\n      checkedItem[0].setAttribute(\"tabindex\", \"0\");\n      return;\n    }\n\n    (_a = treeItems.value[0]) == null ? void 0 : _a.setAttribute(\"tabindex\", \"0\");\n  };\n}\n\nexport { useKeydown };","map":{"version":3,"mappings":"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","names":["useKeydown","store","el$","ns","useNamespace","treeItems","shallowRef","checkboxItems","onMounted","initTabIndex","onUpdated","value","Array","from","querySelectorAll","watch","val","forEach","checkbox","setAttribute","handleKeydown","ev","currentItem","target","className","includes","b","code","is","currentIndex","indexOf","nextIndex","EVENT_CODE","up","down","preventDefault","length","startIndex","getNode","dataset","key","canFocus","focus","left","right","click","hasInput","querySelector","enter","space","useEventListener","_a","checkedItem"],"sources":["../../../../../../../packages/components/tree/src/model/useKeydown.ts"],"sourcesContent":["// @ts-nocheck\nimport { onMounted, onUpdated, shallowRef, watch } from 'vue'\nimport { useEventListener } from '@vueuse/core'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport type TreeStore from './tree-store'\n\nimport type { Ref } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\n\ninterface UseKeydownOption {\n  el$: Ref<HTMLElement>\n}\nexport function useKeydown({ el$ }: UseKeydownOption, store: Ref<TreeStore>) {\n  const ns = useNamespace('tree')\n\n  const treeItems = shallowRef<Nullable<HTMLElement>[]>([])\n  const checkboxItems = shallowRef<Nullable<HTMLElement>[]>([])\n\n  onMounted(() => {\n    initTabIndex()\n  })\n\n  onUpdated(() => {\n    treeItems.value = Array.from(el$.value.querySelectorAll('[role=treeitem]'))\n    checkboxItems.value = Array.from(\n      el$.value.querySelectorAll('input[type=checkbox]')\n    )\n  })\n\n  watch(checkboxItems, (val) => {\n    val.forEach((checkbox) => {\n      checkbox.setAttribute('tabindex', '-1')\n    })\n  })\n\n  const handleKeydown = (ev: KeyboardEvent): void => {\n    const currentItem = ev.target as HTMLElement\n    if (!currentItem.className.includes(ns.b('node'))) return\n    const code = ev.code\n    treeItems.value = Array.from(\n      el$.value.querySelectorAll(`.${ns.is('focusable')}[role=treeitem]`)\n    )\n    const currentIndex = treeItems.value.indexOf(currentItem)\n    let nextIndex\n    if ([EVENT_CODE.up, EVENT_CODE.down].includes(code)) {\n      ev.preventDefault()\n      if (code === EVENT_CODE.up) {\n        nextIndex =\n          currentIndex === -1\n            ? 0\n            : currentIndex !== 0\n            ? currentIndex - 1\n            : treeItems.value.length - 1\n        const startIndex = nextIndex\n        while (true) {\n          if (\n            store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus\n          )\n            break\n          nextIndex--\n          if (nextIndex === startIndex) {\n            nextIndex = -1\n            break\n          }\n          if (nextIndex < 0) {\n            nextIndex = treeItems.value.length - 1\n          }\n        }\n      } else {\n        nextIndex =\n          currentIndex === -1\n            ? 0\n            : currentIndex < treeItems.value.length - 1\n            ? currentIndex + 1\n            : 0\n        const startIndex = nextIndex\n        while (true) {\n          if (\n            store.value.getNode(treeItems.value[nextIndex].dataset.key).canFocus\n          )\n            break\n          nextIndex++\n          if (nextIndex === startIndex) {\n            nextIndex = -1\n            break\n          }\n          if (nextIndex >= treeItems.value.length) {\n            nextIndex = 0\n          }\n        }\n      }\n      nextIndex !== -1 && treeItems.value[nextIndex].focus()\n    }\n    if ([EVENT_CODE.left, EVENT_CODE.right].includes(code)) {\n      ev.preventDefault()\n      currentItem.click()\n    }\n    const hasInput = currentItem.querySelector(\n      '[type=\"checkbox\"]'\n    ) as Nullable<HTMLInputElement>\n    if ([EVENT_CODE.enter, EVENT_CODE.space].includes(code) && hasInput) {\n      ev.preventDefault()\n      hasInput.click()\n    }\n  }\n\n  useEventListener(el$, 'keydown', handleKeydown)\n\n  const initTabIndex = (): void => {\n    treeItems.value = Array.from(\n      el$.value.querySelectorAll(`.${ns.is('focusable')}[role=treeitem]`)\n    )\n    checkboxItems.value = Array.from(\n      el$.value.querySelectorAll('input[type=checkbox]')\n    )\n    const checkedItem = el$.value.querySelectorAll(\n      `.${ns.is('checked')}[role=treeitem]`\n    )\n    if (checkedItem.length) {\n      checkedItem[0].setAttribute('tabindex', '0')\n      return\n    }\n    treeItems.value[0]?.setAttribute('tabindex', '0')\n  }\n}\n"]},"metadata":{},"sourceType":"module"}