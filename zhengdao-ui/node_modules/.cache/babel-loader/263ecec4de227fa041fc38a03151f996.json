{"ast":null,"code":"import _objectSpread from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, useSlots, computed, ref, provide, openBlock, createBlock, Teleport, createVNode, Transition, unref, withCtx, withDirectives, createElementVNode, normalizeClass, createSlots, renderSlot, createCommentVNode, vShow } from 'vue';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../focus-trap/index.mjs';\nimport ElDialogContent from './dialog-content2.mjs';\nimport { dialogProps, dialogEmits } from './dialog.mjs';\nimport { useDialog } from './use-dialog.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useDeprecated } from '../../../hooks/use-deprecated/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { dialogInjectionKey } from '../../../tokens/dialog.mjs';\nimport { useSameTarget } from '../../../hooks/use-same-target/index.mjs';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\nvar _hoisted_1 = [\"aria-label\", \"aria-labelledby\", \"aria-describedby\"];\nvar __default__ = {\n  name: \"ElDialog\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: dialogProps,\n  emits: dialogEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n    var slots = useSlots();\n    useDeprecated({\n      scope: \"el-dialog\",\n      from: \"the title slot\",\n      replacement: \"the header slot\",\n      version: \"3.0.0\",\n      ref: \"https://element-plus.org/en-US/component/dialog.html#slots\"\n    }, computed(function () {\n      return !!slots.title;\n    }));\n    var ns = useNamespace(\"dialog\");\n    var dialogRef = ref();\n    var headerRef = ref();\n    var dialogContentRef = ref();\n\n    var _useDialog = useDialog(props, dialogRef),\n        visible = _useDialog.visible,\n        titleId = _useDialog.titleId,\n        bodyId = _useDialog.bodyId,\n        style = _useDialog.style,\n        rendered = _useDialog.rendered,\n        zIndex = _useDialog.zIndex,\n        afterEnter = _useDialog.afterEnter,\n        afterLeave = _useDialog.afterLeave,\n        beforeLeave = _useDialog.beforeLeave,\n        handleClose = _useDialog.handleClose,\n        onModalClick = _useDialog.onModalClick,\n        onOpenAutoFocus = _useDialog.onOpenAutoFocus,\n        onCloseAutoFocus = _useDialog.onCloseAutoFocus,\n        onCloseRequested = _useDialog.onCloseRequested;\n\n    provide(dialogInjectionKey, {\n      dialogRef: dialogRef,\n      headerRef: headerRef,\n      bodyId: bodyId,\n      ns: ns,\n      rendered: rendered,\n      style: style\n    });\n    var overlayEvent = useSameTarget(onModalClick);\n    var draggable = computed(function () {\n      return props.draggable && !props.fullscreen;\n    });\n    expose({\n      visible: visible,\n      dialogContentRef: dialogContentRef\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(Teleport, {\n        to: \"body\",\n        disabled: !_ctx.appendToBody\n      }, [createVNode(Transition, {\n        name: \"dialog-fade\",\n        onAfterEnter: unref(afterEnter),\n        onAfterLeave: unref(afterLeave),\n        onBeforeLeave: unref(beforeLeave),\n        persisted: \"\"\n      }, {\n        \"default\": withCtx(function () {\n          return [withDirectives(createVNode(unref(ElOverlay), {\n            \"custom-mask-event\": \"\",\n            mask: _ctx.modal,\n            \"overlay-class\": _ctx.modalClass,\n            \"z-index\": unref(zIndex)\n          }, {\n            \"default\": withCtx(function () {\n              return [createElementVNode(\"div\", {\n                role: \"dialog\",\n                \"aria-modal\": \"true\",\n                \"aria-label\": _ctx.title || void 0,\n                \"aria-labelledby\": !_ctx.title ? unref(titleId) : void 0,\n                \"aria-describedby\": unref(bodyId),\n                \"class\": normalizeClass(\"\".concat(unref(ns).namespace.value, \"-overlay-dialog\")),\n                onClick: _cache[0] || (_cache[0] = function () {\n                  var _unref;\n\n                  return unref(overlayEvent).onClick && (_unref = unref(overlayEvent)).onClick.apply(_unref, arguments);\n                }),\n                onMousedown: _cache[1] || (_cache[1] = function () {\n                  var _unref2;\n\n                  return unref(overlayEvent).onMousedown && (_unref2 = unref(overlayEvent)).onMousedown.apply(_unref2, arguments);\n                }),\n                onMouseup: _cache[2] || (_cache[2] = function () {\n                  var _unref3;\n\n                  return unref(overlayEvent).onMouseup && (_unref3 = unref(overlayEvent)).onMouseup.apply(_unref3, arguments);\n                })\n              }, [createVNode(unref(ElFocusTrap), {\n                loop: \"\",\n                trapped: unref(visible),\n                \"focus-start-el\": \"container\",\n                onFocusAfterTrapped: unref(onOpenAutoFocus),\n                onFocusAfterReleased: unref(onCloseAutoFocus),\n                onReleaseRequested: unref(onCloseRequested)\n              }, {\n                \"default\": withCtx(function () {\n                  return [unref(rendered) ? (openBlock(), createBlock(ElDialogContent, {\n                    key: 0,\n                    ref_key: \"dialogContentRef\",\n                    ref: dialogContentRef,\n                    \"custom-class\": _ctx.customClass,\n                    center: _ctx.center,\n                    \"close-icon\": _ctx.closeIcon,\n                    draggable: unref(draggable),\n                    fullscreen: _ctx.fullscreen,\n                    \"show-close\": _ctx.showClose,\n                    title: _ctx.title,\n                    onClose: unref(handleClose)\n                  }, createSlots({\n                    header: withCtx(function () {\n                      return [!_ctx.$slots.title ? renderSlot(_ctx.$slots, \"header\", {\n                        key: 0,\n                        close: unref(handleClose),\n                        titleId: unref(titleId),\n                        titleClass: unref(ns).e(\"title\")\n                      }) : renderSlot(_ctx.$slots, \"title\", {\n                        key: 1\n                      })];\n                    }),\n                    \"default\": withCtx(function () {\n                      return [renderSlot(_ctx.$slots, \"default\")];\n                    }),\n                    _: 2\n                  }, [_ctx.$slots.footer ? {\n                    name: \"footer\",\n                    fn: withCtx(function () {\n                      return [renderSlot(_ctx.$slots, \"footer\")];\n                    })\n                  } : void 0]), 1032, [\"custom-class\", \"center\", \"close-icon\", \"draggable\", \"fullscreen\", \"show-close\", \"title\", \"onClose\"])) : createCommentVNode(\"v-if\", true)];\n                }),\n                _: 3\n              }, 8, [\"trapped\", \"onFocusAfterTrapped\", \"onFocusAfterReleased\", \"onReleaseRequested\"])], 42, _hoisted_1)];\n            }),\n            _: 3\n          }, 8, [\"mask\", \"overlay-class\", \"z-index\"]), [[vShow, unref(visible)]])];\n        }),\n        _: 3\n      }, 8, [\"onAfterEnter\", \"onAfterLeave\", \"onBeforeLeave\"])], 8, [\"disabled\"]);\n    };\n  }\n}));\n\nvar Dialog = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/dialog/src/dialog.vue\"]]);\n\nexport { Dialog as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;IAoFA;IAGAA;MACAC,kBADA;MAEAC,sBAFA;MAGAC,8BAHA;MAIAC,gBAJA;MAKAC;IALA,GAOAC;MAAA;IAAA,EAPA;IAUA;IACA;IACA;IACA;;IAEA,iBAeAC,2BAfA;IAAA,IACAC,OADA,cACAA,OADA;IAAA,IAEAC,OAFA,cAEAA,OAFA;IAAA,IAGAC,MAHA,cAGAA,MAHA;IAAA,IAIAC,KAJA,cAIAA,KAJA;IAAA,IAKAC,QALA,cAKAA,QALA;IAAA,IAMAC,MANA,cAMAA,MANA;IAAA,IAOAC,UAPA,cAOAA,UAPA;IAAA,IAQAC,UARA,cAQAA,UARA;IAAA,IASAC,WATA,cASAA,WATA;IAAA,IAUAC,WAVA,cAUAA,WAVA;IAAA,IAWAC,YAXA,cAWAA,YAXA;IAAA,IAYAC,eAZA,cAYAA,eAZA;IAAA,IAaAC,gBAbA,cAaAA,gBAbA;IAAA,IAcAC,gBAdA,cAcAA,gBAdA;;IAiBAC;MACAC,oBADA;MAEAC,oBAFA;MAGAd,cAHA;MAIAe,MAJA;MAKAb,kBALA;MAMAD;IANA;IASA;IAEA;MAAA;IAAA;IAEAe;MAEAlB,gBAFA;MAGAmB;IAHA","names":["useDeprecated","scope","from","replacement","version","ref","computed","useDialog","visible","titleId","bodyId","style","rendered","zIndex","afterEnter","afterLeave","beforeLeave","handleClose","onModalClick","onOpenAutoFocus","onCloseAutoFocus","onCloseRequested","provide","dialogRef","headerRef","ns","expose","dialogContentRef"],"sources":["../../../../../../packages/components/dialog/src/dialog.vue"],"sourcesContent":["<template>\n  <teleport to=\"body\" :disabled=\"!appendToBody\">\n    <transition\n      name=\"dialog-fade\"\n      @after-enter=\"afterEnter\"\n      @after-leave=\"afterLeave\"\n      @before-leave=\"beforeLeave\"\n    >\n      <el-overlay\n        v-show=\"visible\"\n        custom-mask-event\n        :mask=\"modal\"\n        :overlay-class=\"modalClass\"\n        :z-index=\"zIndex\"\n      >\n        <div\n          role=\"dialog\"\n          aria-modal=\"true\"\n          :aria-label=\"title || undefined\"\n          :aria-labelledby=\"!title ? titleId : undefined\"\n          :aria-describedby=\"bodyId\"\n          :class=\"`${ns.namespace.value}-overlay-dialog`\"\n          @click=\"overlayEvent.onClick\"\n          @mousedown=\"overlayEvent.onMousedown\"\n          @mouseup=\"overlayEvent.onMouseup\"\n        >\n          <el-focus-trap\n            loop\n            :trapped=\"visible\"\n            focus-start-el=\"container\"\n            @focus-after-trapped=\"onOpenAutoFocus\"\n            @focus-after-released=\"onCloseAutoFocus\"\n            @release-requested=\"onCloseRequested\"\n          >\n            <el-dialog-content\n              v-if=\"rendered\"\n              ref=\"dialogContentRef\"\n              :custom-class=\"customClass\"\n              :center=\"center\"\n              :close-icon=\"closeIcon\"\n              :draggable=\"draggable\"\n              :fullscreen=\"fullscreen\"\n              :show-close=\"showClose\"\n              :title=\"title\"\n              @close=\"handleClose\"\n            >\n              <template #header>\n                <slot\n                  v-if=\"!$slots.title\"\n                  name=\"header\"\n                  :close=\"handleClose\"\n                  :title-id=\"titleId\"\n                  :title-class=\"ns.e('title')\"\n                />\n                <slot v-else name=\"title\" />\n              </template>\n              <slot />\n              <template v-if=\"$slots.footer\" #footer>\n                <slot name=\"footer\" />\n              </template>\n            </el-dialog-content>\n          </el-focus-trap>\n        </div>\n      </el-overlay>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, provide, ref, useSlots } from 'vue'\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport { useDeprecated, useNamespace, useSameTarget } from '@element-plus/hooks'\nimport { dialogInjectionKey } from '@element-plus/tokens'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport ElDialogContent from './dialog-content.vue'\nimport { dialogEmits, dialogProps } from './dialog'\nimport { useDialog } from './use-dialog'\n\ndefineOptions({\n  name: 'ElDialog',\n})\n\nconst props = defineProps(dialogProps)\ndefineEmits(dialogEmits)\nconst slots = useSlots()\n\nuseDeprecated(\n  {\n    scope: 'el-dialog',\n    from: 'the title slot',\n    replacement: 'the header slot',\n    version: '3.0.0',\n    ref: 'https://element-plus.org/en-US/component/dialog.html#slots',\n  },\n  computed(() => !!slots.title)\n)\n\nconst ns = useNamespace('dialog')\nconst dialogRef = ref<HTMLElement>()\nconst headerRef = ref<HTMLElement>()\nconst dialogContentRef = ref()\n\nconst {\n  visible,\n  titleId,\n  bodyId,\n  style,\n  rendered,\n  zIndex,\n  afterEnter,\n  afterLeave,\n  beforeLeave,\n  handleClose,\n  onModalClick,\n  onOpenAutoFocus,\n  onCloseAutoFocus,\n  onCloseRequested,\n} = useDialog(props, dialogRef)\n\nprovide(dialogInjectionKey, {\n  dialogRef,\n  headerRef,\n  bodyId,\n  ns,\n  rendered,\n  style,\n})\n\nconst overlayEvent = useSameTarget(onModalClick)\n\nconst draggable = computed(() => props.draggable && !props.fullscreen)\n\ndefineExpose({\n  /** @description whether the dialog is visible */\n  visible,\n  dialogContentRef,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}