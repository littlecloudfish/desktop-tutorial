{"ast":null,"code":"import _toConsumableArray from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { defineComponent, computed, ref, unref, toRef, provide, readonly, watch, onDeactivated, resolveComponent, openBlock, createBlock, withCtx, createVNode, renderSlot, createCommentVNode, createElementBlock, toDisplayString } from 'vue';\nimport { ElPopper } from '../../popper/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport ElTooltipContent from './content.mjs';\nimport ElTooltipTrigger from './trigger.mjs';\nimport { useTooltipContentProps, useTooltipTriggerProps, useTooltipProps } from './tooltip.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { createModelToggleComposable } from '../../../hooks/use-model-toggle/index.mjs';\nimport ElPopperArrow from '../../popper/src/arrow2.mjs';\nimport { usePopperProps } from '../../popper/src/popper.mjs';\nimport { usePopperArrowProps } from '../../popper/src/arrow.mjs';\nimport { usePopperContainer } from '../../../hooks/use-popper-container/index.mjs';\nimport { isUndefined } from '../../../utils/types.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { isBoolean } from '@vueuse/core';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { useDelayedToggle } from '../../../hooks/use-delayed-toggle/index.mjs';\n\nvar _createModelToggleCom = createModelToggleComposable(\"visible\"),\n    useModelToggleProps = _createModelToggleCom.useModelToggleProps,\n    useModelToggle = _createModelToggleCom.useModelToggle,\n    useModelToggleEmits = _createModelToggleCom.useModelToggleEmits;\n\nvar _sfc_main = defineComponent({\n  name: \"ElTooltip\",\n  components: {\n    ElPopper: ElPopper,\n    ElPopperArrow: ElPopperArrow,\n    ElTooltipContent: ElTooltipContent,\n    ElTooltipTrigger: ElTooltipTrigger\n  },\n  props: _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, usePopperProps), useModelToggleProps), useTooltipContentProps), useTooltipTriggerProps), usePopperArrowProps), useTooltipProps),\n  emits: [].concat(_toConsumableArray(useModelToggleEmits), [\"before-show\", \"before-hide\", \"show\", \"hide\", \"open\", \"close\"]),\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    usePopperContainer();\n    var compatShowAfter = computed(function () {\n      if (!isUndefined(props.openDelay)) {\n        debugWarn(\"ElTooltip\", \"open-delay is about to be deprecated in the next major version, please use `show-after` instead\");\n      }\n\n      return props.openDelay || props.showAfter;\n    });\n    var compatShowArrow = computed(function () {\n      if (!isUndefined(props.visibleArrow)) {\n        debugWarn(\"ElTooltip\", \"`visible-arrow` is about to be deprecated in the next major version, please use `show-arrow` instead\");\n      }\n\n      return isBoolean(props.visibleArrow) ? props.visibleArrow : props.showArrow;\n    });\n    var id = useId();\n    var popperRef = ref(null);\n    var contentRef = ref(null);\n\n    var updatePopper = function updatePopper() {\n      var _a;\n\n      var popperComponent = unref(popperRef);\n\n      if (popperComponent) {\n        (_a = popperComponent.popperInstanceRef) == null ? void 0 : _a.update();\n      }\n    };\n\n    var open = ref(false);\n    var toggleReason = ref(void 0);\n\n    var _useModelToggle = useModelToggle({\n      indicator: open,\n      toggleReason: toggleReason\n    }),\n        show = _useModelToggle.show,\n        hide = _useModelToggle.hide,\n        hasUpdateHandler = _useModelToggle.hasUpdateHandler;\n\n    var _useDelayedToggle = useDelayedToggle({\n      showAfter: compatShowAfter,\n      hideAfter: toRef(props, \"hideAfter\"),\n      open: show,\n      close: hide\n    }),\n        _onOpen = _useDelayedToggle.onOpen,\n        _onClose = _useDelayedToggle.onClose;\n\n    var controlled = computed(function () {\n      return isBoolean(props.visible) && !hasUpdateHandler.value;\n    });\n    provide(TOOLTIP_INJECTION_KEY, {\n      controlled: controlled,\n      id: id,\n      open: readonly(open),\n      trigger: toRef(props, \"trigger\"),\n      onOpen: function onOpen(event) {\n        _onOpen(event);\n      },\n      onClose: function onClose(event) {\n        _onClose(event);\n      },\n      onToggle: function onToggle(event) {\n        if (unref(open)) {\n          _onClose(event);\n        } else {\n          _onOpen(event);\n        }\n      },\n      onShow: function onShow() {\n        emit(\"show\", toggleReason.value);\n      },\n      onHide: function onHide() {\n        emit(\"hide\", toggleReason.value);\n      },\n      onBeforeShow: function onBeforeShow() {\n        emit(\"before-show\", toggleReason.value);\n      },\n      onBeforeHide: function onBeforeHide() {\n        emit(\"before-hide\", toggleReason.value);\n      },\n      updatePopper: updatePopper\n    });\n    watch(function () {\n      return props.disabled;\n    }, function (disabled) {\n      if (disabled && open.value) {\n        open.value = false;\n      }\n    });\n\n    var isFocusInsideContent = function isFocusInsideContent() {\n      var _a, _b;\n\n      var popperContent = (_b = (_a = contentRef.value) == null ? void 0 : _a.contentRef) == null ? void 0 : _b.popperContentRef;\n      return popperContent && popperContent.contains(document.activeElement);\n    };\n\n    onDeactivated(function () {\n      return open.value && hide();\n    });\n    return {\n      compatShowAfter: compatShowAfter,\n      compatShowArrow: compatShowArrow,\n      popperRef: popperRef,\n      contentRef: contentRef,\n      open: open,\n      hide: hide,\n      isFocusInsideContent: isFocusInsideContent,\n      updatePopper: updatePopper,\n      onOpen: _onOpen,\n      onClose: _onClose\n    };\n  }\n});\n\nvar _hoisted_1 = [\"innerHTML\"];\nvar _hoisted_2 = {\n  key: 1\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_tooltip_trigger = resolveComponent(\"el-tooltip-trigger\");\n\n  var _component_el_popper_arrow = resolveComponent(\"el-popper-arrow\");\n\n  var _component_el_tooltip_content = resolveComponent(\"el-tooltip-content\");\n\n  var _component_el_popper = resolveComponent(\"el-popper\");\n\n  return openBlock(), createBlock(_component_el_popper, {\n    ref: \"popperRef\",\n    role: _ctx.role\n  }, {\n    \"default\": withCtx(function () {\n      return [createVNode(_component_el_tooltip_trigger, {\n        disabled: _ctx.disabled,\n        trigger: _ctx.trigger,\n        \"trigger-keys\": _ctx.triggerKeys,\n        \"virtual-ref\": _ctx.virtualRef,\n        \"virtual-triggering\": _ctx.virtualTriggering\n      }, {\n        \"default\": withCtx(function () {\n          return [_ctx.$slots[\"default\"] ? renderSlot(_ctx.$slots, \"default\", {\n            key: 0\n          }) : createCommentVNode(\"v-if\", true)];\n        }),\n        _: 3\n      }, 8, [\"disabled\", \"trigger\", \"trigger-keys\", \"virtual-ref\", \"virtual-triggering\"]), createVNode(_component_el_tooltip_content, {\n        ref: \"contentRef\",\n        \"aria-label\": _ctx.ariaLabel,\n        \"boundaries-padding\": _ctx.boundariesPadding,\n        content: _ctx.content,\n        disabled: _ctx.disabled,\n        effect: _ctx.effect,\n        enterable: _ctx.enterable,\n        \"fallback-placements\": _ctx.fallbackPlacements,\n        \"hide-after\": _ctx.hideAfter,\n        \"gpu-acceleration\": _ctx.gpuAcceleration,\n        offset: _ctx.offset,\n        persistent: _ctx.persistent,\n        \"popper-class\": _ctx.popperClass,\n        \"popper-style\": _ctx.popperStyle,\n        placement: _ctx.placement,\n        \"popper-options\": _ctx.popperOptions,\n        pure: _ctx.pure,\n        \"raw-content\": _ctx.rawContent,\n        \"reference-el\": _ctx.referenceEl,\n        \"trigger-target-el\": _ctx.triggerTargetEl,\n        \"show-after\": _ctx.compatShowAfter,\n        strategy: _ctx.strategy,\n        teleported: _ctx.teleported,\n        transition: _ctx.transition,\n        \"virtual-triggering\": _ctx.virtualTriggering,\n        \"z-index\": _ctx.zIndex,\n        \"append-to\": _ctx.appendTo\n      }, {\n        \"default\": withCtx(function () {\n          return [renderSlot(_ctx.$slots, \"content\", {}, function () {\n            return [_ctx.rawContent ? (openBlock(), createElementBlock(\"span\", {\n              key: 0,\n              innerHTML: _ctx.content\n            }, null, 8, _hoisted_1)) : (openBlock(), createElementBlock(\"span\", _hoisted_2, toDisplayString(_ctx.content), 1))];\n          }), _ctx.compatShowArrow ? (openBlock(), createBlock(_component_el_popper_arrow, {\n            key: 0,\n            \"arrow-offset\": _ctx.arrowOffset\n          }, null, 8, [\"arrow-offset\"])) : createCommentVNode(\"v-if\", true)];\n        }),\n        _: 3\n      }, 8, [\"aria-label\", \"boundaries-padding\", \"content\", \"disabled\", \"effect\", \"enterable\", \"fallback-placements\", \"hide-after\", \"gpu-acceleration\", \"offset\", \"persistent\", \"popper-class\", \"popper-style\", \"placement\", \"popper-options\", \"pure\", \"raw-content\", \"reference-el\", \"trigger-target-el\", \"show-after\", \"strategy\", \"teleported\", \"transition\", \"virtual-triggering\", \"z-index\", \"append-to\"])];\n    }),\n    _: 3\n  }, 8, [\"role\"]);\n}\n\nvar Tooltip = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tooltip/src/tooltip.vue\"]]);\n\nexport { Tooltip as default };","map":{"version":3,"mappings":"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","names":["createModelToggleComposable","useModelToggleProps","useModelToggle","useModelToggleEmits","_sfc_main","defineComponent","name","components","ElPopper","ElPopperArrow","ElTooltipContent","ElTooltipTrigger","props","usePopperProps","useTooltipContentProps","useTooltipTriggerProps","usePopperArrowProps","useTooltipProps","emits","setup","emit","usePopperContainer","computed","isUndefined","debugWarn","openDelay","isBoolean","visibleArrow","id","useId","ref","updatePopper","popperComponent","toggleReason","indicator","show","hide","hasUpdateHandler","useDelayedToggle","showAfter","compatShowAfter","hideAfter","open","close","onOpen","onClose","provide","controlled","trigger","toRef","event","onToggle","onShow","onHide","onBeforeShow","onBeforeHide","watch","disabled","isFocusInsideContent","_b","popperContent","contains","document","onDeactivated","compatShowArrow","popperRef","contentRef","_component_el_popper","_openBlock","_withCtx","_ctx","_","_createVNode","content","effect","enterable","offset","persistent","placement","pure","strategy","teleported","transition","appendTo","_renderSlot","key","innerHTML","_hoisted_1"],"sources":["../../../../../../packages/components/tooltip/src/tooltip.vue"],"sourcesContent":["<template>\n  <el-popper ref=\"popperRef\" :role=\"role\">\n    <el-tooltip-trigger\n      :disabled=\"disabled\"\n      :trigger=\"trigger\"\n      :trigger-keys=\"triggerKeys\"\n      :virtual-ref=\"virtualRef\"\n      :virtual-triggering=\"virtualTriggering\"\n    >\n      <slot v-if=\"$slots.default\" />\n    </el-tooltip-trigger>\n    <el-tooltip-content\n      ref=\"contentRef\"\n      :aria-label=\"ariaLabel\"\n      :boundaries-padding=\"boundariesPadding\"\n      :content=\"content\"\n      :disabled=\"disabled\"\n      :effect=\"effect\"\n      :enterable=\"enterable\"\n      :fallback-placements=\"fallbackPlacements\"\n      :hide-after=\"hideAfter\"\n      :gpu-acceleration=\"gpuAcceleration\"\n      :offset=\"offset\"\n      :persistent=\"persistent\"\n      :popper-class=\"popperClass\"\n      :popper-style=\"popperStyle\"\n      :placement=\"placement\"\n      :popper-options=\"popperOptions\"\n      :pure=\"pure\"\n      :raw-content=\"rawContent\"\n      :reference-el=\"referenceEl\"\n      :trigger-target-el=\"triggerTargetEl\"\n      :show-after=\"compatShowAfter\"\n      :strategy=\"strategy\"\n      :teleported=\"teleported\"\n      :transition=\"transition\"\n      :virtual-triggering=\"virtualTriggering\"\n      :z-index=\"zIndex\"\n      :append-to=\"appendTo\"\n    >\n      <slot name=\"content\">\n        <span v-if=\"rawContent\" v-html=\"content\" />\n        <span v-else>{{ content }}</span>\n      </slot>\n      <el-popper-arrow v-if=\"compatShowArrow\" :arrow-offset=\"arrowOffset\" />\n    </el-tooltip-content>\n  </el-popper>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  onDeactivated,\n  provide,\n  readonly,\n  ref,\n  toRef,\n  unref,\n  watch,\n} from 'vue'\nimport {\n  ElPopper,\n  ElPopperArrow,\n  usePopperArrowProps,\n  usePopperProps,\n} from '@element-plus/components/popper'\n\nimport { debugWarn, isBoolean, isUndefined } from '@element-plus/utils'\nimport {\n  createModelToggleComposable,\n  useDelayedToggle,\n  useId,\n  usePopperContainer,\n} from '@element-plus/hooks'\nimport ElTooltipContent from './content.vue'\nimport ElTooltipTrigger from './trigger.vue'\nimport {\n  useTooltipContentProps,\n  useTooltipProps,\n  useTooltipTriggerProps,\n} from './tooltip'\nimport { TOOLTIP_INJECTION_KEY } from './tokens'\n\nconst { useModelToggleProps, useModelToggle, useModelToggleEmits } =\n  createModelToggleComposable('visible' as const)\n\nexport default defineComponent({\n  name: 'ElTooltip',\n  components: {\n    ElPopper,\n    ElPopperArrow,\n    ElTooltipContent,\n    ElTooltipTrigger,\n  },\n  props: {\n    ...usePopperProps,\n    ...useModelToggleProps,\n    ...useTooltipContentProps,\n    ...useTooltipTriggerProps,\n    ...usePopperArrowProps,\n    ...useTooltipProps,\n  },\n  emits: [\n    ...useModelToggleEmits,\n    'before-show',\n    'before-hide',\n    'show',\n    'hide',\n    'open',\n    'close',\n  ],\n  setup(props, { emit }) {\n    usePopperContainer()\n    const compatShowAfter = computed(() => {\n      if (!isUndefined(props.openDelay)) {\n        debugWarn(\n          'ElTooltip',\n          'open-delay is about to be deprecated in the next major version, please use `show-after` instead'\n        )\n      }\n      return props.openDelay || (props.showAfter as number)\n    })\n    const compatShowArrow = computed(() => {\n      if (!isUndefined(props.visibleArrow)) {\n        debugWarn(\n          'ElTooltip',\n          '`visible-arrow` is about to be deprecated in the next major version, please use `show-arrow` instead'\n        )\n      }\n      return isBoolean(props.visibleArrow)\n        ? props.visibleArrow\n        : props.showArrow\n    })\n\n    const id = useId()\n    const popperRef = ref<InstanceType<typeof ElPopper> | null>(null)\n    const contentRef = ref<InstanceType<typeof ElTooltipContent> | null>(null)\n\n    const updatePopper = () => {\n      const popperComponent = unref(popperRef)\n      if (popperComponent) {\n        popperComponent.popperInstanceRef?.update()\n      }\n    }\n    const open = ref(false)\n    const toggleReason = ref<Event | undefined>(undefined)\n\n    const { show, hide, hasUpdateHandler } = useModelToggle({\n      indicator: open,\n      toggleReason,\n    })\n\n    const { onOpen, onClose } = useDelayedToggle({\n      showAfter: compatShowAfter,\n      hideAfter: toRef(props, 'hideAfter'),\n      open: show,\n      close: hide,\n    })\n\n    const controlled = computed(\n      () => isBoolean(props.visible) && !hasUpdateHandler.value\n    )\n\n    provide(TOOLTIP_INJECTION_KEY, {\n      controlled,\n      id,\n      open: readonly(open),\n      trigger: toRef(props, 'trigger'),\n      onOpen: (event?: Event) => {\n        onOpen(event)\n      },\n      onClose: (event?: Event) => {\n        onClose(event)\n      },\n      onToggle: (event?: Event) => {\n        if (unref(open)) {\n          onClose(event)\n        } else {\n          onOpen(event)\n        }\n      },\n      onShow: () => {\n        emit('show', toggleReason.value)\n      },\n      onHide: () => {\n        emit('hide', toggleReason.value)\n      },\n      onBeforeShow: () => {\n        emit('before-show', toggleReason.value)\n      },\n      onBeforeHide: () => {\n        emit('before-hide', toggleReason.value)\n      },\n      updatePopper,\n    })\n\n    watch(\n      () => props.disabled,\n      (disabled) => {\n        if (disabled && open.value) {\n          open.value = false\n        }\n      }\n    )\n\n    const isFocusInsideContent = () => {\n      const popperContent: HTMLElement | undefined =\n        contentRef.value?.contentRef?.popperContentRef\n      return popperContent && popperContent.contains(document.activeElement)\n    }\n\n    onDeactivated(() => open.value && hide())\n\n    return {\n      compatShowAfter,\n      compatShowArrow,\n      popperRef,\n      contentRef,\n      open,\n      hide,\n      isFocusInsideContent,\n      updatePopper,\n      onOpen,\n      onClose,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}