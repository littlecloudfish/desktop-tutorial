{"ast":null,"code":"import \"core-js/modules/web.timers.js\";\nvar RepeatClick = {\n  beforeMount: function beforeMount(el, binding) {\n    var interval = null;\n    var isHandlerCalled = false;\n\n    var handler = function handler() {\n      return binding.value && binding.value();\n    };\n\n    var clear = function clear() {\n      clearInterval(interval);\n      interval = null;\n\n      if (!isHandlerCalled) {\n        handler();\n      }\n\n      isHandlerCalled = false;\n    };\n\n    el.addEventListener(\"mousedown\", function (e) {\n      if (e.button !== 0) return;\n      document.addEventListener(\"mouseup\", clear, {\n        once: true\n      });\n      clearInterval(interval);\n      interval = setInterval(function () {\n        isHandlerCalled = true;\n        handler();\n      }, 100);\n    });\n  }\n};\nexport { RepeatClick as default };","map":{"version":3,"mappings":";AAAK,IAACA,WAAW,GAAG;EAClBC,WADkB,uBACNC,EADM,EACFC,OADE,EACO;IACvB,IAAIC,QAAQ,GAAG,IAAf;IACA,IAAIC,eAAe,GAAG,KAAtB;;IACA,IAAMC,OAAO,GAAG,SAAVA,OAAU;MAAA,OAAMH,OAAO,CAACI,KAAR,IAAiBJ,OAAO,CAACI,KAAR,EAAvB;IAAA,CAAhB;;IACA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;MAClBC,aAAa,CAACL,QAAD,CAAb;MACAA,QAAQ,GAAG,IAAX;;MACA,IAAI,CAACC,eAAL,EAAsB;QACpBC,OAAO;MACR;;MACDD,eAAe,GAAG,KAAlB;IACD,CAPD;;IAQAH,EAAE,CAACQ,gBAAH,CAAoB,WAApB,EAAiC,UAACC,CAAD,EAAO;MACtC,IAAIA,CAAC,CAACC,MAAF,KAAa,CAAjB,EACE;MACFC,QAAQ,CAACH,gBAAT,CAA0B,SAA1B,EAAqCF,KAArC,EAA4C;QAAEM,IAAI,EAAE;MAAR,CAA5C;MACAL,aAAa,CAACL,QAAD,CAAb;MACAA,QAAQ,GAAGW,WAAW,CAAC,YAAM;QAC3BV,eAAe,GAAG,IAAlB;QACAC,OAAO;MACR,CAHqB,EAGnB,GAHmB,CAAtB;IAID,CATD;EAUD;AAvBiB,CAAf","names":["RepeatClick","beforeMount","el","binding","interval","isHandlerCalled","handler","value","clear","clearInterval","addEventListener","e","button","document","once","setInterval"],"sources":["../../../../../packages/directives/repeat-click/index.ts"],"sourcesContent":["import type { DirectiveBinding, ObjectDirective } from 'vue'\n\nconst RepeatClick: ObjectDirective = {\n  beforeMount(el: HTMLElement, binding: DirectiveBinding) {\n    let interval: ReturnType<typeof setInterval> | null = null\n    let isHandlerCalled = false\n\n    const handler = () => binding.value && binding.value()\n\n    const clear = () => {\n      clearInterval(interval!)\n      interval = null\n\n      if (!isHandlerCalled) {\n        handler()\n      }\n      isHandlerCalled = false\n    }\n\n    el.addEventListener('mousedown', (e: MouseEvent) => {\n      if (e.button !== 0) return\n\n      document.addEventListener('mouseup', clear, { once: true })\n\n      clearInterval(interval!)\n      interval = setInterval(() => {\n        isHandlerCalled = true\n        handler()\n      }, 100)\n    })\n  },\n}\n\nexport default RepeatClick\n"]},"metadata":{},"sourceType":"module"}