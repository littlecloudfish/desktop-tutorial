{"ast":null,"code":"import _defineProperty from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createForOfIteratorHelper from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectSpread from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.number.parse-int.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.parse-float.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport { defineComponent, computed, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, normalizeStyle, renderSlot, toDisplayString, createCommentVNode, createBlock, withCtx, resolveDynamicComponent } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { WarningFilled, CircleCheck, CircleClose, Check, Close } from '@element-plus/icons-vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { progressProps } from './progress.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isString, isFunction } from '@vue/shared';\nvar _hoisted_1 = [\"aria-valuenow\"];\nvar _hoisted_2 = {\n  viewBox: \"0 0 100 100\"\n};\nvar _hoisted_3 = [\"d\", \"stroke\", \"stroke-width\"];\nvar _hoisted_4 = [\"d\", \"stroke\", \"opacity\", \"stroke-linecap\", \"stroke-width\"];\nvar _hoisted_5 = {\n  key: 0\n};\nvar __default__ = {\n  name: \"ElProgress\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: progressProps,\n  setup: function setup(__props) {\n    var props = __props;\n    var STATUS_COLOR_MAP = {\n      success: \"#13ce66\",\n      exception: \"#ff4949\",\n      warning: \"#e6a23c\",\n      \"default\": \"#20a0ff\"\n    };\n    var ns = useNamespace(\"progress\");\n    var barStyle = computed(function () {\n      return {\n        width: \"\".concat(props.percentage, \"%\"),\n        animationDuration: \"\".concat(props.duration, \"s\"),\n        backgroundColor: getCurrentColor(props.percentage)\n      };\n    });\n    var relativeStrokeWidth = computed(function () {\n      return (props.strokeWidth / props.width * 100).toFixed(1);\n    });\n    var radius = computed(function () {\n      if ([\"circle\", \"dashboard\"].includes(props.type)) {\n        return Number.parseInt(\"\".concat(50 - Number.parseFloat(relativeStrokeWidth.value) / 2), 10);\n      }\n\n      return 0;\n    });\n    var trackPath = computed(function () {\n      var r = radius.value;\n      var isDashboard = props.type === \"dashboard\";\n      return \"\\n          M 50 50\\n          m 0 \".concat(isDashboard ? \"\" : \"-\").concat(r, \"\\n          a \").concat(r, \" \").concat(r, \" 0 1 1 0 \").concat(isDashboard ? \"-\" : \"\").concat(r * 2, \"\\n          a \").concat(r, \" \").concat(r, \" 0 1 1 0 \").concat(isDashboard ? \"\" : \"-\").concat(r * 2, \"\\n          \");\n    });\n    var perimeter = computed(function () {\n      return 2 * Math.PI * radius.value;\n    });\n    var rate = computed(function () {\n      return props.type === \"dashboard\" ? 0.75 : 1;\n    });\n    var strokeDashoffset = computed(function () {\n      var offset = -1 * perimeter.value * (1 - rate.value) / 2;\n      return \"\".concat(offset, \"px\");\n    });\n    var trailPathStyle = computed(function () {\n      return {\n        strokeDasharray: \"\".concat(perimeter.value * rate.value, \"px, \").concat(perimeter.value, \"px\"),\n        strokeDashoffset: strokeDashoffset.value\n      };\n    });\n    var circlePathStyle = computed(function () {\n      return {\n        strokeDasharray: \"\".concat(perimeter.value * rate.value * (props.percentage / 100), \"px, \").concat(perimeter.value, \"px\"),\n        strokeDashoffset: strokeDashoffset.value,\n        transition: \"stroke-dasharray 0.6s ease 0s, stroke 0.6s ease, opacity ease 0.6s\"\n      };\n    });\n    var stroke = computed(function () {\n      var ret;\n\n      if (props.color) {\n        ret = getCurrentColor(props.percentage);\n      } else {\n        ret = STATUS_COLOR_MAP[props.status] || STATUS_COLOR_MAP[\"default\"];\n      }\n\n      return ret;\n    });\n    var statusIcon = computed(function () {\n      if (props.status === \"warning\") {\n        return WarningFilled;\n      }\n\n      if (props.type === \"line\") {\n        return props.status === \"success\" ? CircleCheck : CircleClose;\n      } else {\n        return props.status === \"success\" ? Check : Close;\n      }\n    });\n    var progressTextSize = computed(function () {\n      return props.type === \"line\" ? 12 + props.strokeWidth * 0.4 : props.width * 0.111111 + 2;\n    });\n    var content = computed(function () {\n      return props.format(props.percentage);\n    });\n\n    function getColors(color) {\n      var span = 100 / color.length;\n      var seriesColors = color.map(function (seriesColor, index) {\n        if (isString(seriesColor)) {\n          return {\n            color: seriesColor,\n            percentage: (index + 1) * span\n          };\n        }\n\n        return seriesColor;\n      });\n      return seriesColors.sort(function (a, b) {\n        return a.percentage - b.percentage;\n      });\n    }\n\n    var getCurrentColor = function getCurrentColor(percentage) {\n      var _a;\n\n      var color = props.color;\n\n      if (isFunction(color)) {\n        return color(percentage);\n      } else if (isString(color)) {\n        return color;\n      } else {\n        var colors = getColors(color);\n\n        var _iterator = _createForOfIteratorHelper(colors),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var color2 = _step.value;\n            if (color2.percentage > percentage) return color2.color;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        return (_a = colors[colors.length - 1]) == null ? void 0 : _a.color;\n      }\n    };\n\n    return function (_ctx, _cache) {\n      var _ref;\n\n      return openBlock(), createElementBlock(\"div\", {\n        \"class\": normalizeClass([unref(ns).b(), unref(ns).m(_ctx.type), unref(ns).is(_ctx.status), (_ref = {}, _defineProperty(_ref, unref(ns).m(\"without-text\"), !_ctx.showText), _defineProperty(_ref, unref(ns).m(\"text-inside\"), _ctx.textInside), _ref)]),\n        role: \"progressbar\",\n        \"aria-valuenow\": _ctx.percentage,\n        \"aria-valuemin\": \"0\",\n        \"aria-valuemax\": \"100\"\n      }, [_ctx.type === \"line\" ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        \"class\": normalizeClass(unref(ns).b(\"bar\"))\n      }, [createElementVNode(\"div\", {\n        \"class\": normalizeClass(unref(ns).be(\"bar\", \"outer\")),\n        style: normalizeStyle({\n          height: \"\".concat(_ctx.strokeWidth, \"px\")\n        })\n      }, [createElementVNode(\"div\", {\n        \"class\": normalizeClass([unref(ns).be(\"bar\", \"inner\"), _defineProperty({}, unref(ns).bem(\"bar\", \"inner\", \"indeterminate\"), _ctx.indeterminate)]),\n        style: normalizeStyle(unref(barStyle))\n      }, [(_ctx.showText || _ctx.$slots[\"default\"]) && _ctx.textInside ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        \"class\": normalizeClass(unref(ns).be(\"bar\", \"innerText\"))\n      }, [renderSlot(_ctx.$slots, \"default\", {\n        percentage: _ctx.percentage\n      }, function () {\n        return [createElementVNode(\"span\", null, toDisplayString(unref(content)), 1)];\n      })], 2)) : createCommentVNode(\"v-if\", true)], 6)], 6)], 2)) : (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        \"class\": normalizeClass(unref(ns).b(\"circle\")),\n        style: normalizeStyle({\n          height: \"\".concat(_ctx.width, \"px\"),\n          width: \"\".concat(_ctx.width, \"px\")\n        })\n      }, [(openBlock(), createElementBlock(\"svg\", _hoisted_2, [createElementVNode(\"path\", {\n        \"class\": normalizeClass(unref(ns).be(\"circle\", \"track\")),\n        d: unref(trackPath),\n        stroke: \"var(\".concat(unref(ns).cssVarName(\"fill-color-light\"), \", #e5e9f2)\"),\n        \"stroke-width\": unref(relativeStrokeWidth),\n        fill: \"none\",\n        style: normalizeStyle(unref(trailPathStyle))\n      }, null, 14, _hoisted_3), createElementVNode(\"path\", {\n        \"class\": normalizeClass(unref(ns).be(\"circle\", \"path\")),\n        d: unref(trackPath),\n        stroke: unref(stroke),\n        fill: \"none\",\n        opacity: _ctx.percentage ? 1 : 0,\n        \"stroke-linecap\": _ctx.strokeLinecap,\n        \"stroke-width\": unref(relativeStrokeWidth),\n        style: normalizeStyle(unref(circlePathStyle))\n      }, null, 14, _hoisted_4)]))], 6)), (_ctx.showText || _ctx.$slots[\"default\"]) && !_ctx.textInside ? (openBlock(), createElementBlock(\"div\", {\n        key: 2,\n        \"class\": normalizeClass(unref(ns).e(\"text\")),\n        style: normalizeStyle({\n          fontSize: \"\".concat(unref(progressTextSize), \"px\")\n        })\n      }, [renderSlot(_ctx.$slots, \"default\", {\n        percentage: _ctx.percentage\n      }, function () {\n        return [!_ctx.status ? (openBlock(), createElementBlock(\"span\", _hoisted_5, toDisplayString(unref(content)), 1)) : (openBlock(), createBlock(unref(ElIcon), {\n          key: 1\n        }, {\n          \"default\": withCtx(function () {\n            return [(openBlock(), createBlock(resolveDynamicComponent(unref(statusIcon))))];\n          }),\n          _: 1\n        }))];\n      })], 6)) : createCommentVNode(\"v-if\", true)], 10, _hoisted_1);\n    };\n  }\n}));\n\nvar Progress = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/progress/src/progress.vue\"]]);\n\nexport { Progress as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAmGA;MACAA,kBADA;MAEAC,oBAFA;MAGAC,kBAHA;MAIA;IAJA;IASA;IAEA;MAAA;QACAC,uCADA;QAEAC,iDAFA;QAGAC;MAHA;IAAA;IAMA;MAAA,OACA,kDADA;IAAA;IAIA;MACA;QACA,iCACA,qDADA,GAEA,EAFA;MAIA;;MACA;IACA,CARA;IAUA;MACA;MACA;MACA,oDAEAC,sBAFA,SAEAC,CAFA,2BAGAA,CAHA,cAGAA,CAHA,sBAGAD,sBAHA,SAGAC,KAHA,2BAIAA,CAJA,cAIAA,CAJA,sBAIAD,sBAJA,SAIAC,KAJA;IAMA,CATA;IAWA;MAAA;IAAA;IAEA;MAAA;IAAA;IAEA;MACA;MACA;IACA,CAHA;IAKA;MAAA;QACAC,8FADA;QAEAC;MAFA;IAAA;IAKA;MAAA;QACAD,2BACAE,uDADA,iBAEAA,eAFA,OADA;QAIAD,wCAJA;QAKAE,UACA;MANA;IAAA;IASA;MACA;;MACA;QACAC;MACA,CAFA,MAEA;QACAA;MACA;;MACA;IACA,CARA;IAUA;MACA;QACA;MACA;;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA;IACA,CATA;IAWA;MACA,+BACA,4BADA,GAEAC,0BAFA;IAGA,CAJA;IAMA;MAAA;IAAA;;IAEA;MACA;MACA;QACA;UACA;YACAC,kBADA;YAEAC;UAFA;QAIA;;QACA;MACA,CARA;MASA;QAAA;MAAA;IACA;;IAEA;MACA;;MACA;;MACA;QACA;MACA,CAFA,MAEA;QACA;MACA,CAFA,MAEA;QACA;;QADA,2CAEAC,MAFA;QAAA;;QAAA;UAEA;YAAA;YAAA,oCACA;UACA;QAJA;UAAA;QAAA;UAAA;QAAA;;QAKA;MACA;KAbA","names":["success","exception","warning","width","animationDuration","backgroundColor","isDashboard","r","strokeDasharray","strokeDashoffset","perimeter","transition","ret","props","color","percentage","colors"],"sources":["../../../../../../packages/components/progress/src/progress.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      ns.b(),\n      ns.m(type),\n      ns.is(status),\n      {\n        [ns.m('without-text')]: !showText,\n        [ns.m('text-inside')]: textInside,\n      },\n    ]\"\n    role=\"progressbar\"\n    :aria-valuenow=\"percentage\"\n    aria-valuemin=\"0\"\n    aria-valuemax=\"100\"\n  >\n    <div v-if=\"type === 'line'\" :class=\"ns.b('bar')\">\n      <div\n        :class=\"ns.be('bar', 'outer')\"\n        :style=\"{ height: `${strokeWidth}px` }\"\n      >\n        <div\n          :class=\"[\n            ns.be('bar', 'inner'),\n            { [ns.bem('bar', 'inner', 'indeterminate')]: indeterminate },\n          ]\"\n          :style=\"barStyle\"\n        >\n          <div\n            v-if=\"(showText || $slots.default) && textInside\"\n            :class=\"ns.be('bar', 'innerText')\"\n          >\n            <slot :percentage=\"percentage\">\n              <span>{{ content }}</span>\n            </slot>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div\n      v-else\n      :class=\"ns.b('circle')\"\n      :style=\"{ height: `${width}px`, width: `${width}px` }\"\n    >\n      <svg viewBox=\"0 0 100 100\">\n        <path\n          :class=\"ns.be('circle', 'track')\"\n          :d=\"trackPath\"\n          :stroke=\"`var(${ns.cssVarName('fill-color-light')}, #e5e9f2)`\"\n          :stroke-width=\"relativeStrokeWidth\"\n          fill=\"none\"\n          :style=\"trailPathStyle\"\n        />\n        <path\n          :class=\"ns.be('circle', 'path')\"\n          :d=\"trackPath\"\n          :stroke=\"stroke\"\n          fill=\"none\"\n          :opacity=\"percentage ? 1 : 0\"\n          :stroke-linecap=\"strokeLinecap\"\n          :stroke-width=\"relativeStrokeWidth\"\n          :style=\"circlePathStyle\"\n        />\n      </svg>\n    </div>\n    <div\n      v-if=\"(showText || $slots.default) && !textInside\"\n      :class=\"ns.e('text')\"\n      :style=\"{ fontSize: `${progressTextSize}px` }\"\n    >\n      <slot :percentage=\"percentage\">\n        <span v-if=\"!status\">{{ content }}</span>\n        <el-icon v-else><component :is=\"statusIcon\" /></el-icon>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\n// @ts-nocheck\nimport { computed } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport {\n  Check,\n  CircleCheck,\n  CircleClose,\n  Close,\n  WarningFilled,\n} from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { isFunction, isString } from '@element-plus/utils'\nimport { progressProps } from './progress'\nimport type { CSSProperties } from 'vue'\nimport type { ProgressColor } from './progress'\n\ndefineOptions({\n  name: 'ElProgress',\n})\n\nconst STATUS_COLOR_MAP = {\n  success: '#13ce66',\n  exception: '#ff4949',\n  warning: '#e6a23c',\n  default: '#20a0ff',\n}\n\nconst props = defineProps(progressProps)\n\nconst ns = useNamespace('progress')\n\nconst barStyle = computed<CSSProperties>(() => ({\n  width: `${props.percentage}%`,\n  animationDuration: `${props.duration}s`,\n  backgroundColor: getCurrentColor(props.percentage),\n}))\n\nconst relativeStrokeWidth = computed(() =>\n  ((props.strokeWidth / props.width) * 100).toFixed(1)\n)\n\nconst radius = computed(() => {\n  if (['circle', 'dashboard'].includes(props.type)) {\n    return Number.parseInt(\n      `${50 - Number.parseFloat(relativeStrokeWidth.value) / 2}`,\n      10\n    )\n  }\n  return 0\n})\n\nconst trackPath = computed(() => {\n  const r = radius.value\n  const isDashboard = props.type === 'dashboard'\n  return `\n          M 50 50\n          m 0 ${isDashboard ? '' : '-'}${r}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? '-' : ''}${r * 2}\n          a ${r} ${r} 0 1 1 0 ${isDashboard ? '' : '-'}${r * 2}\n          `\n})\n\nconst perimeter = computed(() => 2 * Math.PI * radius.value)\n\nconst rate = computed(() => (props.type === 'dashboard' ? 0.75 : 1))\n\nconst strokeDashoffset = computed(() => {\n  const offset = (-1 * perimeter.value * (1 - rate.value)) / 2\n  return `${offset}px`\n})\n\nconst trailPathStyle = computed<CSSProperties>(() => ({\n  strokeDasharray: `${perimeter.value * rate.value}px, ${perimeter.value}px`,\n  strokeDashoffset: strokeDashoffset.value,\n}))\n\nconst circlePathStyle = computed<CSSProperties>(() => ({\n  strokeDasharray: `${\n    perimeter.value * rate.value * (props.percentage / 100)\n  }px, ${perimeter.value}px`,\n  strokeDashoffset: strokeDashoffset.value,\n  transition:\n    'stroke-dasharray 0.6s ease 0s, stroke 0.6s ease, opacity ease 0.6s',\n}))\n\nconst stroke = computed(() => {\n  let ret: string\n  if (props.color) {\n    ret = getCurrentColor(props.percentage)\n  } else {\n    ret = STATUS_COLOR_MAP[props.status] || STATUS_COLOR_MAP.default\n  }\n  return ret\n})\n\nconst statusIcon = computed(() => {\n  if (props.status === 'warning') {\n    return WarningFilled\n  }\n  if (props.type === 'line') {\n    return props.status === 'success' ? CircleCheck : CircleClose\n  } else {\n    return props.status === 'success' ? Check : Close\n  }\n})\n\nconst progressTextSize = computed(() => {\n  return props.type === 'line'\n    ? 12 + props.strokeWidth * 0.4\n    : props.width * 0.111111 + 2\n})\n\nconst content = computed(() => props.format(props.percentage))\n\nfunction getColors(color: ProgressColor[]) {\n  const span = 100 / color.length\n  const seriesColors = color.map((seriesColor, index) => {\n    if (isString(seriesColor)) {\n      return {\n        color: seriesColor,\n        percentage: (index + 1) * span,\n      }\n    }\n    return seriesColor\n  })\n  return seriesColors.sort((a, b) => a.percentage - b.percentage)\n}\n\nconst getCurrentColor = (percentage: number) => {\n  const { color } = props\n  if (isFunction(color)) {\n    return color(percentage)\n  } else if (isString(color)) {\n    return color\n  } else {\n    const colors = getColors(color)\n    for (const color of colors) {\n      if (color.percentage > percentage) return color.color\n    }\n    return colors[colors.length - 1]?.color\n  }\n}\n</script>\n"]},"metadata":{},"sourceType":"module"}