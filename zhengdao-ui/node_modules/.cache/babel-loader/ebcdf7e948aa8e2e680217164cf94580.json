{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { provide } from 'vue';\nvar FORWARD_REF_INJECTION_KEY = Symbol(\"elForwardRef\");\n\nvar useForwardRef = function useForwardRef(forwardRef) {\n  var setForwardRef = function setForwardRef(el) {\n    forwardRef.value = el;\n  };\n\n  provide(FORWARD_REF_INJECTION_KEY, {\n    setForwardRef: setForwardRef\n  });\n};\n\nvar useForwardRefDirective = function useForwardRefDirective(setForwardRef) {\n  return {\n    mounted: function mounted(el) {\n      setForwardRef(el);\n    },\n    updated: function updated(el) {\n      setForwardRef(el);\n    },\n    unmounted: function unmounted() {\n      setForwardRef(null);\n    }\n  };\n};\n\nexport { FORWARD_REF_INJECTION_KEY, useForwardRef, useForwardRefDirective };","map":{"version":3,"mappings":";;;;AACY,IAACA,yBAAyB,GAAGC,MAAM,CAAC,cAAD,CAAnC;;AACA,IAACC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,UAAD,EAAgB;EAC3C,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,EAAD,EAAQ;IAC5BF,UAAU,CAACG,KAAX,GAAmBD,EAAnB;EACD,CAFD;;EAGAE,OAAO,CAACP,yBAAD,EAA4B;IACjCI,aAAa,EAAbA;EADiC,CAA5B,CAAP;AAGF,CAPY;;AAQA,IAACI,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACJ,aAAD,EAAmB;EACvD,OAAO;IACLK,OADK,mBACGJ,EADH,EACO;MACVD,aAAa,CAACC,EAAD,CAAb;IACD,CAHI;IAILK,OAJK,mBAIGL,EAJH,EAIO;MACVD,aAAa,CAACC,EAAD,CAAb;IACD,CANI;IAOLM,SAPK,uBAOO;MACVP,aAAa,CAAC,IAAD,CAAb;IACD;EATI,CAAP;AAWF,CAZY","names":["FORWARD_REF_INJECTION_KEY","Symbol","useForwardRef","forwardRef","setForwardRef","el","value","provide","useForwardRefDirective","mounted","updated","unmounted"],"sources":["../../../../../packages/hooks/use-forward-ref/index.ts"],"sourcesContent":["import { provide } from 'vue'\n\nimport type { InjectionKey, ObjectDirective, Ref } from 'vue'\n\ntype ForwardRefSetter = <T>(el: T) => void\n\nexport type ForwardRefInjectionContext = {\n  setForwardRef: ForwardRefSetter\n}\n\nexport const FORWARD_REF_INJECTION_KEY: InjectionKey<ForwardRefInjectionContext> =\n  Symbol('elForwardRef')\n\nexport const useForwardRef = <T>(forwardRef: Ref<T | null>) => {\n  const setForwardRef = (el: T) => {\n    forwardRef.value = el\n  }\n\n  provide(FORWARD_REF_INJECTION_KEY, {\n    setForwardRef,\n  })\n}\n\nexport const useForwardRefDirective = (\n  setForwardRef: ForwardRefSetter\n): ObjectDirective => {\n  return {\n    mounted(el) {\n      setForwardRef(el)\n    },\n    updated(el) {\n      setForwardRef(el)\n    },\n    unmounted() {\n      setForwardRef(null)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}