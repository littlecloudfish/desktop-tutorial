{"ast":null,"code":"import _objectSpread from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, nextTick, computed, provide, toRefs, watch, openBlock, createBlock, resolveDynamicComponent, unref, normalizeClass, withCtx, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { useCheckboxGroupProps, checkboxGroupEmits, useCheckboxGroup, useCheckboxGroupId } from './checkbox.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nvar __default__ = {\n  name: \"ElCheckboxGroup\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: useCheckboxGroupProps,\n  emits: checkboxGroupEmits,\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n\n    var _useCheckboxGroup = useCheckboxGroup(),\n        elFormItem = _useCheckboxGroup.elFormItem;\n\n    var _useCheckboxGroupId = useCheckboxGroupId(props, {\n      elFormItem: elFormItem\n    }),\n        groupId = _useCheckboxGroupId.groupId,\n        isLabeledByFormItem = _useCheckboxGroupId.isLabeledByFormItem;\n\n    var checkboxGroupSize = useSize();\n    var ns = useNamespace(\"checkbox\");\n\n    var changeEvent = function changeEvent(value) {\n      emit(UPDATE_MODEL_EVENT, value);\n      nextTick(function () {\n        emit(\"change\", value);\n      });\n    };\n\n    var modelValue = computed({\n      get: function get() {\n        return props.modelValue;\n      },\n      set: function set(val) {\n        changeEvent(val);\n      }\n    });\n    provide(\"CheckboxGroup\", _objectSpread(_objectSpread({\n      name: \"ElCheckboxGroup\"\n    }, toRefs(props)), {}, {\n      modelValue: modelValue,\n      checkboxGroupSize: checkboxGroupSize,\n      changeEvent: changeEvent\n    }));\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      var _a;\n\n      if (props.validateEvent) {\n        (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\")[\"catch\"](function (err) {\n          return debugWarn(err);\n        });\n      }\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(resolveDynamicComponent(_ctx.tag), {\n        id: unref(groupId),\n        \"class\": normalizeClass(unref(ns).b(\"group\")),\n        role: \"group\",\n        \"aria-label\": !unref(isLabeledByFormItem) ? _ctx.label || \"checkbox-group\" : void 0,\n        \"aria-labelledby\": unref(isLabeledByFormItem) ? unref(elFormItem).labelId : void 0\n      }, {\n        \"default\": withCtx(function () {\n          return [renderSlot(_ctx.$slots, \"default\")];\n        }),\n        _: 3\n      }, 8, [\"id\", \"class\", \"aria-label\", \"aria-labelledby\"]);\n    };\n  }\n}));\n\nvar CheckboxGroup = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-group.vue\"]]);\n\nexport { CheckboxGroup as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;IAiCA;IAAA;;IACA;MACAA;IADA;IAAA;IAAA;;IAGA;IACA;;IAEA;MACAC;MACAC;QACAD;MACA,CAFA;IAGA,CALA;;IAOA;MACAE,GADA,iBACA;QACA;MACA,CAHA;MAIAC,GAJA,eAIAC,GAJA,EAIA;QACAC;MACA;IANA;IASAC;MACAC;IADA,GAEAC,aAFA;MAGAC,sBAHA;MAIAC,oCAJA;MAKAL;IALA;IASAM;MAAA;IAAA,GACA;MACA;;MACA;QACA;UAAA;QAAA;MAEA;KANA","names":["elFormItem","emit","nextTick","get","set","val","changeEvent","provide","name","toRefs","modelValue","checkboxGroupSize","watch"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-group.vue"],"sourcesContent":["<template>\n  <component\n    :is=\"tag\"\n    :id=\"groupId\"\n    :class=\"ns.b('group')\"\n    role=\"group\"\n    :aria-label=\"!isLabeledByFormItem ? label || 'checkbox-group' : undefined\"\n    :aria-labelledby=\"isLabeledByFormItem ? elFormItem.labelId : undefined\"\n  >\n    <slot />\n  </component>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, provide, toRefs, watch } from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { debugWarn } from '@element-plus/utils'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport {\n  checkboxGroupEmits,\n  useCheckboxGroup,\n  useCheckboxGroupId,\n  useCheckboxGroupProps,\n} from './checkbox'\nimport type { CheckboxValueType } from './checkbox'\n\ndefineOptions({\n  name: 'ElCheckboxGroup',\n})\n\nconst props = defineProps(useCheckboxGroupProps)\nconst emit = defineEmits(checkboxGroupEmits)\n\nconst { elFormItem } = useCheckboxGroup()\nconst { groupId, isLabeledByFormItem } = useCheckboxGroupId(props, {\n  elFormItem,\n})\nconst checkboxGroupSize = useSize()\nconst ns = useNamespace('checkbox')\n\nconst changeEvent = (value: CheckboxValueType[]) => {\n  emit(UPDATE_MODEL_EVENT, value)\n  nextTick(() => {\n    emit('change', value)\n  })\n}\n\nconst modelValue = computed({\n  get() {\n    return props.modelValue\n  },\n  set(val: CheckboxValueType[]) {\n    changeEvent(val)\n  },\n})\n\nprovide('CheckboxGroup', {\n  name: 'ElCheckboxGroup',\n  ...toRefs(props),\n  modelValue,\n  checkboxGroupSize,\n  changeEvent,\n})\n\nwatch(\n  () => props.modelValue,\n  () => {\n    if (props.validateEvent) {\n      elFormItem.validate?.('change').catch((err) => debugWarn(err))\n    }\n  }\n)\n</script>\n"]},"metadata":{},"sourceType":"module"}