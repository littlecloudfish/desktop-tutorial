{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport BaseMixin from './AvBase';\n/**\n * Component props Object\n */\n\nvar props = {\n  /**\n   * prop: 'bar-width'\n   * Width of the bar in pixels.\n   * Default: 5\n   */\n  barWidth: {\n    type: Number,\n    \"default\": 5\n  },\n\n  /**\n   * prop: 'bar-space'\n   * Space between bars.\n   * Default: 1\n   */\n  barSpace: {\n    type: Number,\n    \"default\": 1\n  },\n\n  /**\n   * prop: 'bar-color'\n   * Bar fill color. Can be string RGB color or canvas gradients array.\n   */\n  barColor: {\n    type: [String, Array],\n    \"default\": '#0A0AFF'\n  },\n\n  /**\n   * prop: 'caps-height'\n   * Create caps on bars with given height in pixels.\n   * If zero caps then skip creating bars.\n   * Default: 0\n   */\n  capsHeight: {\n    type: Number,\n    \"default\": 0\n  },\n\n  /**\n   * prop: 'caps-drop-speed'\n   * Caps drop down animation speed.\n   * Default: 0.9\n   */\n  capsDropSpeed: {\n    type: Number,\n    \"default\": 0.9\n  },\n\n  /**\n   * prop: 'caps-color'\n   * Caps rectangles RGB color.\n   */\n  capsColor: {\n    type: String,\n    \"default\": '#A0A0FF'\n  },\n\n  /**\n   * prop: 'brick-height'\n   * Draw bar as bricks with set height.\n   */\n  brickHeight: {\n    type: Number,\n    \"default\": 0\n  },\n\n  /**\n   * prop: 'brick-space'\n   * Space between bricks.\n   */\n  brickSpace: {\n    type: Number,\n    \"default\": 1\n  },\n\n  /**\n   * prop: 'symmetric'\n   * Draw bars symmetric to canvas vertical center\n   * Default: false\n   */\n  symmetric: {\n    type: Boolean,\n    \"default\": false\n  },\n\n  /**\n   * prop: 'fft-size'\n   * Represents the window size in samples that is used when performing\n   * a Fast Fourier Transform (FFT) to get frequency domain data.\n   * Must be power of 2 between 2^5 and 2^15\n   * Default: 1024\n   */\n  fftSize: {\n    type: Number,\n    \"default\": 1024\n  }\n};\n/**\n * Component AvBars\n */\n\nvar AvBars = {\n  name: 'av-bars',\n  mixins: [BaseMixin],\n  props: props,\n  data: function data() {\n    return {\n      animId: null,\n      audio: null,\n      analyser: null,\n      ctx: null,\n      audioCtx: null,\n      caps: Array.apply(null, Array(this.fftSize / 2)).map(function () {\n        return 0;\n      })\n    };\n  },\n  methods: {\n    /**\n     * Main loop. Draws visualization.\n     */\n    mainLoop: function mainLoop() {\n      var _this = this;\n\n      var frqBits = this.analyser.frequencyBinCount;\n      var data = new Uint8Array(frqBits);\n      var barWidth = this.barWidth >= this.canvWidth ? this.canvWidth : this.barWidth;\n      var step = Math.round((barWidth + this.barSpace) / frqBits * this.canvWidth);\n      var barFill = Array.isArray(this.barColor) ? this.fillGradient(this.barColor) : this.barColor;\n      var x = 0;\n      this.analyser.getByteFrequencyData(data);\n\n      this._fillCanvasBG();\n\n      data.forEach(function (_, index) {\n        if (index % step) return;\n        var bits = Math.round(data.slice(index, index + step).reduce(function (v, t) {\n          return t + v;\n        }, 0) / step);\n        var barHeight = bits / 255 * _this.canvHeight;\n\n        if (_this.capsHeight) {\n          _this._drawCap(index, barWidth, x, bits);\n        }\n\n        _this.ctx.fillStyle = barFill;\n\n        _this._drawBar(barWidth, barHeight, x);\n\n        x += barWidth + _this.barSpace;\n      });\n      this.animId = requestAnimationFrame(this.mainLoop);\n    },\n\n    /**\n     * Canvas background fill\n     * @private\n     */\n    _fillCanvasBG: function _fillCanvasBG() {\n      var w = this.canvWidth;\n      var h = this.canvHeight;\n      this.ctx.clearRect(0, 0, w, h);\n\n      if (this.canvFillColor) {\n        this.ctx.fillStyle = Array.isArray(this.canvFillColor) ? this.fillGradient(this.canvFillColor) : this.canvFillColor;\n        this.ctx.fillRect(0, 0, w, h);\n      }\n    },\n\n    /**\n     * Draw bar. Solid bar or brick bar.\n     * @private\n     */\n    _drawBar: function _drawBar(barWidth, barHeight, barX) {\n      if (this.brickHeight) {\n        this._drawBrickBar(barWidth, barHeight, barX);\n      } else {\n        this.ctx.fillRect(barX, this.canvHeight - barHeight - this._symAlign(barHeight), barWidth, barHeight);\n      }\n    },\n\n    /**\n     * Draw bricks bar.\n     * @private\n     */\n    _drawBrickBar: function _drawBrickBar(barWidth, barHeight, barX) {\n      for (var b = 0; b < barHeight; b += this.brickHeight + this.brickSpace) {\n        this.ctx.fillRect(barX, this.canvHeight - barHeight + b - this._symAlign(barHeight), barWidth, this.brickHeight);\n      }\n    },\n\n    /**\n     * Draw cap for each bar and animate caps falling down.\n     * @private\n     */\n    _drawCap: function _drawCap(index, barwidth, barX, barY) {\n      var cap = this.caps[index] <= barY ? barY : this.caps[index] - this.capsDropSpeed;\n      var y = cap / 255.0 * this.canvHeight;\n\n      var capY = this.canvHeight - y - this.capsHeight - this._symAlign(y);\n\n      this.ctx.fillStyle = this.capsColor;\n      this.ctx.fillRect(barX, capY, barwidth, this.capsHeight);\n\n      if (this.symmetric) {\n        this.ctx.fillRect(barX, this.canvHeight - capY - this.capsHeight, barwidth, this.capsHeight);\n      }\n\n      this.caps[index] = cap;\n    },\n\n    /**\n     * Shift for symmetric alignment\n     * @private\n     */\n    _symAlign: function _symAlign(barHeight) {\n      return this.symmetric ? (this.canvHeight - barHeight) / 2 : 0;\n    }\n  }\n};\nexport default AvBars;","map":{"version":3,"names":["BaseMixin","props","barWidth","type","Number","barSpace","barColor","String","Array","capsHeight","capsDropSpeed","capsColor","brickHeight","brickSpace","symmetric","Boolean","fftSize","AvBars","name","mixins","data","animId","audio","analyser","ctx","audioCtx","caps","apply","map","methods","mainLoop","frqBits","frequencyBinCount","Uint8Array","canvWidth","step","Math","round","barFill","isArray","fillGradient","x","getByteFrequencyData","_fillCanvasBG","forEach","_","index","bits","slice","reduce","v","t","barHeight","canvHeight","_drawCap","fillStyle","_drawBar","requestAnimationFrame","w","h","clearRect","canvFillColor","fillRect","barX","_drawBrickBar","_symAlign","b","barwidth","barY","cap","y","capY"],"sources":["/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/vue-audio-visual/src/components/AvBars.js"],"sourcesContent":["import BaseMixin from './AvBase'\n/**\n * Component props Object\n */\nconst props = {\n  /**\n   * prop: 'bar-width'\n   * Width of the bar in pixels.\n   * Default: 5\n   */\n  barWidth: {\n    type: Number,\n    default: 5\n  },\n  /**\n   * prop: 'bar-space'\n   * Space between bars.\n   * Default: 1\n   */\n  barSpace: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'bar-color'\n   * Bar fill color. Can be string RGB color or canvas gradients array.\n   */\n  barColor: {\n    type: [String, Array],\n    default: '#0A0AFF'\n  },\n  /**\n   * prop: 'caps-height'\n   * Create caps on bars with given height in pixels.\n   * If zero caps then skip creating bars.\n   * Default: 0\n   */\n  capsHeight: {\n    type: Number,\n    default: 0\n  },\n  /**\n   * prop: 'caps-drop-speed'\n   * Caps drop down animation speed.\n   * Default: 0.9\n   */\n  capsDropSpeed: {\n    type: Number,\n    default: 0.9\n  },\n  /**\n   * prop: 'caps-color'\n   * Caps rectangles RGB color.\n   */\n  capsColor: {\n    type: String,\n    default: '#A0A0FF'\n  },\n  /**\n   * prop: 'brick-height'\n   * Draw bar as bricks with set height.\n   */\n  brickHeight: {\n    type: Number,\n    default: 0\n  },\n  /**\n   * prop: 'brick-space'\n   * Space between bricks.\n   */\n  brickSpace: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'symmetric'\n   * Draw bars symmetric to canvas vertical center\n   * Default: false\n   */\n  symmetric: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * prop: 'fft-size'\n   * Represents the window size in samples that is used when performing\n   * a Fast Fourier Transform (FFT) to get frequency domain data.\n   * Must be power of 2 between 2^5 and 2^15\n   * Default: 1024\n   */\n  fftSize: {\n    type: Number,\n    default: 1024\n  }\n}\n\n/**\n * Component AvBars\n */\nconst AvBars = {\n  name: 'av-bars',\n  mixins: [ BaseMixin ],\n  props,\n  data () {\n    return {\n      animId: null,\n      audio: null,\n      analyser: null,\n      ctx: null,\n      audioCtx: null,\n      caps: Array.apply(null, Array(this.fftSize / 2)).map(() => 0)\n    }\n  },\n  methods: {\n    /**\n     * Main loop. Draws visualization.\n     */\n    mainLoop: function () {\n      const frqBits = this.analyser.frequencyBinCount\n      const data = new Uint8Array(frqBits)\n      const barWidth = this.barWidth >= this.canvWidth ? this.canvWidth : this.barWidth\n      const step = Math.round((barWidth + this.barSpace) / frqBits * this.canvWidth)\n      const barFill = Array.isArray(this.barColor)\n        ? this.fillGradient(this.barColor)\n        : this.barColor\n      let x = 0\n\n      this.analyser.getByteFrequencyData(data)\n      this._fillCanvasBG()\n\n      data.forEach((_, index) => {\n        if (index % step) return\n        const bits = Math.round(data.slice(index, index + step)\n          .reduce((v, t) => t + v, 0) / step)\n        const barHeight = bits / 255 * this.canvHeight\n        if (this.capsHeight) {\n          this._drawCap(index, barWidth, x, bits)\n        }\n        this.ctx.fillStyle = barFill\n        this._drawBar(barWidth, barHeight, x)\n        x += barWidth + this.barSpace\n      })\n      this.animId = requestAnimationFrame(this.mainLoop)\n    },\n    /**\n     * Canvas background fill\n     * @private\n     */\n    _fillCanvasBG: function () {\n      const w = this.canvWidth\n      const h = this.canvHeight\n      this.ctx.clearRect(0, 0, w, h)\n      if (this.canvFillColor) {\n        this.ctx.fillStyle = Array.isArray(this.canvFillColor)\n          ? this.fillGradient(this.canvFillColor)\n          : this.canvFillColor\n        this.ctx.fillRect(0, 0, w, h)\n      }\n    },\n    /**\n     * Draw bar. Solid bar or brick bar.\n     * @private\n     */\n    _drawBar: function (barWidth, barHeight, barX) {\n      if (this.brickHeight) {\n        this._drawBrickBar(barWidth, barHeight, barX)\n      } else {\n        this.ctx.fillRect(\n          barX, this.canvHeight - barHeight - this._symAlign(barHeight),\n          barWidth, barHeight\n        )\n      }\n    },\n    /**\n     * Draw bricks bar.\n     * @private\n     */\n    _drawBrickBar: function (barWidth, barHeight, barX) {\n      for (let b = 0; b < barHeight; b += this.brickHeight + this.brickSpace) {\n        this.ctx.fillRect(\n          barX, this.canvHeight - barHeight + b - this._symAlign(barHeight),\n          barWidth, this.brickHeight\n        )\n      }\n    },\n    /**\n     * Draw cap for each bar and animate caps falling down.\n     * @private\n     */\n    _drawCap: function (index, barwidth, barX, barY) {\n      const cap = this.caps[index] <= barY\n        ? barY\n        : this.caps[index] - this.capsDropSpeed\n      const y = (cap / 255.0 * this.canvHeight)\n      const capY = this.canvHeight - y - this.capsHeight - this._symAlign(y)\n      this.ctx.fillStyle = this.capsColor\n      this.ctx.fillRect(barX, capY, barwidth, this.capsHeight)\n      if (this.symmetric) {\n        this.ctx.fillRect(\n          barX, this.canvHeight - capY - this.capsHeight,\n          barwidth, this.capsHeight)\n      }\n      this.caps[index] = cap\n    },\n    /**\n     * Shift for symmetric alignment\n     * @private\n     */\n    _symAlign: function (barHeight) {\n      return this.symmetric ? ((this.canvHeight - barHeight) / 2) : 0\n    }\n  }\n}\n\nexport default AvBars\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,SAAP,MAAsB,UAAtB;AACA;AACA;AACA;;AACA,IAAMC,KAAK,GAAG;EACZ;AACF;AACA;AACA;AACA;EACEC,QAAQ,EAAE;IACRC,IAAI,EAAEC,MADE;IAER,WAAS;EAFD,CANE;;EAUZ;AACF;AACA;AACA;AACA;EACEC,QAAQ,EAAE;IACRF,IAAI,EAAEC,MADE;IAER,WAAS;EAFD,CAfE;;EAmBZ;AACF;AACA;AACA;EACEE,QAAQ,EAAE;IACRH,IAAI,EAAE,CAACI,MAAD,EAASC,KAAT,CADE;IAER,WAAS;EAFD,CAvBE;;EA2BZ;AACF;AACA;AACA;AACA;AACA;EACEC,UAAU,EAAE;IACVN,IAAI,EAAEC,MADI;IAEV,WAAS;EAFC,CAjCA;;EAqCZ;AACF;AACA;AACA;AACA;EACEM,aAAa,EAAE;IACbP,IAAI,EAAEC,MADO;IAEb,WAAS;EAFI,CA1CH;;EA8CZ;AACF;AACA;AACA;EACEO,SAAS,EAAE;IACTR,IAAI,EAAEI,MADG;IAET,WAAS;EAFA,CAlDC;;EAsDZ;AACF;AACA;AACA;EACEK,WAAW,EAAE;IACXT,IAAI,EAAEC,MADK;IAEX,WAAS;EAFE,CA1DD;;EA8DZ;AACF;AACA;AACA;EACES,UAAU,EAAE;IACVV,IAAI,EAAEC,MADI;IAEV,WAAS;EAFC,CAlEA;;EAsEZ;AACF;AACA;AACA;AACA;EACEU,SAAS,EAAE;IACTX,IAAI,EAAEY,OADG;IAET,WAAS;EAFA,CA3EC;;EA+EZ;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,OAAO,EAAE;IACPb,IAAI,EAAEC,MADC;IAEP,WAAS;EAFF;AAtFG,CAAd;AA4FA;AACA;AACA;;AACA,IAAMa,MAAM,GAAG;EACbC,IAAI,EAAE,SADO;EAEbC,MAAM,EAAE,CAAEnB,SAAF,CAFK;EAGbC,KAAK,EAALA,KAHa;EAIbmB,IAJa,kBAIL;IACN,OAAO;MACLC,MAAM,EAAE,IADH;MAELC,KAAK,EAAE,IAFF;MAGLC,QAAQ,EAAE,IAHL;MAILC,GAAG,EAAE,IAJA;MAKLC,QAAQ,EAAE,IALL;MAMLC,IAAI,EAAElB,KAAK,CAACmB,KAAN,CAAY,IAAZ,EAAkBnB,KAAK,CAAC,KAAKQ,OAAL,GAAe,CAAhB,CAAvB,EAA2CY,GAA3C,CAA+C;QAAA,OAAM,CAAN;MAAA,CAA/C;IAND,CAAP;EAQD,CAbY;EAcbC,OAAO,EAAE;IACP;AACJ;AACA;IACIC,QAAQ,EAAE,oBAAY;MAAA;;MACpB,IAAMC,OAAO,GAAG,KAAKR,QAAL,CAAcS,iBAA9B;MACA,IAAMZ,IAAI,GAAG,IAAIa,UAAJ,CAAeF,OAAf,CAAb;MACA,IAAM7B,QAAQ,GAAG,KAAKA,QAAL,IAAiB,KAAKgC,SAAtB,GAAkC,KAAKA,SAAvC,GAAmD,KAAKhC,QAAzE;MACA,IAAMiC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACnC,QAAQ,GAAG,KAAKG,QAAjB,IAA6B0B,OAA7B,GAAuC,KAAKG,SAAvD,CAAb;MACA,IAAMI,OAAO,GAAG9B,KAAK,CAAC+B,OAAN,CAAc,KAAKjC,QAAnB,IACZ,KAAKkC,YAAL,CAAkB,KAAKlC,QAAvB,CADY,GAEZ,KAAKA,QAFT;MAGA,IAAImC,CAAC,GAAG,CAAR;MAEA,KAAKlB,QAAL,CAAcmB,oBAAd,CAAmCtB,IAAnC;;MACA,KAAKuB,aAAL;;MAEAvB,IAAI,CAACwB,OAAL,CAAa,UAACC,CAAD,EAAIC,KAAJ,EAAc;QACzB,IAAIA,KAAK,GAAGX,IAAZ,EAAkB;QAClB,IAAMY,IAAI,GAAGX,IAAI,CAACC,KAAL,CAAWjB,IAAI,CAAC4B,KAAL,CAAWF,KAAX,EAAkBA,KAAK,GAAGX,IAA1B,EACrBc,MADqB,CACd,UAACC,CAAD,EAAIC,CAAJ;UAAA,OAAUA,CAAC,GAAGD,CAAd;QAAA,CADc,EACG,CADH,IACQf,IADnB,CAAb;QAEA,IAAMiB,SAAS,GAAGL,IAAI,GAAG,GAAP,GAAa,KAAI,CAACM,UAApC;;QACA,IAAI,KAAI,CAAC5C,UAAT,EAAqB;UACnB,KAAI,CAAC6C,QAAL,CAAcR,KAAd,EAAqB5C,QAArB,EAA+BuC,CAA/B,EAAkCM,IAAlC;QACD;;QACD,KAAI,CAACvB,GAAL,CAAS+B,SAAT,GAAqBjB,OAArB;;QACA,KAAI,CAACkB,QAAL,CAActD,QAAd,EAAwBkD,SAAxB,EAAmCX,CAAnC;;QACAA,CAAC,IAAIvC,QAAQ,GAAG,KAAI,CAACG,QAArB;MACD,CAXD;MAYA,KAAKgB,MAAL,GAAcoC,qBAAqB,CAAC,KAAK3B,QAAN,CAAnC;IACD,CA9BM;;IA+BP;AACJ;AACA;AACA;IACIa,aAAa,EAAE,yBAAY;MACzB,IAAMe,CAAC,GAAG,KAAKxB,SAAf;MACA,IAAMyB,CAAC,GAAG,KAAKN,UAAf;MACA,KAAK7B,GAAL,CAASoC,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,EAAyBF,CAAzB,EAA4BC,CAA5B;;MACA,IAAI,KAAKE,aAAT,EAAwB;QACtB,KAAKrC,GAAL,CAAS+B,SAAT,GAAqB/C,KAAK,CAAC+B,OAAN,CAAc,KAAKsB,aAAnB,IACjB,KAAKrB,YAAL,CAAkB,KAAKqB,aAAvB,CADiB,GAEjB,KAAKA,aAFT;QAGA,KAAKrC,GAAL,CAASsC,QAAT,CAAkB,CAAlB,EAAqB,CAArB,EAAwBJ,CAAxB,EAA2BC,CAA3B;MACD;IACF,CA7CM;;IA8CP;AACJ;AACA;AACA;IACIH,QAAQ,EAAE,kBAAUtD,QAAV,EAAoBkD,SAApB,EAA+BW,IAA/B,EAAqC;MAC7C,IAAI,KAAKnD,WAAT,EAAsB;QACpB,KAAKoD,aAAL,CAAmB9D,QAAnB,EAA6BkD,SAA7B,EAAwCW,IAAxC;MACD,CAFD,MAEO;QACL,KAAKvC,GAAL,CAASsC,QAAT,CACEC,IADF,EACQ,KAAKV,UAAL,GAAkBD,SAAlB,GAA8B,KAAKa,SAAL,CAAeb,SAAf,CADtC,EAEElD,QAFF,EAEYkD,SAFZ;MAID;IACF,CA3DM;;IA4DP;AACJ;AACA;AACA;IACIY,aAAa,EAAE,uBAAU9D,QAAV,EAAoBkD,SAApB,EAA+BW,IAA/B,EAAqC;MAClD,KAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,SAApB,EAA+Bc,CAAC,IAAI,KAAKtD,WAAL,GAAmB,KAAKC,UAA5D,EAAwE;QACtE,KAAKW,GAAL,CAASsC,QAAT,CACEC,IADF,EACQ,KAAKV,UAAL,GAAkBD,SAAlB,GAA8Bc,CAA9B,GAAkC,KAAKD,SAAL,CAAeb,SAAf,CAD1C,EAEElD,QAFF,EAEY,KAAKU,WAFjB;MAID;IACF,CAvEM;;IAwEP;AACJ;AACA;AACA;IACI0C,QAAQ,EAAE,kBAAUR,KAAV,EAAiBqB,QAAjB,EAA2BJ,IAA3B,EAAiCK,IAAjC,EAAuC;MAC/C,IAAMC,GAAG,GAAG,KAAK3C,IAAL,CAAUoB,KAAV,KAAoBsB,IAApB,GACRA,IADQ,GAER,KAAK1C,IAAL,CAAUoB,KAAV,IAAmB,KAAKpC,aAF5B;MAGA,IAAM4D,CAAC,GAAID,GAAG,GAAG,KAAN,GAAc,KAAKhB,UAA9B;;MACA,IAAMkB,IAAI,GAAG,KAAKlB,UAAL,GAAkBiB,CAAlB,GAAsB,KAAK7D,UAA3B,GAAwC,KAAKwD,SAAL,CAAeK,CAAf,CAArD;;MACA,KAAK9C,GAAL,CAAS+B,SAAT,GAAqB,KAAK5C,SAA1B;MACA,KAAKa,GAAL,CAASsC,QAAT,CAAkBC,IAAlB,EAAwBQ,IAAxB,EAA8BJ,QAA9B,EAAwC,KAAK1D,UAA7C;;MACA,IAAI,KAAKK,SAAT,EAAoB;QAClB,KAAKU,GAAL,CAASsC,QAAT,CACEC,IADF,EACQ,KAAKV,UAAL,GAAkBkB,IAAlB,GAAyB,KAAK9D,UADtC,EAEE0D,QAFF,EAEY,KAAK1D,UAFjB;MAGD;;MACD,KAAKiB,IAAL,CAAUoB,KAAV,IAAmBuB,GAAnB;IACD,CA1FM;;IA2FP;AACJ;AACA;AACA;IACIJ,SAAS,EAAE,mBAAUb,SAAV,EAAqB;MAC9B,OAAO,KAAKtC,SAAL,GAAkB,CAAC,KAAKuC,UAAL,GAAkBD,SAAnB,IAAgC,CAAlD,GAAuD,CAA9D;IACD;EAjGM;AAdI,CAAf;AAmHA,eAAenC,MAAf"},"metadata":{},"sourceType":"module"}