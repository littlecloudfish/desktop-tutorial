{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _objectWithoutProperties from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"appendTo\"];\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { isVNode, render, createVNode } from 'vue';\nimport { isClient, isNumber } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { messageConfig } from '../../config-provider/src/config-provider.mjs';\nimport MessageConstructor from './message2.mjs';\nimport { messageDefaults, messageTypes } from './message.mjs';\nimport { instances } from './instance.mjs';\nimport { isString, isFunction } from '@vue/shared';\nimport { isElement } from '../../../utils/types.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nvar seed = 1;\n\nvar normalizeOptions = function normalizeOptions(params) {\n  var options = !params || isString(params) || isVNode(params) || isFunction(params) ? {\n    message: params\n  } : params;\n\n  var normalized = _objectSpread(_objectSpread({}, messageDefaults), options);\n\n  if (!normalized.appendTo) {\n    normalized.appendTo = document.body;\n  } else if (isString(normalized.appendTo)) {\n    var appendTo = document.querySelector(normalized.appendTo);\n\n    if (!isElement(appendTo)) {\n      debugWarn(\"ElMessage\", \"the appendTo option is not an HTMLElement. Falling back to document.body.\");\n      appendTo = document.body;\n    }\n\n    normalized.appendTo = appendTo;\n  }\n\n  return normalized;\n};\n\nvar closeMessage = function closeMessage(instance) {\n  var idx = instances.indexOf(instance);\n  if (idx === -1) return;\n  instances.splice(idx, 1);\n  var handler = instance.handler;\n  handler.close();\n};\n\nvar createMessage = function createMessage(_ref, context) {\n  var appendTo = _ref.appendTo,\n      options = _objectWithoutProperties(_ref, _excluded);\n\n  var _useZIndex = useZIndex(),\n      nextZIndex = _useZIndex.nextZIndex;\n\n  var id = \"message_\".concat(seed++);\n  var userOnClose = options.onClose;\n  var container = document.createElement(\"div\");\n\n  var props = _objectSpread(_objectSpread({}, options), {}, {\n    zIndex: nextZIndex() + options.zIndex,\n    id: id,\n    onClose: function onClose() {\n      userOnClose == null ? void 0 : userOnClose();\n      closeMessage(instance);\n    },\n    onDestroy: function onDestroy() {\n      render(null, container);\n    }\n  });\n\n  var vnode = createVNode(MessageConstructor, props, isFunction(props.message) || isVNode(props.message) ? {\n    \"default\": props.message\n  } : null);\n  vnode.appContext = context || message._context;\n  render(vnode, container);\n  appendTo.appendChild(container.firstElementChild);\n  var vm = vnode.component;\n  var handler = {\n    close: function close() {\n      vm.exposeProxy.visible = false;\n    }\n  };\n  var instance = {\n    id: id,\n    vnode: vnode,\n    vm: vm,\n    handler: handler,\n    props: vnode.component.props\n  };\n  return instance;\n};\n\nvar message = function message() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var context = arguments.length > 1 ? arguments[1] : undefined;\n  if (!isClient) return {\n    close: function close() {\n      return void 0;\n    }\n  };\n\n  if (isNumber(messageConfig.max) && instances.length >= messageConfig.max) {\n    return {\n      close: function close() {\n        return void 0;\n      }\n    };\n  }\n\n  var normalized = normalizeOptions(options);\n\n  if (normalized.grouping && instances.length) {\n    var instance2 = instances.find(function (_ref2) {\n      var vm = _ref2.vnode;\n\n      var _a;\n\n      return ((_a = vm.props) == null ? void 0 : _a.message) === normalized.message;\n    });\n\n    if (instance2) {\n      instance2.props.repeatNum += 1;\n      instance2.props.type = normalized.type;\n      return instance2.handler;\n    }\n  }\n\n  var instance = createMessage(normalized, context);\n  instances.push(instance);\n  return instance.handler;\n};\n\nmessageTypes.forEach(function (type) {\n  message[type] = function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var appContext = arguments.length > 1 ? arguments[1] : undefined;\n    var normalized = normalizeOptions(options);\n    return message(_objectSpread(_objectSpread({}, normalized), {}, {\n      type: type\n    }), appContext);\n  };\n});\n\nfunction closeAll(type) {\n  var _iterator = _createForOfIteratorHelper(instances),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var instance = _step.value;\n\n      if (!type || type === instance.props.type) {\n        instance.handler.close();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n}\n\nmessage.closeAll = closeAll;\nmessage._context = null;\nexport { closeAll, message as default };","map":{"version":3,"mappings":"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","names":["seed","normalizeOptions","params","options","isString","isVNode","isFunction","message","normalized","messageDefaults","appendTo","document","body","querySelector","isElement","debugWarn","closeMessage","instance","idx","instances","indexOf","splice","handler","close","createMessage","context","useZIndex","nextZIndex","id","userOnClose","onClose","container","createElement","props","zIndex","onDestroy","render","vnode","createVNode","MessageConstructor","appContext","_context","appendChild","firstElementChild","vm","component","exposeProxy","visible","isClient","isNumber","messageConfig","max","length","grouping","instance2","find","_a","repeatNum","type","push","messageTypes","forEach","closeAll"],"sources":["../../../../../../packages/components/message/src/method.ts"],"sourcesContent":["import { createVNode, render } from 'vue'\nimport { isClient } from '@vueuse/core'\nimport {\n  debugWarn,\n  isElement,\n  isFunction,\n  isNumber,\n  isString,\n  isVNode,\n} from '@element-plus/utils'\nimport { useZIndex } from '@element-plus/hooks'\nimport { messageConfig } from '@element-plus/components/config-provider/src/config-provider'\nimport MessageConstructor from './message.vue'\nimport { messageDefaults, messageTypes } from './message'\nimport { instances } from './instance'\n\nimport type { MessageContext } from './instance'\nimport type { AppContext } from 'vue'\nimport type {\n  Message,\n  MessageFn,\n  MessageHandler,\n  MessageOptions,\n  MessageParams,\n  MessageParamsNormalized,\n  messageType,\n} from './message'\n\nlet seed = 1\n\n// TODO: Since Notify.ts is basically the same like this file. So we could do some encapsulation against them to reduce code duplication.\n\nconst normalizeOptions = (params?: MessageParams) => {\n  const options: MessageOptions =\n    !params || isString(params) || isVNode(params) || isFunction(params)\n      ? { message: params }\n      : params\n\n  const normalized = {\n    ...messageDefaults,\n    ...options,\n  }\n\n  if (!normalized.appendTo) {\n    normalized.appendTo = document.body\n  } else if (isString(normalized.appendTo)) {\n    let appendTo = document.querySelector<HTMLElement>(normalized.appendTo)\n\n    // should fallback to default value with a warning\n    if (!isElement(appendTo)) {\n      debugWarn(\n        'ElMessage',\n        'the appendTo option is not an HTMLElement. Falling back to document.body.'\n      )\n      appendTo = document.body\n    }\n\n    normalized.appendTo = appendTo\n  }\n\n  return normalized as MessageParamsNormalized\n}\n\nconst closeMessage = (instance: MessageContext) => {\n  const idx = instances.indexOf(instance)\n  if (idx === -1) return\n\n  instances.splice(idx, 1)\n  const { handler } = instance\n  handler.close()\n}\n\nconst createMessage = (\n  { appendTo, ...options }: MessageParamsNormalized,\n  context?: AppContext | null\n): MessageContext => {\n  const { nextZIndex } = useZIndex()\n\n  const id = `message_${seed++}`\n  const userOnClose = options.onClose\n\n  const container = document.createElement('div')\n\n  const props = {\n    ...options,\n    zIndex: nextZIndex() + options.zIndex,\n    id,\n    onClose: () => {\n      userOnClose?.()\n      closeMessage(instance)\n    },\n\n    // clean message element preventing mem leak\n    onDestroy: () => {\n      // since the element is destroy, then the VNode should be collected by GC as well\n      // we do not want cause any mem leak because we have returned vm as a reference to users\n      // so that we manually set it to false.\n      render(null, container)\n    },\n  }\n  const vnode = createVNode(\n    MessageConstructor,\n    props,\n    isFunction(props.message) || isVNode(props.message)\n      ? { default: props.message }\n      : null\n  )\n  vnode.appContext = context || message._context\n\n  render(vnode, container)\n  // instances will remove this item when close function gets called. So we do not need to worry about it.\n  appendTo.appendChild(container.firstElementChild!)\n\n  const vm = vnode.component!\n\n  const handler: MessageHandler = {\n    // instead of calling the onClose function directly, setting this value so that we can have the full lifecycle\n    // for out component, so that all closing steps will not be skipped.\n    close: () => {\n      vm.exposeProxy!.visible = false\n    },\n  }\n\n  const instance: MessageContext = {\n    id,\n    vnode,\n    vm,\n    handler,\n    props: (vnode.component as any).props,\n  }\n\n  return instance\n}\n\nconst message: MessageFn &\n  Partial<Message> & { _context: AppContext | null } = (\n  options = {},\n  context\n) => {\n  if (!isClient) return { close: () => undefined }\n\n  if (isNumber(messageConfig.max) && instances.length >= messageConfig.max) {\n    return { close: () => undefined }\n  }\n\n  const normalized = normalizeOptions(options)\n\n  if (normalized.grouping && instances.length) {\n    const instance = instances.find(\n      ({ vnode: vm }) => vm.props?.message === normalized.message\n    )\n    if (instance) {\n      instance.props.repeatNum += 1\n      instance.props.type = normalized.type\n      return instance.handler\n    }\n  }\n\n  const instance = createMessage(normalized, context)\n\n  instances.push(instance)\n  return instance.handler\n}\n\nmessageTypes.forEach((type) => {\n  message[type] = (options = {}, appContext) => {\n    const normalized = normalizeOptions(options)\n    return message({ ...normalized, type }, appContext)\n  }\n})\n\nexport function closeAll(type?: messageType): void {\n  for (const instance of instances) {\n    if (!type || type === instance.props.type) {\n      instance.handler.close()\n    }\n  }\n}\n\nmessage.closeAll = closeAll\nmessage._context = null\n\nexport default message as Message\n"]},"metadata":{},"sourceType":"module"}