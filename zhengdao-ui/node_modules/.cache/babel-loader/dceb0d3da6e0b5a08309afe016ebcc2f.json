{"ast":null,"code":"import _objectSpread from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { getCurrentInstance, computed, watch, onMounted } from 'vue';\nimport { isFunction } from '@vue/shared';\nimport { isClient, isBoolean } from '@vueuse/core';\nimport '../../utils/index.mjs';\nimport { buildProp, definePropType } from '../../utils/vue/props/runtime.mjs';\n\nvar _prop = buildProp({\n  type: definePropType(Boolean),\n  \"default\": null\n});\n\nvar _event = buildProp({\n  type: definePropType(Function)\n});\n\nvar createModelToggleComposable = function createModelToggleComposable(name) {\n  var _useModelToggleProps;\n\n  var updateEventKey = \"update:\".concat(name);\n  var updateEventKeyRaw = \"onUpdate:\".concat(name);\n  var useModelToggleEmits2 = [updateEventKey];\n  var useModelToggleProps2 = (_useModelToggleProps = {}, _defineProperty(_useModelToggleProps, name, _prop), _defineProperty(_useModelToggleProps, updateEventKeyRaw, _event), _useModelToggleProps);\n\n  var useModelToggle2 = function useModelToggle2(_ref) {\n    var indicator = _ref.indicator,\n        toggleReason = _ref.toggleReason,\n        shouldHideWhenRouteChanges = _ref.shouldHideWhenRouteChanges,\n        shouldProceed = _ref.shouldProceed,\n        onShow = _ref.onShow,\n        onHide = _ref.onHide;\n    var instance = getCurrentInstance();\n    var emit = instance.emit;\n    var props = instance.props;\n    var hasUpdateHandler = computed(function () {\n      return isFunction(props[updateEventKeyRaw]);\n    });\n    var isModelBindingAbsent = computed(function () {\n      return props[name] === null;\n    });\n\n    var doShow = function doShow(event) {\n      if (indicator.value === true) {\n        return;\n      }\n\n      indicator.value = true;\n\n      if (toggleReason) {\n        toggleReason.value = event;\n      }\n\n      if (isFunction(onShow)) {\n        onShow(event);\n      }\n    };\n\n    var doHide = function doHide(event) {\n      if (indicator.value === false) {\n        return;\n      }\n\n      indicator.value = false;\n\n      if (toggleReason) {\n        toggleReason.value = event;\n      }\n\n      if (isFunction(onHide)) {\n        onHide(event);\n      }\n    };\n\n    var show = function show(event) {\n      if (props.disabled === true || isFunction(shouldProceed) && !shouldProceed()) return;\n      var shouldEmit = hasUpdateHandler.value && isClient;\n\n      if (shouldEmit) {\n        emit(updateEventKey, true);\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doShow(event);\n      }\n    };\n\n    var hide = function hide(event) {\n      if (props.disabled === true || !isClient) return;\n      var shouldEmit = hasUpdateHandler.value && isClient;\n\n      if (shouldEmit) {\n        emit(updateEventKey, false);\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doHide(event);\n      }\n    };\n\n    var onChange = function onChange(val) {\n      if (!isBoolean(val)) return;\n\n      if (props.disabled && val) {\n        if (hasUpdateHandler.value) {\n          emit(updateEventKey, false);\n        }\n      } else if (indicator.value !== val) {\n        if (val) {\n          doShow();\n        } else {\n          doHide();\n        }\n      }\n    };\n\n    var toggle = function toggle() {\n      if (indicator.value) {\n        hide();\n      } else {\n        show();\n      }\n    };\n\n    watch(function () {\n      return props[name];\n    }, onChange);\n\n    if (shouldHideWhenRouteChanges && instance.appContext.config.globalProperties.$route !== void 0) {\n      watch(function () {\n        return _objectSpread({}, instance.proxy.$route);\n      }, function () {\n        if (shouldHideWhenRouteChanges.value && indicator.value) {\n          hide();\n        }\n      });\n    }\n\n    onMounted(function () {\n      onChange(props[name]);\n    });\n    return {\n      hide: hide,\n      show: show,\n      toggle: toggle,\n      hasUpdateHandler: hasUpdateHandler\n    };\n  };\n\n  return {\n    useModelToggle: useModelToggle2,\n    useModelToggleProps: useModelToggleProps2,\n    useModelToggleEmits: useModelToggleEmits2\n  };\n};\n\nvar _createModelToggleCom = createModelToggleComposable(\"modelValue\"),\n    useModelToggle = _createModelToggleCom.useModelToggle,\n    useModelToggleProps = _createModelToggleCom.useModelToggleProps,\n    useModelToggleEmits = _createModelToggleCom.useModelToggleEmits;\n\nexport { createModelToggleComposable, useModelToggle, useModelToggleEmits, useModelToggleProps };","map":{"version":3,"mappings":"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","names":["_prop","buildProp","type","definePropType","Boolean","_event","Function","createModelToggleComposable","name","updateEventKey","updateEventKeyRaw","useModelToggleEmits2","useModelToggleProps2","useModelToggle2","indicator","toggleReason","shouldHideWhenRouteChanges","shouldProceed","onShow","onHide","instance","getCurrentInstance","emit","props","hasUpdateHandler","computed","isFunction","isModelBindingAbsent","doShow","event","value","doHide","show","disabled","shouldEmit","isClient","hide","onChange","val","isBoolean","toggle","watch","appContext","config","globalProperties","$route","proxy","onMounted","useModelToggle","useModelToggleProps","useModelToggleEmits"],"sources":["../../../../../packages/hooks/use-model-toggle/index.ts"],"sourcesContent":["import { computed, getCurrentInstance, onMounted, watch } from 'vue'\nimport { isFunction } from '@vue/shared'\nimport { isClient } from '@vueuse/core'\nimport { buildProp, definePropType, isBoolean } from '@element-plus/utils'\nimport type { ExtractPropType } from '@element-plus/utils'\nimport type { RouteLocationNormalizedLoaded } from 'vue-router'\n\nimport type { ComponentPublicInstance, ExtractPropTypes, Ref } from 'vue'\n\nconst _prop = buildProp({\n  type: definePropType<boolean | null>(Boolean),\n  default: null,\n} as const)\nconst _event = buildProp({\n  type: definePropType<(val: boolean) => void>(Function),\n} as const)\n\nexport type UseModelTogglePropsRaw<T extends string> = {\n  [K in T]: typeof _prop\n} & {\n  [K in `onUpdate:${T}`]: typeof _event\n}\n\nexport type UseModelTogglePropsGeneric<T extends string> = {\n  [K in T]: ExtractPropType<typeof _prop>\n} & {\n  [K in `onUpdate:${T}`]: ExtractPropType<typeof _event>\n}\n\nexport const createModelToggleComposable = <T extends string>(name: T) => {\n  const updateEventKey = `update:${name}` as const\n  const updateEventKeyRaw = `onUpdate:${name}` as const\n  const useModelToggleEmits = [updateEventKey]\n\n  const useModelToggleProps = {\n    [name]: _prop,\n    [updateEventKeyRaw]: _event,\n  } as UseModelTogglePropsRaw<T>\n\n  const useModelToggle = ({\n    indicator,\n    toggleReason,\n    shouldHideWhenRouteChanges,\n    shouldProceed,\n    onShow,\n    onHide,\n  }: ModelToggleParams) => {\n    const instance = getCurrentInstance()!\n    const { emit } = instance\n    const props = instance.props as UseModelTogglePropsGeneric<T> & {\n      disabled: boolean\n    }\n    const hasUpdateHandler = computed(() =>\n      isFunction(props[updateEventKeyRaw])\n    )\n    // when it matches the default value we say this is absent\n    // though this could be mistakenly passed from the user but we need to rule out that\n    // condition\n    const isModelBindingAbsent = computed(() => props[name] === null)\n\n    const doShow = (event?: Event) => {\n      if (indicator.value === true) {\n        return\n      }\n\n      indicator.value = true\n      if (toggleReason) {\n        toggleReason.value = event\n      }\n      if (isFunction(onShow)) {\n        onShow(event)\n      }\n    }\n\n    const doHide = (event?: Event) => {\n      if (indicator.value === false) {\n        return\n      }\n\n      indicator.value = false\n      if (toggleReason) {\n        toggleReason.value = event\n      }\n      if (isFunction(onHide)) {\n        onHide(event)\n      }\n    }\n\n    const show = (event?: Event) => {\n      if (\n        props.disabled === true ||\n        (isFunction(shouldProceed) && !shouldProceed())\n      )\n        return\n\n      const shouldEmit = hasUpdateHandler.value && isClient\n\n      if (shouldEmit) {\n        emit(updateEventKey, true)\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doShow(event)\n      }\n    }\n\n    const hide = (event?: Event) => {\n      if (props.disabled === true || !isClient) return\n\n      const shouldEmit = hasUpdateHandler.value && isClient\n\n      if (shouldEmit) {\n        emit(updateEventKey, false)\n      }\n\n      if (isModelBindingAbsent.value || !shouldEmit) {\n        doHide(event)\n      }\n    }\n\n    const onChange = (val: boolean) => {\n      if (!isBoolean(val)) return\n      if (props.disabled && val) {\n        if (hasUpdateHandler.value) {\n          emit(updateEventKey, false)\n        }\n      } else if (indicator.value !== val) {\n        if (val) {\n          doShow()\n        } else {\n          doHide()\n        }\n      }\n    }\n\n    const toggle = () => {\n      if (indicator.value) {\n        hide()\n      } else {\n        show()\n      }\n    }\n\n    watch(() => props[name], onChange)\n\n    if (\n      shouldHideWhenRouteChanges &&\n      instance.appContext.config.globalProperties.$route !== undefined\n    ) {\n      watch(\n        () => ({\n          ...(\n            instance.proxy as ComponentPublicInstance<{\n              $route: RouteLocationNormalizedLoaded\n            }>\n          ).$route,\n        }),\n        () => {\n          if (shouldHideWhenRouteChanges.value && indicator.value) {\n            hide()\n          }\n        }\n      )\n    }\n\n    onMounted(() => {\n      onChange(props[name])\n    })\n\n    return {\n      hide,\n      show,\n      toggle,\n      hasUpdateHandler,\n    }\n  }\n\n  return {\n    useModelToggle,\n    useModelToggleProps,\n    useModelToggleEmits,\n  }\n}\n\nconst { useModelToggle, useModelToggleProps, useModelToggleEmits } =\n  createModelToggleComposable('modelValue')\n\nexport { useModelToggle, useModelToggleEmits, useModelToggleProps }\n\nexport type UseModelToggleProps = ExtractPropTypes<typeof useModelToggleProps>\n\nexport type ModelToggleParams = {\n  indicator: Ref<boolean>\n  toggleReason?: Ref<Event | undefined>\n  shouldHideWhenRouteChanges?: Ref<boolean>\n  shouldProceed?: () => boolean\n  onShow?: (event?: Event) => void\n  onHide?: (event?: Event) => void\n}\n"]},"metadata":{},"sourceType":"module"}