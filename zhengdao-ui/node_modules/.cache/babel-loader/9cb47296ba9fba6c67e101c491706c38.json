{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { defineComponent, inject, ref, computed, unref, createVNode, mergeProps } from 'vue';\nimport { get } from 'lodash-unified';\nimport '../../../utils/index.mjs';\nimport '../../virtual-list/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport GroupItem from './group-item.mjs';\nimport OptionItem from './option-item.mjs';\nimport { selectV2InjectionKey } from './token.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isUndefined } from '../../../utils/types.mjs';\nimport { isObject } from '@vue/shared';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nimport DynamicSizeList from '../../virtual-list/src/components/dynamic-size-list.mjs';\nvar ElSelectMenu = defineComponent({\n  name: \"ElSelectDropdown\",\n  props: {\n    data: {\n      type: Array,\n      required: true\n    },\n    hoveringIndex: Number,\n    width: Number\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        expose = _ref.expose;\n    var select = inject(selectV2InjectionKey);\n    var ns = useNamespace(\"select\");\n    var cachedHeights = ref([]);\n    var listRef = ref();\n    var isSized = computed(function () {\n      return isUndefined(select.props.estimatedOptionHeight);\n    });\n    var listProps = computed(function () {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight\n        };\n      }\n\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: function itemSize(idx) {\n          return cachedHeights.value[idx];\n        }\n      };\n    });\n\n    var contains = function contains() {\n      var arr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var target = arguments.length > 1 ? arguments[1] : undefined;\n      var valueKey = select.props.valueKey;\n\n      if (!isObject(target)) {\n        return arr.includes(target);\n      }\n\n      return arr && arr.some(function (item) {\n        return get(item, valueKey) === get(target, valueKey);\n      });\n    };\n\n    var isEqual = function isEqual(selected, target) {\n      if (!isObject(target)) {\n        return selected === target;\n      } else {\n        var valueKey = select.props.valueKey;\n        return get(selected, valueKey) === get(target, valueKey);\n      }\n    };\n\n    var isItemSelected = function isItemSelected(modelValue, target) {\n      var valueKey = select.props.valueKey;\n\n      if (select.props.multiple) {\n        return contains(modelValue, get(target, valueKey));\n      }\n\n      return isEqual(modelValue, get(target, valueKey));\n    };\n\n    var isItemDisabled = function isItemDisabled(modelValue, selected) {\n      var _select$props = select.props,\n          disabled = _select$props.disabled,\n          multiple = _select$props.multiple,\n          multipleLimit = _select$props.multipleLimit;\n      return disabled || !selected && (multiple ? multipleLimit > 0 && modelValue.length >= multipleLimit : false);\n    };\n\n    var isItemHovering = function isItemHovering(target) {\n      return props.hoveringIndex === target;\n    };\n\n    var scrollToItem = function scrollToItem(index) {\n      var list = listRef.value;\n\n      if (list) {\n        list.scrollToItem(index);\n      }\n    };\n\n    var resetScrollTop = function resetScrollTop() {\n      var list = listRef.value;\n\n      if (list) {\n        list.resetScrollTop();\n      }\n    };\n\n    expose({\n      listRef: listRef,\n      isSized: isSized,\n      isItemDisabled: isItemDisabled,\n      isItemHovering: isItemHovering,\n      isItemSelected: isItemSelected,\n      scrollToItem: scrollToItem,\n      resetScrollTop: resetScrollTop\n    });\n\n    var Item = function Item(itemProps) {\n      var index = itemProps.index,\n          data = itemProps.data,\n          style = itemProps.style;\n      var sized = unref(isSized);\n\n      var _unref = unref(listProps),\n          itemSize = _unref.itemSize,\n          estimatedSize = _unref.estimatedSize;\n\n      var modelValue = select.props.modelValue;\n      var onSelect = select.onSelect,\n          onHover = select.onHover;\n      var item = data[index];\n\n      if (item.type === \"Group\") {\n        return createVNode(GroupItem, {\n          \"item\": item,\n          \"style\": style,\n          \"height\": sized ? itemSize : estimatedSize\n        }, null);\n      }\n\n      var isSelected = isItemSelected(modelValue, item);\n      var isDisabled = isItemDisabled(modelValue, isSelected);\n      var isHovering = isItemHovering(index);\n      return createVNode(OptionItem, mergeProps(itemProps, {\n        \"selected\": isSelected,\n        \"disabled\": item.disabled || isDisabled,\n        \"created\": !!item.created,\n        \"hovering\": isHovering,\n        \"item\": item,\n        \"onSelect\": onSelect,\n        \"onHover\": onHover\n      }), {\n        \"default\": function _default(props2) {\n          var _a;\n\n          return ((_a = slots[\"default\"]) == null ? void 0 : _a.call(slots, props2)) || createVNode(\"span\", null, [item.label]);\n        }\n      });\n    };\n\n    var onKeyboardNavigate = select.onKeyboardNavigate,\n        onKeyboardSelect = select.onKeyboardSelect;\n\n    var onForward = function onForward() {\n      onKeyboardNavigate(\"forward\");\n    };\n\n    var onBackward = function onBackward() {\n      onKeyboardNavigate(\"backward\");\n    };\n\n    var onEscOrTab = function onEscOrTab() {\n      select.expanded = false;\n    };\n\n    var onKeydown = function onKeydown(e) {\n      var code = e.code;\n      var tab = EVENT_CODE.tab,\n          esc = EVENT_CODE.esc,\n          down = EVENT_CODE.down,\n          up = EVENT_CODE.up,\n          enter = EVENT_CODE.enter;\n\n      if (code !== tab) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n\n      switch (code) {\n        case tab:\n        case esc:\n          {\n            onEscOrTab();\n            break;\n          }\n\n        case down:\n          {\n            onForward();\n            break;\n          }\n\n        case up:\n          {\n            onBackward();\n            break;\n          }\n\n        case enter:\n          {\n            onKeyboardSelect();\n            break;\n          }\n      }\n    };\n\n    return function () {\n      var _a;\n\n      var data = props.data,\n          width = props.width;\n      var _select$props2 = select.props,\n          height = _select$props2.height,\n          multiple = _select$props2.multiple,\n          scrollbarAlwaysOn = _select$props2.scrollbarAlwaysOn;\n\n      if (data.length === 0) {\n        return createVNode(\"div\", {\n          \"class\": ns.b(\"dropdown\"),\n          \"style\": {\n            width: \"\".concat(width, \"px\")\n          }\n        }, [(_a = slots.empty) == null ? void 0 : _a.call(slots)]);\n      }\n\n      var List = unref(isSized) ? FixedSizeList : DynamicSizeList;\n      return createVNode(\"div\", {\n        \"class\": [ns.b(\"dropdown\"), ns.is(\"multiple\", multiple)]\n      }, [createVNode(List, mergeProps({\n        \"ref\": listRef\n      }, unref(listProps), {\n        \"className\": ns.be(\"dropdown\", \"list\"),\n        \"scrollbarAlwaysOn\": scrollbarAlwaysOn,\n        \"data\": data,\n        \"height\": height,\n        \"width\": width,\n        \"total\": data.length,\n        \"onKeydown\": onKeydown\n      }), {\n        \"default\": function _default(props2) {\n          return createVNode(Item, props2, null);\n        }\n      })]);\n    };\n  }\n});\nexport { ElSelectMenu as default };","map":{"version":3,"mappings":"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","names":["defineComponent","name","props","data","type","Array","required","hoveringIndex","Number","width","expose","slots","select","ns","cachedHeights","listRef","ref","isSized","computed","isUndefined","listProps","itemSize","contains","valueKey","isObject","item","target","get","arr","selected","isItemSelected","multiple","multipleLimit","isItemHovering","list","disabled","index","scrollToItem","isItemDisabled","Item","itemProps","style","unref","estimatedSize","modelValue","resetScrollTop","onSelect","_createVNode","isHovering","isSelected","onHover","onKeyboardNavigate","onKeyboardSelect","onBackward","onKeydown","code","tab","onForward","esc","e","onEscOrTab","up","down","enter","stopPropagation","height","scrollbarAlwaysOn"],"sources":["../../../../../../packages/components/select-v2/src/select-dropdown.tsx"],"sourcesContent":["import { computed, defineComponent, inject, ref, unref } from 'vue'\nimport { get } from 'lodash-unified'\nimport { isObject, isUndefined } from '@element-plus/utils'\nimport {\n  DynamicSizeList,\n  FixedSizeList,\n} from '@element-plus/components/virtual-list'\nimport { useNamespace } from '@element-plus/hooks'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport GroupItem from './group-item.vue'\nimport OptionItem from './option-item.vue'\n\nimport { selectV2InjectionKey } from './token'\n\nimport type { ItemProps } from '@element-plus/components/virtual-list'\nimport type { Option, OptionItemProps } from './select.types'\n\nexport default defineComponent({\n  name: 'ElSelectDropdown',\n\n  props: {\n    data: {\n      type: Array,\n      required: true,\n    },\n    hoveringIndex: Number,\n    width: Number,\n  },\n  setup(props, { slots, expose }) {\n    const select = inject(selectV2InjectionKey)!\n    const ns = useNamespace('select')\n    const cachedHeights = ref<Array<number>>([])\n\n    const listRef = ref()\n\n    const isSized = computed(() =>\n      isUndefined(select.props.estimatedOptionHeight)\n    )\n    const listProps = computed(() => {\n      if (isSized.value) {\n        return {\n          itemSize: select.props.itemHeight,\n        }\n      }\n\n      return {\n        estimatedSize: select.props.estimatedOptionHeight,\n        itemSize: (idx: number) => cachedHeights.value[idx],\n      }\n    })\n\n    const contains = (arr: Array<any> = [], target: any) => {\n      const {\n        props: { valueKey },\n      } = select\n\n      if (!isObject(target)) {\n        return arr.includes(target)\n      }\n\n      return (\n        arr &&\n        arr.some((item) => {\n          return get(item, valueKey) === get(target, valueKey)\n        })\n      )\n    }\n    const isEqual = (selected: unknown, target: unknown) => {\n      if (!isObject(target)) {\n        return selected === target\n      } else {\n        const { valueKey } = select.props\n        return get(selected, valueKey) === get(target, valueKey)\n      }\n    }\n\n    const isItemSelected = (modelValue: any[] | any, target: Option) => {\n      const { valueKey } = select.props\n      if (select.props.multiple) {\n        return contains(modelValue, get(target, valueKey))\n      }\n      return isEqual(modelValue, get(target, valueKey))\n    }\n\n    const isItemDisabled = (modelValue: any[] | any, selected: boolean) => {\n      const { disabled, multiple, multipleLimit } = select.props\n      return (\n        disabled ||\n        (!selected &&\n          (multiple\n            ? multipleLimit > 0 && modelValue.length >= multipleLimit\n            : false))\n      )\n    }\n\n    const isItemHovering = (target: number) => props.hoveringIndex === target\n\n    const scrollToItem = (index: number) => {\n      const list = listRef.value as any\n      if (list) {\n        list.scrollToItem(index)\n      }\n    }\n\n    const resetScrollTop = () => {\n      const list = listRef.value as any\n      if (list) {\n        list.resetScrollTop()\n      }\n    }\n\n    expose({\n      listRef,\n      isSized,\n\n      isItemDisabled,\n      isItemHovering,\n      isItemSelected,\n      scrollToItem,\n      resetScrollTop,\n    })\n\n    const Item = (itemProps: ItemProps<any>) => {\n      const { index, data, style } = itemProps\n      const sized = unref(isSized)\n      const { itemSize, estimatedSize } = unref(listProps)\n      const { modelValue } = select.props\n      const { onSelect, onHover } = select\n      const item = data[index]\n      if (item.type === 'Group') {\n        return (\n          <GroupItem\n            item={item}\n            style={style}\n            height={(sized ? itemSize : estimatedSize) as number}\n          />\n        )\n      }\n\n      const isSelected = isItemSelected(modelValue, item)\n      const isDisabled = isItemDisabled(modelValue, isSelected)\n      const isHovering = isItemHovering(index)\n      return (\n        <OptionItem\n          {...itemProps}\n          selected={isSelected}\n          disabled={item.disabled || isDisabled}\n          created={!!item.created}\n          hovering={isHovering}\n          item={item}\n          onSelect={onSelect}\n          onHover={onHover}\n        >\n          {{\n            default: (props: OptionItemProps) =>\n              slots.default?.(props) || <span>{item.label}</span>,\n          }}\n        </OptionItem>\n      )\n    }\n\n    // computed\n    const { onKeyboardNavigate, onKeyboardSelect } = select\n\n    const onForward = () => {\n      onKeyboardNavigate('forward')\n    }\n\n    const onBackward = () => {\n      onKeyboardNavigate('backward')\n    }\n\n    const onEscOrTab = () => {\n      select.expanded = false\n    }\n\n    const onKeydown = (e: KeyboardEvent) => {\n      const { code } = e\n      const { tab, esc, down, up, enter } = EVENT_CODE\n      if (code !== tab) {\n        e.preventDefault()\n        e.stopPropagation()\n      }\n\n      switch (code) {\n        case tab:\n        case esc: {\n          onEscOrTab()\n          break\n        }\n        case down: {\n          onForward()\n          break\n        }\n        case up: {\n          onBackward()\n          break\n        }\n        case enter: {\n          onKeyboardSelect()\n          break\n        }\n      }\n    }\n\n    return () => {\n      const { data, width } = props\n      const { height, multiple, scrollbarAlwaysOn } = select.props\n\n      if (data.length === 0) {\n        return (\n          <div\n            class={ns.b('dropdown')}\n            style={{\n              width: `${width}px`,\n            }}\n          >\n            {slots.empty?.()}\n          </div>\n        )\n      }\n\n      const List = unref(isSized) ? FixedSizeList : DynamicSizeList\n\n      return (\n        <div class={[ns.b('dropdown'), ns.is('multiple', multiple)]}>\n          <List\n            ref={listRef}\n            {...unref(listProps)}\n            className={ns.be('dropdown', 'list')}\n            scrollbarAlwaysOn={scrollbarAlwaysOn}\n            data={data}\n            height={height}\n            width={width}\n            total={data.length}\n            // @ts-ignore - dts problem\n            onKeydown={onKeydown}\n          >\n            {{\n              default: (props: ItemProps<any>) => <Item {...props} />,\n            }}\n          </List>\n        </div>\n      )\n    }\n  },\n})\n"]},"metadata":{},"sourceType":"module"}