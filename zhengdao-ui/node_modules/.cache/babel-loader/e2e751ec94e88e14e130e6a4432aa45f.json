{"ast":null,"code":"import \"core-js/modules/es.string.starts-with.js\";\nimport { isClient } from '@vueuse/core';\n\nvar isInContainer = function isInContainer(el, container) {\n  if (!isClient || !el || !container) return false;\n  var elRect = el.getBoundingClientRect();\n  var containerRect;\n\n  if (container instanceof Element) {\n    containerRect = container.getBoundingClientRect();\n  } else {\n    containerRect = {\n      top: 0,\n      right: window.innerWidth,\n      bottom: window.innerHeight,\n      left: 0\n    };\n  }\n\n  return elRect.top < containerRect.bottom && elRect.bottom > containerRect.top && elRect.right > containerRect.left && elRect.left < containerRect.right;\n};\n\nvar getOffsetTop = function getOffsetTop(el) {\n  var offset = 0;\n  var parent = el;\n\n  while (parent) {\n    offset += parent.offsetTop;\n    parent = parent.offsetParent;\n  }\n\n  return offset;\n};\n\nvar getOffsetTopDistance = function getOffsetTopDistance(el, containerEl) {\n  return Math.abs(getOffsetTop(el) - getOffsetTop(containerEl));\n};\n\nvar getClientXY = function getClientXY(event) {\n  var clientX;\n  var clientY;\n\n  if (event.type === \"touchend\") {\n    clientY = event.changedTouches[0].clientY;\n    clientX = event.changedTouches[0].clientX;\n  } else if (event.type.startsWith(\"touch\")) {\n    clientY = event.touches[0].clientY;\n    clientX = event.touches[0].clientX;\n  } else {\n    clientY = event.clientY;\n    clientX = event.clientX;\n  }\n\n  return {\n    clientX: clientX,\n    clientY: clientY\n  };\n};\n\nexport { getClientXY, getOffsetTop, getOffsetTopDistance, isInContainer };","map":{"version":3,"mappings":";;;AACY,IAACA,aAAa,GAAG,SAAhBA,aAAgB,CAACC,EAAD,EAAKC,SAAL,EAAmB;EAC9C,IAAI,CAACC,QAAD,IAAa,CAACF,EAAd,IAAoB,CAACC,SAAzB,EACE,OAAO,KAAP;EACF,IAAME,MAAM,GAAGH,EAAE,CAACI,qBAAH,EAAf;EACA,IAAIC,aAAJ;;EACA,IAAIJ,SAAS,YAAYK,OAAzB,EAAkC;IAChCD,aAAa,GAAGJ,SAAS,CAACG,qBAAV,EAAhB;EACD,CAFD,MAEO;IACLC,aAAa,GAAG;MACdE,GAAG,EAAE,CADS;MAEdC,KAAK,EAAEC,MAAM,CAACC,UAFA;MAGdC,MAAM,EAAEF,MAAM,CAACG,WAHD;MAIdC,IAAI,EAAE;IAJQ,CAAhB;EAMD;;EACD,OAAOV,MAAM,CAACI,GAAP,GAAaF,aAAa,CAACM,MAA3B,IAAqCR,MAAM,CAACQ,MAAP,GAAgBN,aAAa,CAACE,GAAnE,IAA0EJ,MAAM,CAACK,KAAP,GAAeH,aAAa,CAACQ,IAAvG,IAA+GV,MAAM,CAACU,IAAP,GAAcR,aAAa,CAACG,KAAlJ;AACF,CAhBY;;AAiBA,IAACM,YAAY,GAAG,SAAfA,YAAe,CAACd,EAAD,EAAQ;EAClC,IAAIe,MAAM,GAAG,CAAb;EACA,IAAIC,MAAM,GAAGhB,EAAb;;EACA,OAAOgB,MAAP,EAAe;IACbD,MAAM,IAAIC,MAAM,CAACC,SAAjB;IACAD,MAAM,GAAGA,MAAM,CAACE,YAAhB;EACD;;EACD,OAAOH,MAAP;AACF,CARY;;AASA,IAACI,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACnB,EAAD,EAAKoB,WAAL,EAAqB;EACvD,OAAOC,IAAI,CAACC,GAAL,CAASR,YAAY,CAACd,EAAD,CAAZ,GAAmBc,YAAY,CAACM,WAAD,CAAxC,CAAP;AACF,CAFY;;AAGA,IAACG,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAW;EACpC,IAAIC,OAAJ;EACA,IAAIC,OAAJ;;EACA,IAAIF,KAAK,CAACG,IAAN,KAAe,UAAnB,EAA+B;IAC7BD,OAAO,GAAGF,KAAK,CAACI,cAAN,CAAqB,CAArB,EAAwBF,OAAlC;IACAD,OAAO,GAAGD,KAAK,CAACI,cAAN,CAAqB,CAArB,EAAwBH,OAAlC;EACD,CAHD,MAGO,IAAID,KAAK,CAACG,IAAN,CAAWE,UAAX,CAAsB,OAAtB,CAAJ,EAAoC;IACzCH,OAAO,GAAGF,KAAK,CAACM,OAAN,CAAc,CAAd,EAAiBJ,OAA3B;IACAD,OAAO,GAAGD,KAAK,CAACM,OAAN,CAAc,CAAd,EAAiBL,OAA3B;EACD,CAHM,MAGA;IACLC,OAAO,GAAGF,KAAK,CAACE,OAAhB;IACAD,OAAO,GAAGD,KAAK,CAACC,OAAhB;EACD;;EACD,OAAO;IACLA,OAAO,EAAPA,OADK;IAELC,OAAO,EAAPA;EAFK,CAAP;AAIF,CAjBY","names":["isInContainer","el","container","isClient","elRect","getBoundingClientRect","containerRect","Element","top","right","window","innerWidth","bottom","innerHeight","left","getOffsetTop","offset","parent","offsetTop","offsetParent","getOffsetTopDistance","containerEl","Math","abs","getClientXY","event","clientX","clientY","type","changedTouches","startsWith","touches"],"sources":["../../../../../packages/utils/dom/position.ts"],"sourcesContent":["import { isClient } from '@vueuse/core'\n\nexport const isInContainer = (\n  el?: Element,\n  container?: Element | Window\n): boolean => {\n  if (!isClient || !el || !container) return false\n\n  const elRect = el.getBoundingClientRect()\n\n  let containerRect: Pick<DOMRect, 'top' | 'bottom' | 'left' | 'right'>\n  if (container instanceof Element) {\n    containerRect = container.getBoundingClientRect()\n  } else {\n    containerRect = {\n      top: 0,\n      right: window.innerWidth,\n      bottom: window.innerHeight,\n      left: 0,\n    }\n  }\n  return (\n    elRect.top < containerRect.bottom &&\n    elRect.bottom > containerRect.top &&\n    elRect.right > containerRect.left &&\n    elRect.left < containerRect.right\n  )\n}\n\nexport const getOffsetTop = (el: HTMLElement) => {\n  let offset = 0\n  let parent = el\n\n  while (parent) {\n    offset += parent.offsetTop\n    parent = parent.offsetParent as HTMLElement\n  }\n\n  return offset\n}\n\nexport const getOffsetTopDistance = (\n  el: HTMLElement,\n  containerEl: HTMLElement\n) => {\n  return Math.abs(getOffsetTop(el) - getOffsetTop(containerEl))\n}\n\nexport const getClientXY = (event: MouseEvent | TouchEvent) => {\n  let clientX: number\n  let clientY: number\n  if (event.type === 'touchend') {\n    clientY = (event as TouchEvent).changedTouches[0].clientY\n    clientX = (event as TouchEvent).changedTouches[0].clientX\n  } else if (event.type.startsWith('touch')) {\n    clientY = (event as TouchEvent).touches[0].clientY\n    clientX = (event as TouchEvent).touches[0].clientX\n  } else {\n    clientY = (event as MouseEvent).clientY\n    clientX = (event as MouseEvent).clientX\n  }\n  return {\n    clientX,\n    clientY,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}