{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport { CircleStencil, Cropper, Preview } from 'vue-advanced-cropper';\nimport 'vue-advanced-cropper/dist/style.css'; // This function is used to detect the actual image type, \n\nfunction getMimeType(file, fallback = null) {\n  const byteArray = new Uint8Array(file).subarray(0, 4);\n  let header = '';\n\n  for (let i = 0; i < byteArray.length; i++) {\n    header += byteArray[i].toString(16);\n  }\n\n  switch (header) {\n    case \"89504e47\":\n      return \"image/png\";\n\n    case \"47494638\":\n      return \"image/gif\";\n\n    case \"ffd8ffe0\":\n    case \"ffd8ffe1\":\n    case \"ffd8ffe2\":\n    case \"ffd8ffe3\":\n    case \"ffd8ffe8\":\n      return \"image/jpeg\";\n\n    default:\n      return fallback;\n  }\n}\n\nexport default {\n  components: {\n    Cropper,\n    CircleStencil,\n    Preview\n  },\n\n  data() {\n    return {\n      image: {\n        src: null,\n        type: null\n      },\n      result: {\n        coordinates: null,\n        image: null\n      }\n    };\n  },\n\n  methods: {\n    crop() {\n      const {\n        canvas\n      } = this.$refs.cropper.getResult();\n      canvas.toBlob(blob => {// Do something with blob: upload to a server, download and etc.\n      }, this.image.type);\n    },\n\n    reset() {\n      this.image = {\n        src: null,\n        type: null\n      };\n    },\n\n    loadImage(event) {\n      // Reference to the DOM input element\n      const {\n        files\n      } = event.target; // Ensure that you have a file before attempting to read it\n\n      if (files && files[0]) {\n        // 1. Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n        if (this.image.src) {\n          URL.revokeObjectURL(this.image.src);\n        } // 2. Create the blob link to the file to optimize performance:\n\n\n        const blob = URL.createObjectURL(files[0]); // 3. The steps below are designated to determine a file mime type to use it during the \n        // getting of a cropped image from the canvas. You can replace it them by the following string, \n        // but the type will be derived from the extension and it can lead to an incorrect result:\n        //\n        // this.image = {\n        //    src: blob;\n        //    type: files[0].type\n        // }\n        // Create a new FileReader to read this image binary data\n\n        const reader = new FileReader(); // Define a callback function to run, when FileReader finishes its job\n\n        reader.onload = e => {\n          // Note: arrow function used here, so that \"this.image\" refers to the image of Vue component\n          this.image = {\n            // Set the image source (it will look like blob:http://example.com/2c5270a5-18b5-406e-a4fb-07427f5e7b94)\n            src: blob,\n            // Determine the image type to preserve it during the extracting the image from canvas:\n            type: getMimeType(e.target.result, files[0].type)\n          };\n        }; // Start the reader job - read file as a data url (base64 format)\n\n\n        reader.readAsArrayBuffer(files[0]);\n      }\n    },\n\n    uploadImage(event) {\n      const {\n        canvas\n      } = this.$refs.cropper.getResult();\n\n      if (canvas) {\n        const form = new FormData();\n        console.log(form);\n        canvas.toBlob(blob => {\n          form.append('file', blob); // You can use axios, superagent and other libraries instead here\n          // fetch('http://example.com/upload/', {\n          // \tmethod: 'POST',\n          // \tbody: form,\n          // });\n\n          console.log(blob); // \t// \t// Perhaps you should add the setting appropriate file format here\n        }, 'image/jpeg');\n      }\n    },\n\n    onChange({\n      coordinates,\n      image\n    }) {\n      this.result = {\n        coordinates,\n        image\n      };\n    }\n\n  },\n\n  destroyed() {\n    // Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n    if (this.image.src) {\n      URL.revokeObjectURL(this.image.src);\n    }\n  }\n\n};","map":{"version":3,"mappings":"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","names":["CircleStencil","Cropper","Preview","getMimeType","file","fallback","byteArray","Uint8Array","subarray","header","i","length","toString","components","data","image","src","type","result","coordinates","methods","crop","canvas","$refs","cropper","getResult","toBlob","blob","reset","loadImage","event","files","target","URL","revokeObjectURL","createObjectURL","reader","FileReader","onload","e","readAsArrayBuffer","uploadImage","form","FormData","console","log","append","onChange","destroyed"],"sourceRoot":"","sources":["/home/little/Documents/music_web/startproj/zhengdao-ui/src/views/Music/MusicSearch.vue"],"sourcesContent":["<template>\n    <div class=\"upload-example\">\n\t\t<cropper\n\t\t\tref=\"cropper\"\n\t\t\tclass=\"upload-example-cropper\"\n\t\t\t:src=\"image.src\"\n            :stencil-component=\"$options.components.CircleStencil\"\n            @change=\"onChange\"\n            :debounce=\"false\"\n            :stencil-props=\"{aspectRatio:1}\"\n\t\t/>\n        <preview\n            :width = \"120\"\n            :height = \"120\"\n            :image = \"result.image\"\n            :coordinates=\"result.coordinates\"\n\t\t\t/>\n\t\t<div class=\"button-wrapper\">\n\t\t\t<button class=\"button\" @click=\"$refs.file.click()\">\n\t\t\t\t<input type=\"file\" ref=\"file\" @change=\"loadImage($event)\" accept=\"image/*\">\n\t\t\t\tLoad image\n\t\t\t</button>\n            <button @click=\"uploadImage\"> show result</button>\n\t\t</div>\n\t</div>\n\n</template>\n\n<script>\nimport { CircleStencil, Cropper, Preview } from 'vue-advanced-cropper';\nimport 'vue-advanced-cropper/dist/style.css';\n\n// This function is used to detect the actual image type, \nfunction getMimeType(file, fallback = null) {\n\tconst byteArray = (new Uint8Array(file)).subarray(0, 4);\n    let header = '';\n    for (let i = 0; i < byteArray.length; i++) {\n       header += byteArray[i].toString(16);\n    }\n\tswitch (header) {\n        case \"89504e47\":\n            return \"image/png\";\n        case \"47494638\":\n            return \"image/gif\";\n        case \"ffd8ffe0\":\n        case \"ffd8ffe1\":\n        case \"ffd8ffe2\":\n        case \"ffd8ffe3\":\n        case \"ffd8ffe8\":\n            return \"image/jpeg\";\n        default:\n            return fallback;\n    }\n}\n\nexport default {\n\tcomponents: {\n\t\tCropper,\n        CircleStencil,\n        Preview\n\t},\n\tdata() {\n\t\treturn {\n\t\t\timage: {\n\t\t\t\tsrc: null,\n\t\t\t\ttype: null\n\t\t\t},\n            result:{\n                coordinates: null,\n                image: null\n            }\n\t\t};\n\t},\n\tmethods: {\n\t\tcrop() {\n\t\t\tconst { canvas } = this.$refs.cropper.getResult();\n\t\t\tcanvas.toBlob((blob) => {\n\t\t\t\t// Do something with blob: upload to a server, download and etc.\n\t\t\t}, this.image.type);\n\t\t},\n\t\treset() {\n\t\t\tthis.image = {\n\t\t\t\tsrc: null,\n\t\t\t\ttype: null\n\t\t\t}\n\t\t},\n\t\tloadImage(event) {\n\t\t\t// Reference to the DOM input element\n\t\t\tconst { files } = event.target;\n\t\t\t// Ensure that you have a file before attempting to read it\n\t\t\tif (files && files[0]) {\n\t\t\t\t// 1. Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n\t\t\t\tif (this.image.src) {\n\t\t\t\t\tURL.revokeObjectURL(this.image.src)\n\t\t\t\t}\n\t\t\t\t// 2. Create the blob link to the file to optimize performance:\n\t\t\t\tconst blob = URL.createObjectURL(files[0]);\n\t\t\t\t\n\t\t\t\t// 3. The steps below are designated to determine a file mime type to use it during the \n\t\t\t\t// getting of a cropped image from the canvas. You can replace it them by the following string, \n\t\t\t\t// but the type will be derived from the extension and it can lead to an incorrect result:\n\t\t\t\t//\n\t\t\t\t// this.image = {\n\t\t\t\t//    src: blob;\n\t\t\t\t//    type: files[0].type\n\t\t\t\t// }\n\t\t\t\t\n\t\t\t\t// Create a new FileReader to read this image binary data\n\t\t\t\tconst reader = new FileReader();\n\t\t\t\t// Define a callback function to run, when FileReader finishes its job\n\t\t\t\treader.onload = (e) => {\n\t\t\t\t\t// Note: arrow function used here, so that \"this.image\" refers to the image of Vue component\n\t\t\t\t\tthis.image = {\n\t\t\t\t\t\t// Set the image source (it will look like blob:http://example.com/2c5270a5-18b5-406e-a4fb-07427f5e7b94)\n\t\t\t\t\t\tsrc: blob,\n\t\t\t\t\t\t// Determine the image type to preserve it during the extracting the image from canvas:\n\t\t\t\t\t\ttype: getMimeType(e.target.result, files[0].type),\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t// Start the reader job - read file as a data url (base64 format)\n\t\t\t\treader.readAsArrayBuffer(files[0]);\n\t\t\t}\n\t\t},\n        uploadImage(event) {\n\t\t\tconst { canvas } = this.$refs.cropper.getResult();\n\t\t\tif (canvas) {\n\t\t\t\tconst form = new FormData();\n                console.log(form)\n\t\t\t\tcanvas.toBlob(blob => {\n\t\t\t\t\tform.append('file', blob);\n\t\t\t\t\t// You can use axios, superagent and other libraries instead here\n\t\t\t \t// fetch('http://example.com/upload/', {\n\t\t\t \t// \tmethod: 'POST',\n\t\t\t\t// \tbody: form,\n\t\t\t \t// });\n                    console.log(blob)\n\t\t\t// \t// \t// Perhaps you should add the setting appropriate file format here\n\t\t\t }, 'image/jpeg');\n\t\t\t }\n            },\n        onChange({coordinates, image}){\n            this.result = {\n                coordinates,\n                image\n            }\n        }\n    },\n\tdestroyed() {\n\t\t// Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n\t\tif (this.image.src) {\n\t\t\tURL.revokeObjectURL(this.image.src)\n\t\t}\n\t},\n    \n\n};\n</script>"]},"metadata":{},"sourceType":"module"}