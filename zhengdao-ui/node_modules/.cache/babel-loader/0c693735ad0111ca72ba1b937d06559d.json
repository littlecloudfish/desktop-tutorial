{"ast":null,"code":"import _regeneratorRuntime from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { shallowRef, ref, computed, nextTick } from 'vue';\nimport '../../../../constants/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport { useFormItem } from '../../../../hooks/use-form-item/index.mjs';\nimport { UPDATE_MODEL_EVENT, INPUT_EVENT, CHANGE_EVENT } from '../../../../constants/event.mjs';\n\nvar useSlide = function useSlide(props, initData, emit) {\n  var _useFormItem = useFormItem(),\n      elForm = _useFormItem.form,\n      elFormItem = _useFormItem.formItem;\n\n  var slider = shallowRef();\n  var firstButton = ref();\n  var secondButton = ref();\n  var buttonRefs = {\n    firstButton: firstButton,\n    secondButton: secondButton\n  };\n  var sliderDisabled = computed(function () {\n    return props.disabled || (elForm == null ? void 0 : elForm.disabled) || false;\n  });\n  var minValue = computed(function () {\n    return Math.min(initData.firstValue, initData.secondValue);\n  });\n  var maxValue = computed(function () {\n    return Math.max(initData.firstValue, initData.secondValue);\n  });\n  var barSize = computed(function () {\n    return props.range ? \"\".concat(100 * (maxValue.value - minValue.value) / (props.max - props.min), \"%\") : \"\".concat(100 * (initData.firstValue - props.min) / (props.max - props.min), \"%\");\n  });\n  var barStart = computed(function () {\n    return props.range ? \"\".concat(100 * (minValue.value - props.min) / (props.max - props.min), \"%\") : \"0%\";\n  });\n  var runwayStyle = computed(function () {\n    return props.vertical ? {\n      height: props.height\n    } : {};\n  });\n  var barStyle = computed(function () {\n    return props.vertical ? {\n      height: barSize.value,\n      bottom: barStart.value\n    } : {\n      width: barSize.value,\n      left: barStart.value\n    };\n  });\n\n  var resetSize = function resetSize() {\n    if (slider.value) {\n      initData.sliderSize = slider.value[\"client\".concat(props.vertical ? \"Height\" : \"Width\")];\n    }\n  };\n\n  var getButtonRefByPercent = function getButtonRefByPercent(percent) {\n    var targetValue = props.min + percent * (props.max - props.min) / 100;\n\n    if (!props.range) {\n      return firstButton;\n    }\n\n    var buttonRefName;\n\n    if (Math.abs(minValue.value - targetValue) < Math.abs(maxValue.value - targetValue)) {\n      buttonRefName = initData.firstValue < initData.secondValue ? \"firstButton\" : \"secondButton\";\n    } else {\n      buttonRefName = initData.firstValue > initData.secondValue ? \"firstButton\" : \"secondButton\";\n    }\n\n    return buttonRefs[buttonRefName];\n  };\n\n  var setPosition = function setPosition(percent) {\n    var buttonRef = getButtonRefByPercent(percent);\n    buttonRef.value.setPosition(percent);\n    return buttonRef;\n  };\n\n  var setFirstValue = function setFirstValue(firstValue) {\n    initData.firstValue = firstValue;\n\n    _emit(props.range ? [minValue.value, maxValue.value] : firstValue);\n  };\n\n  var setSecondValue = function setSecondValue(secondValue) {\n    initData.secondValue = secondValue;\n\n    if (props.range) {\n      _emit([minValue.value, maxValue.value]);\n    }\n  };\n\n  var _emit = function _emit(val) {\n    emit(UPDATE_MODEL_EVENT, val);\n    emit(INPUT_EVENT, val);\n  };\n\n  var emitChange = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return nextTick();\n\n            case 2:\n              emit(CHANGE_EVENT, props.range ? [minValue.value, maxValue.value] : props.modelValue);\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function emitChange() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleSliderPointerEvent = function handleSliderPointerEvent(event) {\n    var _a, _b, _c, _d, _e, _f;\n\n    if (sliderDisabled.value || initData.dragging) return;\n    resetSize();\n    var newPercent = 0;\n\n    if (props.vertical) {\n      var clientY = (_c = (_b = (_a = event.touches) == null ? void 0 : _a.item(0)) == null ? void 0 : _b.clientY) != null ? _c : event.clientY;\n      var sliderOffsetBottom = slider.value.getBoundingClientRect().bottom;\n      newPercent = (sliderOffsetBottom - clientY) / initData.sliderSize * 100;\n    } else {\n      var clientX = (_f = (_e = (_d = event.touches) == null ? void 0 : _d.item(0)) == null ? void 0 : _e.clientX) != null ? _f : event.clientX;\n      var sliderOffsetLeft = slider.value.getBoundingClientRect().left;\n      newPercent = (clientX - sliderOffsetLeft) / initData.sliderSize * 100;\n    }\n\n    if (newPercent < 0 || newPercent > 100) return;\n    return setPosition(newPercent);\n  };\n\n  var onSliderWrapperPrevent = function onSliderWrapperPrevent(event) {\n    var _a, _b;\n\n    if (((_a = buttonRefs[\"firstButton\"].value) == null ? void 0 : _a.dragging) || ((_b = buttonRefs[\"secondButton\"].value) == null ? void 0 : _b.dragging)) {\n      event.preventDefault();\n    }\n  };\n\n  var onSliderDown = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(event) {\n      var buttonRef;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              buttonRef = handleSliderPointerEvent(event);\n\n              if (!buttonRef) {\n                _context2.next = 5;\n                break;\n              }\n\n              _context2.next = 4;\n              return nextTick();\n\n            case 4:\n              buttonRef.value.onButtonDown(event);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function onSliderDown(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var onSliderClick = function onSliderClick(event) {\n    var buttonRef = handleSliderPointerEvent(event);\n\n    if (buttonRef) {\n      emitChange();\n    }\n  };\n\n  return {\n    elFormItem: elFormItem,\n    slider: slider,\n    firstButton: firstButton,\n    secondButton: secondButton,\n    sliderDisabled: sliderDisabled,\n    minValue: minValue,\n    maxValue: maxValue,\n    runwayStyle: runwayStyle,\n    barStyle: barStyle,\n    resetSize: resetSize,\n    setPosition: setPosition,\n    emitChange: emitChange,\n    onSliderWrapperPrevent: onSliderWrapperPrevent,\n    onSliderClick: onSliderClick,\n    onSliderDown: onSliderDown,\n    setFirstValue: setFirstValue,\n    setSecondValue: setSecondValue\n  };\n};\n\nexport { useSlide };","map":{"version":3,"mappings":";;;;;;;;AAOY,IAACA,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,QAAR,EAAkBC,IAAlB,EAA2B;EACjD,mBAA+CC,WAAW,EAA1D;EAAA,IAAcC,MAAd,gBAAQC,IAAR;EAAA,IAAgCC,UAAhC,gBAAsBC,QAAtB;;EACA,IAAMC,MAAM,GAAGC,UAAU,EAAzB;EACA,IAAMC,WAAW,GAAGC,GAAG,EAAvB;EACA,IAAMC,YAAY,GAAGD,GAAG,EAAxB;EACA,IAAME,UAAU,GAAG;IACjBH,WAAW,EAAXA,WADiB;IAEjBE,YAAY,EAAZA;EAFiB,CAAnB;EAIA,IAAME,cAAc,GAAGC,QAAQ,CAAC,YAAM;IACpC,OAAOf,KAAK,CAACgB,QAAN,KAAmBZ,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACY,QAApD,KAAiE,KAAxE;EACD,CAF8B,CAA/B;EAGA,IAAMC,QAAQ,GAAGF,QAAQ,CAAC,YAAM;IAC9B,OAAOG,IAAI,CAACC,GAAL,CAASlB,QAAQ,CAACmB,UAAlB,EAA8BnB,QAAQ,CAACoB,WAAvC,CAAP;EACD,CAFwB,CAAzB;EAGA,IAAMC,QAAQ,GAAGP,QAAQ,CAAC,YAAM;IAC9B,OAAOG,IAAI,CAACK,GAAL,CAAStB,QAAQ,CAACmB,UAAlB,EAA8BnB,QAAQ,CAACoB,WAAvC,CAAP;EACD,CAFwB,CAAzB;EAGA,IAAMG,OAAO,GAAGT,QAAQ,CAAC,YAAM;IAC7B,OAAOf,KAAK,CAACyB,KAAN,aAAiB,OAAOH,QAAQ,CAACI,KAAT,GAAiBT,QAAQ,CAACS,KAAjC,KAA2C1B,KAAK,CAACuB,GAAN,GAAYvB,KAAK,CAACmB,GAA7D,CAAjB,mBAA2F,OAAOlB,QAAQ,CAACmB,UAAT,GAAsBpB,KAAK,CAACmB,GAAnC,KAA2CnB,KAAK,CAACuB,GAAN,GAAYvB,KAAK,CAACmB,GAA7D,CAA3F,MAAP;EACD,CAFuB,CAAxB;EAGA,IAAMQ,QAAQ,GAAGZ,QAAQ,CAAC,YAAM;IAC9B,OAAOf,KAAK,CAACyB,KAAN,aAAiB,OAAOR,QAAQ,CAACS,KAAT,GAAiB1B,KAAK,CAACmB,GAA9B,KAAsCnB,KAAK,CAACuB,GAAN,GAAYvB,KAAK,CAACmB,GAAxD,CAAjB,SAAmF,IAA1F;EACD,CAFwB,CAAzB;EAGA,IAAMS,WAAW,GAAGb,QAAQ,CAAC,YAAM;IACjC,OAAOf,KAAK,CAAC6B,QAAN,GAAiB;MAAEC,MAAM,EAAE9B,KAAK,CAAC8B;IAAhB,CAAjB,GAA4C,EAAnD;EACD,CAF2B,CAA5B;EAGA,IAAMC,QAAQ,GAAGhB,QAAQ,CAAC,YAAM;IAC9B,OAAOf,KAAK,CAAC6B,QAAN,GAAiB;MACtBC,MAAM,EAAEN,OAAO,CAACE,KADM;MAEtBM,MAAM,EAAEL,QAAQ,CAACD;IAFK,CAAjB,GAGH;MACFO,KAAK,EAAET,OAAO,CAACE,KADb;MAEFQ,IAAI,EAAEP,QAAQ,CAACD;IAFb,CAHJ;EAOD,CARwB,CAAzB;;EASA,IAAMS,SAAS,GAAG,SAAZA,SAAY,GAAM;IACtB,IAAI3B,MAAM,CAACkB,KAAX,EAAkB;MAChBzB,QAAQ,CAACmC,UAAT,GAAsB5B,MAAM,CAACkB,KAAP,iBAAsB1B,KAAK,CAAC6B,QAAN,GAAiB,QAAjB,GAA4B,OAAlD,EAAtB;IACD;EACF,CAJD;;EAKA,IAAMQ,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,OAAD,EAAa;IACzC,IAAMC,WAAW,GAAGvC,KAAK,CAACmB,GAAN,GAAYmB,OAAO,IAAItC,KAAK,CAACuB,GAAN,GAAYvB,KAAK,CAACmB,GAAtB,CAAP,GAAoC,GAApE;;IACA,IAAI,CAACnB,KAAK,CAACyB,KAAX,EAAkB;MAChB,OAAOf,WAAP;IACD;;IACD,IAAI8B,aAAJ;;IACA,IAAItB,IAAI,CAACuB,GAAL,CAASxB,QAAQ,CAACS,KAAT,GAAiBa,WAA1B,IAAyCrB,IAAI,CAACuB,GAAL,CAASnB,QAAQ,CAACI,KAAT,GAAiBa,WAA1B,CAA7C,EAAqF;MACnFC,aAAa,GAAGvC,QAAQ,CAACmB,UAAT,GAAsBnB,QAAQ,CAACoB,WAA/B,GAA6C,aAA7C,GAA6D,cAA7E;IACD,CAFD,MAEO;MACLmB,aAAa,GAAGvC,QAAQ,CAACmB,UAAT,GAAsBnB,QAAQ,CAACoB,WAA/B,GAA6C,aAA7C,GAA6D,cAA7E;IACD;;IACD,OAAOR,UAAU,CAAC2B,aAAD,CAAjB;EACD,CAZD;;EAaA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACJ,OAAD,EAAa;IAC/B,IAAMK,SAAS,GAAGN,qBAAqB,CAACC,OAAD,CAAvC;IACAK,SAAS,CAACjB,KAAV,CAAgBgB,WAAhB,CAA4BJ,OAA5B;IACA,OAAOK,SAAP;EACD,CAJD;;EAKA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACxB,UAAD,EAAgB;IACpCnB,QAAQ,CAACmB,UAAT,GAAsBA,UAAtB;;IACAyB,KAAK,CAAC7C,KAAK,CAACyB,KAAN,GAAc,CAACR,QAAQ,CAACS,KAAV,EAAiBJ,QAAQ,CAACI,KAA1B,CAAd,GAAiDN,UAAlD,CAAL;EACD,CAHD;;EAIA,IAAM0B,cAAc,GAAG,SAAjBA,cAAiB,CAACzB,WAAD,EAAiB;IACtCpB,QAAQ,CAACoB,WAAT,GAAuBA,WAAvB;;IACA,IAAIrB,KAAK,CAACyB,KAAV,EAAiB;MACfoB,KAAK,CAAC,CAAC5B,QAAQ,CAACS,KAAV,EAAiBJ,QAAQ,CAACI,KAA1B,CAAD,CAAL;IACD;EACF,CALD;;EAMA,IAAMmB,KAAK,GAAG,SAARA,KAAQ,CAACE,GAAD,EAAS;IACrB7C,IAAI,CAAC8C,kBAAD,EAAqBD,GAArB,CAAJ;IACA7C,IAAI,CAAC+C,WAAD,EAAcF,GAAd,CAAJ;EACD,CAHD;;EAIA,IAAMG,UAAU;IAAA,sEAAG;MAAA;QAAA;UAAA;YAAA;cAAA;cAAA,OACXC,QAAQ,EADG;;YAAA;cAEjBjD,IAAI,CAACkD,YAAD,EAAepD,KAAK,CAACyB,KAAN,GAAc,CAACR,QAAQ,CAACS,KAAV,EAAiBJ,QAAQ,CAACI,KAA1B,CAAd,GAAiD1B,KAAK,CAACqD,UAAtE,CAAJ;;YAFiB;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAAVH,UAAU;MAAA;IAAA;EAAA,GAAhB;;EAIA,IAAMI,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,KAAD,EAAW;IAC1C,IAAIC,EAAJ,EAAQC,EAAR,EAAYC,EAAZ,EAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB;;IACA,IAAI/C,cAAc,CAACY,KAAf,IAAwBzB,QAAQ,CAAC6D,QAArC,EACE;IACF3B,SAAS;IACT,IAAI4B,UAAU,GAAG,CAAjB;;IACA,IAAI/D,KAAK,CAAC6B,QAAV,EAAoB;MAClB,IAAMmC,OAAO,GAAG,CAACN,EAAE,GAAG,CAACD,EAAE,GAAG,CAACD,EAAE,GAAGD,KAAK,CAACU,OAAZ,KAAwB,IAAxB,GAA+B,KAAK,CAApC,GAAwCT,EAAE,CAACU,IAAH,CAAQ,CAAR,CAA9C,KAA6D,IAA7D,GAAoE,KAAK,CAAzE,GAA6ET,EAAE,CAACO,OAAtF,KAAkG,IAAlG,GAAyGN,EAAzG,GAA8GH,KAAK,CAACS,OAApI;MACA,IAAMG,kBAAkB,GAAG3D,MAAM,CAACkB,KAAP,CAAa0C,qBAAb,GAAqCpC,MAAhE;MACA+B,UAAU,GAAG,CAACI,kBAAkB,GAAGH,OAAtB,IAAiC/D,QAAQ,CAACmC,UAA1C,GAAuD,GAApE;IACD,CAJD,MAIO;MACL,IAAMiC,OAAO,GAAG,CAACR,EAAE,GAAG,CAACD,EAAE,GAAG,CAACD,EAAE,GAAGJ,KAAK,CAACU,OAAZ,KAAwB,IAAxB,GAA+B,KAAK,CAApC,GAAwCN,EAAE,CAACO,IAAH,CAAQ,CAAR,CAA9C,KAA6D,IAA7D,GAAoE,KAAK,CAAzE,GAA6EN,EAAE,CAACS,OAAtF,KAAkG,IAAlG,GAAyGR,EAAzG,GAA8GN,KAAK,CAACc,OAApI;MACA,IAAMC,gBAAgB,GAAG9D,MAAM,CAACkB,KAAP,CAAa0C,qBAAb,GAAqClC,IAA9D;MACA6B,UAAU,GAAG,CAACM,OAAO,GAAGC,gBAAX,IAA+BrE,QAAQ,CAACmC,UAAxC,GAAqD,GAAlE;IACD;;IACD,IAAI2B,UAAU,GAAG,CAAb,IAAkBA,UAAU,GAAG,GAAnC,EACE;IACF,OAAOrB,WAAW,CAACqB,UAAD,CAAlB;EACD,CAlBD;;EAmBA,IAAMQ,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAChB,KAAD,EAAW;IACxC,IAAIC,EAAJ,EAAQC,EAAR;;IACA,IAAI,CAAC,CAACD,EAAE,GAAG3C,UAAU,CAAC,aAAD,CAAV,CAA0Ba,KAAhC,KAA0C,IAA1C,GAAiD,KAAK,CAAtD,GAA0D8B,EAAE,CAACM,QAA9D,MAA4E,CAACL,EAAE,GAAG5C,UAAU,CAAC,cAAD,CAAV,CAA2Ba,KAAjC,KAA2C,IAA3C,GAAkD,KAAK,CAAvD,GAA2D+B,EAAE,CAACK,QAA1I,CAAJ,EAAyJ;MACvJP,KAAK,CAACiB,cAAN;IACD;EACF,CALD;;EAMA,IAAMC,YAAY;IAAA,uEAAG,kBAAOlB,KAAP;MAAA;MAAA;QAAA;UAAA;YAAA;cACbZ,SADa,GACDW,wBAAwB,CAACC,KAAD,CADvB;;cAAA,KAEfZ,SAFe;gBAAA;gBAAA;cAAA;;cAAA;cAAA,OAGXQ,QAAQ,EAHG;;YAAA;cAIjBR,SAAS,CAACjB,KAAV,CAAgBgD,YAAhB,CAA6BnB,KAA7B;;YAJiB;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAAH;;IAAA,gBAAZkB,YAAY;MAAA;IAAA;EAAA,GAAlB;;EAOA,IAAME,aAAa,GAAG,SAAhBA,aAAgB,CAACpB,KAAD,EAAW;IAC/B,IAAMZ,SAAS,GAAGW,wBAAwB,CAACC,KAAD,CAA1C;;IACA,IAAIZ,SAAJ,EAAe;MACbO,UAAU;IACX;EACF,CALD;;EAMA,OAAO;IACL5C,UAAU,EAAVA,UADK;IAELE,MAAM,EAANA,MAFK;IAGLE,WAAW,EAAXA,WAHK;IAILE,YAAY,EAAZA,YAJK;IAKLE,cAAc,EAAdA,cALK;IAMLG,QAAQ,EAARA,QANK;IAOLK,QAAQ,EAARA,QAPK;IAQLM,WAAW,EAAXA,WARK;IASLG,QAAQ,EAARA,QATK;IAULI,SAAS,EAATA,SAVK;IAWLO,WAAW,EAAXA,WAXK;IAYLQ,UAAU,EAAVA,UAZK;IAaLqB,sBAAsB,EAAtBA,sBAbK;IAcLI,aAAa,EAAbA,aAdK;IAeLF,YAAY,EAAZA,YAfK;IAgBL7B,aAAa,EAAbA,aAhBK;IAiBLE,cAAc,EAAdA;EAjBK,CAAP;AAmBF,CAtIY","names":["useSlide","props","initData","emit","useFormItem","elForm","form","elFormItem","formItem","slider","shallowRef","firstButton","ref","secondButton","buttonRefs","sliderDisabled","computed","disabled","minValue","Math","min","firstValue","secondValue","maxValue","max","barSize","range","value","barStart","runwayStyle","vertical","height","barStyle","bottom","width","left","resetSize","sliderSize","getButtonRefByPercent","percent","targetValue","buttonRefName","abs","setPosition","buttonRef","setFirstValue","_emit","setSecondValue","val","UPDATE_MODEL_EVENT","INPUT_EVENT","emitChange","nextTick","CHANGE_EVENT","modelValue","handleSliderPointerEvent","event","_a","_b","_c","_d","_e","_f","dragging","newPercent","clientY","touches","item","sliderOffsetBottom","getBoundingClientRect","clientX","sliderOffsetLeft","onSliderWrapperPrevent","preventDefault","onSliderDown","onButtonDown","onSliderClick"],"sources":["../../../../../../../packages/components/slider/src/composables/use-slide.ts"],"sourcesContent":["import { computed, nextTick, ref, shallowRef } from 'vue'\nimport {\n  CHANGE_EVENT,\n  INPUT_EVENT,\n  UPDATE_MODEL_EVENT,\n} from '@element-plus/constants'\nimport { useFormItem } from '@element-plus/hooks'\nimport type { CSSProperties, Ref, SetupContext } from 'vue'\nimport type { Arrayable } from '@element-plus/utils'\nimport type { SliderEmits, SliderInitData, SliderProps } from '../slider'\nimport type { ButtonRefs, SliderButtonInstance } from '../button'\n\nexport const useSlide = (\n  props: SliderProps,\n  initData: SliderInitData,\n  emit: SetupContext<SliderEmits>['emit']\n) => {\n  const { form: elForm, formItem: elFormItem } = useFormItem()\n\n  const slider = shallowRef<HTMLElement>()\n\n  const firstButton = ref<SliderButtonInstance>()\n\n  const secondButton = ref<SliderButtonInstance>()\n\n  const buttonRefs: ButtonRefs = {\n    firstButton,\n    secondButton,\n  }\n\n  const sliderDisabled = computed(() => {\n    return props.disabled || elForm?.disabled || false\n  })\n\n  const minValue = computed(() => {\n    return Math.min(initData.firstValue, initData.secondValue)\n  })\n\n  const maxValue = computed(() => {\n    return Math.max(initData.firstValue, initData.secondValue)\n  })\n\n  const barSize = computed(() => {\n    return props.range\n      ? `${\n          (100 * (maxValue.value - minValue.value)) / (props.max - props.min)\n        }%`\n      : `${\n          (100 * (initData.firstValue - props.min)) / (props.max - props.min)\n        }%`\n  })\n\n  const barStart = computed(() => {\n    return props.range\n      ? `${(100 * (minValue.value - props.min)) / (props.max - props.min)}%`\n      : '0%'\n  })\n\n  const runwayStyle = computed<CSSProperties>(() => {\n    return props.vertical ? { height: props.height } : {}\n  })\n\n  const barStyle = computed<CSSProperties>(() => {\n    return props.vertical\n      ? {\n          height: barSize.value,\n          bottom: barStart.value,\n        }\n      : {\n          width: barSize.value,\n          left: barStart.value,\n        }\n  })\n\n  const resetSize = () => {\n    if (slider.value) {\n      initData.sliderSize =\n        slider.value[`client${props.vertical ? 'Height' : 'Width'}`]\n    }\n  }\n\n  const getButtonRefByPercent = (\n    percent: number\n  ): Ref<SliderButtonInstance | undefined> => {\n    const targetValue = props.min + (percent * (props.max - props.min)) / 100\n    if (!props.range) {\n      return firstButton\n    }\n    let buttonRefName: 'firstButton' | 'secondButton'\n    if (\n      Math.abs(minValue.value - targetValue) <\n      Math.abs(maxValue.value - targetValue)\n    ) {\n      buttonRefName =\n        initData.firstValue < initData.secondValue\n          ? 'firstButton'\n          : 'secondButton'\n    } else {\n      buttonRefName =\n        initData.firstValue > initData.secondValue\n          ? 'firstButton'\n          : 'secondButton'\n    }\n    return buttonRefs[buttonRefName]\n  }\n\n  const setPosition = (\n    percent: number\n  ): Ref<SliderButtonInstance | undefined> => {\n    const buttonRef = getButtonRefByPercent(percent)\n    buttonRef.value!.setPosition(percent)\n    return buttonRef\n  }\n\n  const setFirstValue = (firstValue: number | undefined) => {\n    initData.firstValue = firstValue!\n    _emit(props.range ? [minValue.value, maxValue.value] : firstValue!)\n  }\n\n  const setSecondValue = (secondValue: number) => {\n    initData.secondValue = secondValue\n\n    if (props.range) {\n      _emit([minValue.value, maxValue.value])\n    }\n  }\n\n  const _emit = (val: Arrayable<number>) => {\n    emit(UPDATE_MODEL_EVENT, val)\n    emit(INPUT_EVENT, val)\n  }\n\n  const emitChange = async () => {\n    await nextTick()\n    emit(\n      CHANGE_EVENT,\n      props.range ? [minValue.value, maxValue.value] : props.modelValue\n    )\n  }\n\n  const handleSliderPointerEvent = (\n    event: MouseEvent | TouchEvent\n  ): Ref<SliderButtonInstance | undefined> | undefined => {\n    if (sliderDisabled.value || initData.dragging) return\n    resetSize()\n    let newPercent = 0\n    if (props.vertical) {\n      const clientY =\n        (event as TouchEvent).touches?.item(0)?.clientY ??\n        (event as MouseEvent).clientY\n      const sliderOffsetBottom = slider.value!.getBoundingClientRect().bottom\n      newPercent = ((sliderOffsetBottom - clientY) / initData.sliderSize) * 100\n    } else {\n      const clientX =\n        (event as TouchEvent).touches?.item(0)?.clientX ??\n        (event as MouseEvent).clientX\n      const sliderOffsetLeft = slider.value!.getBoundingClientRect().left\n      newPercent = ((clientX - sliderOffsetLeft) / initData.sliderSize) * 100\n    }\n    if (newPercent < 0 || newPercent > 100) return\n    return setPosition(newPercent)\n  }\n\n  const onSliderWrapperPrevent = (event: TouchEvent) => {\n    if (\n      buttonRefs['firstButton'].value?.dragging ||\n      buttonRefs['secondButton'].value?.dragging\n    ) {\n      event.preventDefault()\n    }\n  }\n\n  const onSliderDown = async (event: MouseEvent | TouchEvent) => {\n    const buttonRef = handleSliderPointerEvent(event)\n    if (buttonRef) {\n      await nextTick()\n      buttonRef.value!.onButtonDown(event)\n    }\n  }\n\n  const onSliderClick = (event: MouseEvent | TouchEvent) => {\n    const buttonRef = handleSliderPointerEvent(event)\n    if (buttonRef) {\n      emitChange()\n    }\n  }\n\n  return {\n    elFormItem,\n    slider,\n    firstButton,\n    secondButton,\n    sliderDisabled,\n    minValue,\n    maxValue,\n    runwayStyle,\n    barStyle,\n    resetSize,\n    setPosition,\n    emitChange,\n    onSliderWrapperPrevent,\n    onSliderClick,\n    onSliderDown,\n    setFirstValue,\n    setSecondValue,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}