{"ast":null,"code":"import axios from \"axios\"; // console.log(\"in request.js\", process.env.NODE_ENV);\n// console.log(\"in request.js\", process.env.VUE_APP_URL);\n// axios.defaults.baseURL = process.env.NODE_ENV === 'production' ? '' : '/api';  //关键代码\n\nconst BASEURL = process.env.NODE_ENV === \"production\" ? \"/api\" : \"/api\"; // console.log(\"in request.js: BASEURL = \", BASEURL);\n// 创建axios\n\nconst service = axios.create({\n  baseURL: BASEURL,\n  timeout: 1800000\n}); // 请求拦截器： 在浏览器发送请求之前的处理; 用处：对真的发送请求之前可以判断，比如是否合法，是否符合请求参数的要求\n\nservice.interceptors.request.use(function (config) {\n  console.log(\"request.js: request:  config===== \", config);\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n}); // 响应拦截器： 服务器返回数据后处理\n\nservice.interceptors.response.use(function (response) {\n  console.log(\"request.js: response = \", response);\n  let data = response.data;\n\n  if (data.resCode != 0) {\n    // 服务器有响应，但是并不是想要的数据\n    // Message.error(data.message);\n    console.log(\"服务器有响应，但是并不是想要的数据\");\n    return Promise.reject(data.resCode);\n  } else {\n    // 服务器有响应，并且数据正确\n    console.log(\"服务器有响应，并且数据正确\");\n    console.log(\"request.js: data.data = \", data.data);\n    return response;\n  } // return response;\n\n}, function (error) {\n  // 服务器没有响应 404,405\n  return Promise.reject(error);\n}); // 对外暴露接口\n\nexport default service;","map":{"version":3,"names":["axios","BASEURL","process","env","NODE_ENV","service","create","baseURL","timeout","interceptors","request","use","config","console","log","error","Promise","reject","response","data","resCode"],"sources":["/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/src/utils/request.js"],"sourcesContent":["import axios from \"axios\";\n\n// console.log(\"in request.js\", process.env.NODE_ENV);\n\n// console.log(\"in request.js\", process.env.VUE_APP_URL);\n\n// axios.defaults.baseURL = process.env.NODE_ENV === 'production' ? '' : '/api';  //关键代码\nconst BASEURL = process.env.NODE_ENV === \"production\" ? \"/api\" : \"/api\";\n// console.log(\"in request.js: BASEURL = \", BASEURL);\n\n// 创建axios\nconst service = axios.create({\n  baseURL: BASEURL,\n  timeout: 1800000\n});\n\n// 请求拦截器： 在浏览器发送请求之前的处理; 用处：对真的发送请求之前可以判断，比如是否合法，是否符合请求参数的要求\nservice.interceptors.request.use(\n  function(config) {\n    console.log(\"request.js: request:  config===== \", config);\n    return config;\n  },\n  function(error) {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器： 服务器返回数据后处理\nservice.interceptors.response.use(\n  function(response) {\n    console.log(\"request.js: response = \", response);\n    let data = response.data;\n    if (data.resCode != 0) {\n      // 服务器有响应，但是并不是想要的数据\n      // Message.error(data.message);\n      console.log(\"服务器有响应，但是并不是想要的数据\");\n      return Promise.reject(data.resCode);\n    } else {\n      // 服务器有响应，并且数据正确\n      console.log(\"服务器有响应，并且数据正确\");\n      console.log(\"request.js: data.data = \", data.data);\n      return response;\n    }\n\n    // return response;\n  },\n  function(error) {\n    // 服务器没有响应 404,405\n    return Promise.reject(error);\n  }\n);\n\n// 对外暴露接口\nexport default service;"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AAEA;AAEA;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwC,MAAxC,GAAiD,MAAjE,C,CACA;AAEA;;AACA,MAAMC,OAAO,GAAGL,KAAK,CAACM,MAAN,CAAa;EAC3BC,OAAO,EAAEN,OADkB;EAE3BO,OAAO,EAAE;AAFkB,CAAb,CAAhB,C,CAKA;;AACAH,OAAO,CAACI,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CACE,UAASC,MAAT,EAAiB;EACfC,OAAO,CAACC,GAAR,CAAY,oCAAZ,EAAkDF,MAAlD;EACA,OAAOA,MAAP;AACD,CAJH,EAKE,UAASG,KAAT,EAAgB;EACd,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CAPH,E,CAUA;;AACAV,OAAO,CAACI,YAAR,CAAqBS,QAArB,CAA8BP,GAA9B,CACE,UAASO,QAAT,EAAmB;EACjBL,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCI,QAAvC;EACA,IAAIC,IAAI,GAAGD,QAAQ,CAACC,IAApB;;EACA,IAAIA,IAAI,CAACC,OAAL,IAAgB,CAApB,EAAuB;IACrB;IACA;IACAP,OAAO,CAACC,GAAR,CAAY,mBAAZ;IACA,OAAOE,OAAO,CAACC,MAAR,CAAeE,IAAI,CAACC,OAApB,CAAP;EACD,CALD,MAKO;IACL;IACAP,OAAO,CAACC,GAAR,CAAY,eAAZ;IACAD,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCK,IAAI,CAACA,IAA7C;IACA,OAAOD,QAAP;EACD,CAbgB,CAejB;;AACD,CAjBH,EAkBE,UAASH,KAAT,EAAgB;EACd;EACA,OAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CArBH,E,CAwBA;;AACA,eAAeV,OAAf"},"metadata":{},"sourceType":"module"}