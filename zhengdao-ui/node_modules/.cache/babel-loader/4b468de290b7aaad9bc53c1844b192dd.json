{"ast":null,"code":"import _regeneratorRuntime from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport { defineComponent, ref, computed, watch, nextTick, openBlock, createElementBlock, unref, normalizeClass, createElementVNode, Fragment, renderList, withKeys, withModifiers, toDisplayString } from 'vue';\nimport dayjs from 'dayjs';\nimport '../../../../hooks/index.mjs';\nimport '../../../time-picker/index.mjs';\nimport '../../../../utils/index.mjs';\nimport { basicMonthTableProps } from '../props/basic-month-table.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { rangeArr } from '../../../time-picker/src/utils.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../../hooks/use-locale/index.mjs';\nimport { castArray } from '../../../../utils/arrays.mjs';\nimport { hasClass } from '../../../../utils/dom/style.mjs';\nvar _hoisted_1 = [\"aria-label\"];\nvar _hoisted_2 = [\"aria-selected\", \"aria-label\", \"tabindex\", \"onKeydown\"];\nvar _hoisted_3 = {\n  \"class\": \"cell\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"basic-month-table\",\n  props: basicMonthTableProps,\n  emits: [\"changerange\", \"pick\", \"select\"],\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n        emit = _ref.emit;\n    var props = __props;\n\n    var datesInMonth = function datesInMonth(year, month, lang2) {\n      var firstDay = dayjs().locale(lang2).startOf(\"month\").month(month).year(year);\n      var numOfDays = firstDay.daysInMonth();\n      return rangeArr(numOfDays).map(function (n) {\n        return firstDay.add(n, \"day\").toDate();\n      });\n    };\n\n    var ns = useNamespace(\"month-table\");\n\n    var _useLocale = useLocale(),\n        t = _useLocale.t,\n        lang = _useLocale.lang;\n\n    var tbodyRef = ref();\n    var currentCellRef = ref();\n    var months = ref(props.date.locale(\"en\").localeData().monthsShort().map(function (_) {\n      return _.toLowerCase();\n    }));\n    var tableRows = ref([[], [], []]);\n    var lastRow = ref();\n    var lastColumn = ref();\n    var rows = computed(function () {\n      var _a, _b;\n\n      var rows2 = tableRows.value;\n      var now = dayjs().locale(lang.value).startOf(\"month\");\n\n      for (var i = 0; i < 3; i++) {\n        var row = rows2[i];\n\n        for (var j = 0; j < 4; j++) {\n          var cell = row[j] || (row[j] = {\n            row: i,\n            column: j,\n            type: \"normal\",\n            inRange: false,\n            start: false,\n            end: false,\n            text: -1,\n            disabled: false\n          });\n          cell.type = \"normal\";\n          var index = i * 4 + j;\n          var calTime = props.date.startOf(\"year\").month(index);\n          var calEndDate = props.rangeState.endDate || props.maxDate || props.rangeState.selecting && props.minDate || null;\n          cell.inRange = !!(props.minDate && calTime.isSameOrAfter(props.minDate, \"month\") && calEndDate && calTime.isSameOrBefore(calEndDate, \"month\")) || !!(props.minDate && calTime.isSameOrBefore(props.minDate, \"month\") && calEndDate && calTime.isSameOrAfter(calEndDate, \"month\"));\n\n          if ((_a = props.minDate) == null ? void 0 : _a.isSameOrAfter(calEndDate)) {\n            cell.start = !!(calEndDate && calTime.isSame(calEndDate, \"month\"));\n            cell.end = props.minDate && calTime.isSame(props.minDate, \"month\");\n          } else {\n            cell.start = !!(props.minDate && calTime.isSame(props.minDate, \"month\"));\n            cell.end = !!(calEndDate && calTime.isSame(calEndDate, \"month\"));\n          }\n\n          var isToday = now.isSame(calTime);\n\n          if (isToday) {\n            cell.type = \"today\";\n          }\n\n          cell.text = index;\n          cell.disabled = ((_b = props.disabledDate) == null ? void 0 : _b.call(props, calTime.toDate())) || false;\n        }\n      }\n\n      return rows2;\n    });\n\n    var focus = function focus() {\n      var _a;\n\n      (_a = currentCellRef.value) == null ? void 0 : _a.focus();\n    };\n\n    var getCellStyle = function getCellStyle(cell) {\n      var style = {};\n      var year = props.date.year();\n      var today = new Date();\n      var month = cell.text;\n      style.disabled = props.disabledDate ? datesInMonth(year, month, lang.value).every(props.disabledDate) : false;\n      style.current = castArray(props.parsedValue).findIndex(function (date) {\n        return dayjs.isDayjs(date) && date.year() === year && date.month() === month;\n      }) >= 0;\n      style.today = today.getFullYear() === year && today.getMonth() === month;\n\n      if (cell.inRange) {\n        style[\"in-range\"] = true;\n\n        if (cell.start) {\n          style[\"start-date\"] = true;\n        }\n\n        if (cell.end) {\n          style[\"end-date\"] = true;\n        }\n      }\n\n      return style;\n    };\n\n    var isSelectedCell = function isSelectedCell(cell) {\n      var year = props.date.year();\n      var month = cell.text;\n      return castArray(props.date).findIndex(function (date) {\n        return date.year() === year && date.month() === month;\n      }) >= 0;\n    };\n\n    var handleMouseMove = function handleMouseMove(event) {\n      var _a;\n\n      if (!props.rangeState.selecting) return;\n      var target = event.target;\n\n      if (target.tagName === \"A\") {\n        target = (_a = target.parentNode) == null ? void 0 : _a.parentNode;\n      }\n\n      if (target.tagName === \"DIV\") {\n        target = target.parentNode;\n      }\n\n      if (target.tagName !== \"TD\") return;\n      var row = target.parentNode.rowIndex;\n      var column = target.cellIndex;\n      if (rows.value[row][column].disabled) return;\n\n      if (row !== lastRow.value || column !== lastColumn.value) {\n        lastRow.value = row;\n        lastColumn.value = column;\n        emit(\"changerange\", {\n          selecting: true,\n          endDate: props.date.startOf(\"year\").month(row * 4 + column)\n        });\n      }\n    };\n\n    var handleMonthTableClick = function handleMonthTableClick(event) {\n      var _a;\n\n      var target = (_a = event.target) == null ? void 0 : _a.closest(\"td\");\n      if ((target == null ? void 0 : target.tagName) !== \"TD\") return;\n      if (hasClass(target, \"disabled\")) return;\n      var column = target.cellIndex;\n      var row = target.parentNode.rowIndex;\n      var month = row * 4 + column;\n      var newDate = props.date.startOf(\"year\").month(month);\n\n      if (props.selectionMode === \"range\") {\n        if (!props.rangeState.selecting) {\n          emit(\"pick\", {\n            minDate: newDate,\n            maxDate: null\n          });\n          emit(\"select\", true);\n        } else {\n          if (props.minDate && newDate >= props.minDate) {\n            emit(\"pick\", {\n              minDate: props.minDate,\n              maxDate: newDate\n            });\n          } else {\n            emit(\"pick\", {\n              minDate: newDate,\n              maxDate: props.minDate\n            });\n          }\n\n          emit(\"select\", false);\n        }\n      } else {\n        emit(\"pick\", month);\n      }\n    };\n\n    watch(function () {\n      return props.date;\n    }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var _a, _b;\n\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!((_a = tbodyRef.value) == null ? void 0 : _a.contains(document.activeElement))) {\n                _context.next = 4;\n                break;\n              }\n\n              _context.next = 3;\n              return nextTick();\n\n            case 3:\n              (_b = currentCellRef.value) == null ? void 0 : _b.focus();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n    expose({\n      focus: focus\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"table\", {\n        role: \"grid\",\n        \"aria-label\": unref(t)(\"el.datepicker.monthTablePrompt\"),\n        \"class\": normalizeClass(unref(ns).b()),\n        onClick: handleMonthTableClick,\n        onMousemove: handleMouseMove\n      }, [createElementVNode(\"tbody\", {\n        ref_key: \"tbodyRef\",\n        ref: tbodyRef\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(rows), function (row, key) {\n        return openBlock(), createElementBlock(\"tr\", {\n          key: key\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(row, function (cell, key_) {\n          return openBlock(), createElementBlock(\"td\", {\n            key: key_,\n            ref_for: true,\n            ref: function ref(el) {\n              return isSelectedCell(cell) && (currentCellRef.value = el);\n            },\n            \"class\": normalizeClass(getCellStyle(cell)),\n            \"aria-selected\": \"\".concat(isSelectedCell(cell)),\n            \"aria-label\": unref(t)(\"el.datepicker.month\".concat(+cell.text + 1)),\n            tabindex: isSelectedCell(cell) ? 0 : -1,\n            onKeydown: [withKeys(withModifiers(handleMonthTableClick, [\"prevent\", \"stop\"]), [\"space\"]), withKeys(withModifiers(handleMonthTableClick, [\"prevent\", \"stop\"]), [\"enter\"])]\n          }, [createElementVNode(\"div\", null, [createElementVNode(\"span\", _hoisted_3, toDisplayString(unref(t)(\"el.datepicker.months.\" + months.value[cell.text])), 1)])], 42, _hoisted_2);\n        }), 128))]);\n      }), 128))], 512)], 42, _hoisted_1);\n    };\n  }\n});\n\nvar MonthTable = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/date-picker/src/date-picker-com/basic-month-table.vue\"]]);\n\nexport { MonthTable as default };","map":{"version":3,"mappings":"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","names":["datesInMonth","year","month","lang2","firstDay","locale","startOf","daysInMonth","rangeArr","map","n","toDate","useNamespace","useLocale","t","lang","tbodyRef","ref","currentCellRef","months","date","localeData","monthsShort","_","tableRows","lastRow","lastColumn","computed","_b","dayjs","i","rows2","j","cell","row","column","type","inRange","start","end","text","disabled","index","calEndDate","props","rangeState","endDate","selecting","calTime","isSameOrAfter","minDate","_a","isToday","value","getCellStyle","today","style","every","castArray","isSelectedCell","findIndex","tagName","target","emit","rowIndex","maxDate","watch","nextTick"],"sources":["../../../../../../../packages/components/date-picker/src/date-picker-com/basic-month-table.vue"],"sourcesContent":["<template>\n  <table\n    role=\"grid\"\n    :aria-label=\"t('el.datepicker.monthTablePrompt')\"\n    :class=\"ns.b()\"\n    @click=\"handleMonthTableClick\"\n    @mousemove=\"handleMouseMove\"\n  >\n    <tbody ref=\"tbodyRef\">\n      <tr v-for=\"(row, key) in rows\" :key=\"key\">\n        <td\n          v-for=\"(cell, key_) in row\"\n          :key=\"key_\"\n          :ref=\"(el) => isSelectedCell(cell) && (currentCellRef = el as HTMLElement)\"\n          :class=\"getCellStyle(cell)\"\n          :aria-selected=\"`${isSelectedCell(cell)}`\"\n          :aria-label=\"t(`el.datepicker.month${+cell.text + 1}`)\"\n          :tabindex=\"isSelectedCell(cell) ? 0 : -1\"\n          @keydown.space.prevent.stop=\"handleMonthTableClick\"\n          @keydown.enter.prevent.stop=\"handleMonthTableClick\"\n        >\n          <div>\n            <span class=\"cell\">\n              {{ t('el.datepicker.months.' + months[cell.text]) }}\n            </span>\n          </div>\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, nextTick, ref, watch } from 'vue'\nimport dayjs from 'dayjs'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { rangeArr } from '@element-plus/components/time-picker'\nimport { castArray, hasClass } from '@element-plus/utils'\nimport { basicMonthTableProps } from '../props/basic-month-table'\n\ntype MonthCell = {\n  column: number\n  row: number\n  disabled: boolean\n  start: boolean\n  end: boolean\n  text: number\n  type: 'normal' | 'today'\n  inRange: boolean\n}\n\nconst datesInMonth = (year: number, month: number, lang: string) => {\n  const firstDay = dayjs().locale(lang).startOf('month').month(month).year(year)\n  const numOfDays = firstDay.daysInMonth()\n  return rangeArr(numOfDays).map((n) => firstDay.add(n, 'day').toDate())\n}\n\nconst props = defineProps(basicMonthTableProps)\nconst emit = defineEmits(['changerange', 'pick', 'select'])\n\nconst ns = useNamespace('month-table')\n\nconst { t, lang } = useLocale()\nconst tbodyRef = ref<HTMLElement>()\nconst currentCellRef = ref<HTMLElement>()\nconst months = ref(\n  props.date\n    .locale('en')\n    .localeData()\n    .monthsShort()\n    .map((_) => _.toLowerCase())\n)\nconst tableRows = ref<MonthCell[][]>([\n  [] as MonthCell[],\n  [] as MonthCell[],\n  [] as MonthCell[],\n])\nconst lastRow = ref<number>()\nconst lastColumn = ref<number>()\nconst rows = computed<MonthCell[][]>(() => {\n  const rows = tableRows.value\n\n  const now = dayjs().locale(lang.value).startOf('month')\n\n  for (let i = 0; i < 3; i++) {\n    const row = rows[i]\n    for (let j = 0; j < 4; j++) {\n      const cell = (row[j] ||= {\n        row: i,\n        column: j,\n        type: 'normal',\n        inRange: false,\n        start: false,\n        end: false,\n        text: -1,\n        disabled: false,\n      })\n\n      cell.type = 'normal'\n\n      const index = i * 4 + j\n      const calTime = props.date.startOf('year').month(index)\n\n      const calEndDate =\n        props.rangeState.endDate ||\n        props.maxDate ||\n        (props.rangeState.selecting && props.minDate) ||\n        null\n\n      cell.inRange =\n        !!(\n          props.minDate &&\n          calTime.isSameOrAfter(props.minDate, 'month') &&\n          calEndDate &&\n          calTime.isSameOrBefore(calEndDate, 'month')\n        ) ||\n        !!(\n          props.minDate &&\n          calTime.isSameOrBefore(props.minDate, 'month') &&\n          calEndDate &&\n          calTime.isSameOrAfter(calEndDate, 'month')\n        )\n\n      if (props.minDate?.isSameOrAfter(calEndDate)) {\n        cell.start = !!(calEndDate && calTime.isSame(calEndDate, 'month'))\n        cell.end = props.minDate && calTime.isSame(props.minDate, 'month')\n      } else {\n        cell.start = !!(props.minDate && calTime.isSame(props.minDate, 'month'))\n        cell.end = !!(calEndDate && calTime.isSame(calEndDate, 'month'))\n      }\n\n      const isToday = now.isSame(calTime)\n      if (isToday) {\n        cell.type = 'today'\n      }\n\n      cell.text = index\n      cell.disabled = props.disabledDate?.(calTime.toDate()) || false\n    }\n  }\n  return rows\n})\n\nconst focus = () => {\n  currentCellRef.value?.focus()\n}\n\nconst getCellStyle = (cell: MonthCell) => {\n  const style = {} as any\n  const year = props.date.year()\n  const today = new Date()\n  const month = cell.text\n\n  style.disabled = props.disabledDate\n    ? datesInMonth(year, month, lang.value).every(props.disabledDate)\n    : false\n  style.current =\n    castArray(props.parsedValue).findIndex(\n      (date) =>\n        dayjs.isDayjs(date) && date.year() === year && date.month() === month\n    ) >= 0\n  style.today = today.getFullYear() === year && today.getMonth() === month\n\n  if (cell.inRange) {\n    style['in-range'] = true\n\n    if (cell.start) {\n      style['start-date'] = true\n    }\n\n    if (cell.end) {\n      style['end-date'] = true\n    }\n  }\n  return style\n}\n\nconst isSelectedCell = (cell: MonthCell) => {\n  const year = props.date.year()\n  const month = cell.text\n  return (\n    castArray(props.date).findIndex(\n      (date) => date.year() === year && date.month() === month\n    ) >= 0\n  )\n}\n\nconst handleMouseMove = (event: MouseEvent) => {\n  if (!props.rangeState.selecting) return\n\n  let target = event.target as HTMLElement\n  if (target.tagName === 'A') {\n    target = target.parentNode?.parentNode as HTMLElement\n  }\n  if (target.tagName === 'DIV') {\n    target = target.parentNode as HTMLElement\n  }\n  if (target.tagName !== 'TD') return\n\n  const row = (target.parentNode as HTMLTableRowElement).rowIndex\n  const column = (target as HTMLTableCellElement).cellIndex\n  // can not select disabled date\n  if (rows.value[row][column].disabled) return\n\n  // only update rangeState when mouse moves to a new cell\n  // this avoids frequent Date object creation and improves performance\n  if (row !== lastRow.value || column !== lastColumn.value) {\n    lastRow.value = row\n    lastColumn.value = column\n    emit('changerange', {\n      selecting: true,\n      endDate: props.date.startOf('year').month(row * 4 + column),\n    })\n  }\n}\nconst handleMonthTableClick = (event: MouseEvent | KeyboardEvent) => {\n  const target = (event.target as HTMLElement)?.closest(\n    'td'\n  ) as HTMLTableCellElement\n  if (target?.tagName !== 'TD') return\n  if (hasClass(target, 'disabled')) return\n  const column = target.cellIndex\n  const row = (target.parentNode as HTMLTableRowElement).rowIndex\n  const month = row * 4 + column\n  const newDate = props.date.startOf('year').month(month)\n  if (props.selectionMode === 'range') {\n    if (!props.rangeState.selecting) {\n      emit('pick', { minDate: newDate, maxDate: null })\n      emit('select', true)\n    } else {\n      if (props.minDate && newDate >= props.minDate) {\n        emit('pick', { minDate: props.minDate, maxDate: newDate })\n      } else {\n        emit('pick', { minDate: newDate, maxDate: props.minDate })\n      }\n      emit('select', false)\n    }\n  } else {\n    emit('pick', month)\n  }\n}\n\nwatch(\n  () => props.date,\n  async () => {\n    if (tbodyRef.value?.contains(document.activeElement)) {\n      await nextTick()\n      currentCellRef.value?.focus()\n    }\n  }\n)\n\ndefineExpose({\n  /**\n   * @description focus current cell\n   */\n  focus,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}