{"ast":null,"code":"import _defineProperty from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nvar _transferEmits;\n\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport { isNil } from 'lodash-unified';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props/runtime.mjs';\nimport { mutable } from '../../../utils/typescript.mjs';\nimport { isArray } from '@vue/shared';\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nvar LEFT_CHECK_CHANGE_EVENT = \"left-check-change\";\nvar RIGHT_CHECK_CHANGE_EVENT = \"right-check-change\";\nvar transferProps = buildProps({\n  data: {\n    type: definePropType(Array),\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  titles: {\n    type: definePropType(Array),\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  buttonTexts: {\n    type: definePropType(Array),\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  filterPlaceholder: String,\n  filterMethod: {\n    type: definePropType(Function)\n  },\n  leftDefaultChecked: {\n    type: definePropType(Array),\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  rightDefaultChecked: {\n    type: definePropType(Array),\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  renderContent: {\n    type: definePropType(Function)\n  },\n  modelValue: {\n    type: definePropType(Array),\n    \"default\": function _default() {\n      return [];\n    }\n  },\n  format: {\n    type: definePropType(Object),\n    \"default\": function _default() {\n      return {};\n    }\n  },\n  filterable: Boolean,\n  props: {\n    type: definePropType(Object),\n    \"default\": function _default() {\n      return mutable({\n        label: \"label\",\n        key: \"key\",\n        disabled: \"disabled\"\n      });\n    }\n  },\n  targetOrder: {\n    type: String,\n    values: [\"original\", \"push\", \"unshift\"],\n    \"default\": \"original\"\n  },\n  validateEvent: {\n    type: Boolean,\n    \"default\": true\n  }\n});\n\nvar transferCheckedChangeFn = function transferCheckedChangeFn(value, movedKeys) {\n  return [value, movedKeys].every(isArray) || isArray(value) && isNil(movedKeys);\n};\n\nvar transferEmits = (_transferEmits = {}, _defineProperty(_transferEmits, CHANGE_EVENT, function (value, direction, movedKeys) {\n  return [value, movedKeys].every(isArray) && [\"left\", \"right\"].includes(direction);\n}), _defineProperty(_transferEmits, UPDATE_MODEL_EVENT, function (value) {\n  return isArray(value);\n}), _defineProperty(_transferEmits, LEFT_CHECK_CHANGE_EVENT, transferCheckedChangeFn), _defineProperty(_transferEmits, RIGHT_CHECK_CHANGE_EVENT, transferCheckedChangeFn), _transferEmits);\nexport { LEFT_CHECK_CHANGE_EVENT, RIGHT_CHECK_CHANGE_EVENT, transferCheckedChangeFn, transferEmits, transferProps };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAQY,IAACA,uBAAuB,GAAG,mBAA3B;AACA,IAACC,wBAAwB,GAAG,oBAA5B;AACA,IAACC,aAAa,GAAGC,UAAU,CAAC;EACtCC,IAAI,EAAE;IACJC,IAAI,EAAEC,cAAc,CAACC,KAAD,CADhB;IAEJ,WAAS;MAAA,OAAM,EAAN;IAAA;EAFL,CADgC;EAKtCC,MAAM,EAAE;IACNH,IAAI,EAAEC,cAAc,CAACC,KAAD,CADd;IAEN,WAAS;MAAA,OAAM,EAAN;IAAA;EAFH,CAL8B;EAStCE,WAAW,EAAE;IACXJ,IAAI,EAAEC,cAAc,CAACC,KAAD,CADT;IAEX,WAAS;MAAA,OAAM,EAAN;IAAA;EAFE,CATyB;EAatCG,iBAAiB,EAAEC,MAbmB;EActCC,YAAY,EAAE;IACZP,IAAI,EAAEC,cAAc,CAACO,QAAD;EADR,CAdwB;EAiBtCC,kBAAkB,EAAE;IAClBT,IAAI,EAAEC,cAAc,CAACC,KAAD,CADF;IAElB,WAAS;MAAA,OAAM,EAAN;IAAA;EAFS,CAjBkB;EAqBtCQ,mBAAmB,EAAE;IACnBV,IAAI,EAAEC,cAAc,CAACC,KAAD,CADD;IAEnB,WAAS;MAAA,OAAM,EAAN;IAAA;EAFU,CArBiB;EAyBtCS,aAAa,EAAE;IACbX,IAAI,EAAEC,cAAc,CAACO,QAAD;EADP,CAzBuB;EA4BtCI,UAAU,EAAE;IACVZ,IAAI,EAAEC,cAAc,CAACC,KAAD,CADV;IAEV,WAAS;MAAA,OAAM,EAAN;IAAA;EAFC,CA5B0B;EAgCtCW,MAAM,EAAE;IACNb,IAAI,EAAEC,cAAc,CAACa,MAAD,CADd;IAEN,WAAS;MAAA,OAAO,EAAP;IAAA;EAFH,CAhC8B;EAoCtCC,UAAU,EAAEC,OApC0B;EAqCtCC,KAAK,EAAE;IACLjB,IAAI,EAAEC,cAAc,CAACa,MAAD,CADf;IAEL,WAAS;MAAA,OAAMI,OAAO,CAAC;QACrBC,KAAK,EAAE,OADc;QAErBC,GAAG,EAAE,KAFgB;QAGrBC,QAAQ,EAAE;MAHW,CAAD,CAAb;IAAA;EAFJ,CArC+B;EA6CtCC,WAAW,EAAE;IACXtB,IAAI,EAAEM,MADK;IAEXiB,MAAM,EAAE,CAAC,UAAD,EAAa,MAAb,EAAqB,SAArB,CAFG;IAGX,WAAS;EAHE,CA7CyB;EAkDtCC,aAAa,EAAE;IACbxB,IAAI,EAAEgB,OADO;IAEb,WAAS;EAFI;AAlDuB,CAAD,CAA3B;;AAuDA,IAACS,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,KAAD,EAAQC,SAAR;EAAA,OAAsB,CAACD,KAAD,EAAQC,SAAR,EAAmBC,KAAnB,CAAyBC,OAAzB,KAAqCA,OAAO,CAACH,KAAD,CAAP,IAAkBI,KAAK,CAACH,SAAD,CAAlF;AAAA,CAA3B;;AACA,IAACI,aAAa,yDACvBC,YADuB,EACR,UAACN,KAAD,EAAQO,SAAR,EAAmBN,SAAnB;EAAA,OAAiC,CAACD,KAAD,EAAQC,SAAR,EAAmBC,KAAnB,CAAyBC,OAAzB,KAAqC,CAAC,MAAD,EAAS,OAAT,EAAkBK,QAAlB,CAA2BD,SAA3B,CAAtE;AAAA,CADQ,mCAEvBE,kBAFuB,EAEF,UAACT,KAAD;EAAA,OAAWG,OAAO,CAACH,KAAD,CAAlB;AAAA,CAFE,mCAGvB/B,uBAHuB,EAGG8B,uBAHH,mCAIvB7B,wBAJuB,EAII6B,uBAJJ,kBAAd","names":["LEFT_CHECK_CHANGE_EVENT","RIGHT_CHECK_CHANGE_EVENT","transferProps","buildProps","data","type","definePropType","Array","titles","buttonTexts","filterPlaceholder","String","filterMethod","Function","leftDefaultChecked","rightDefaultChecked","renderContent","modelValue","format","Object","filterable","Boolean","props","mutable","label","key","disabled","targetOrder","values","validateEvent","transferCheckedChangeFn","value","movedKeys","every","isArray","isNil","transferEmits","CHANGE_EVENT","direction","includes","UPDATE_MODEL_EVENT"],"sources":["../../../../../../packages/components/transfer/src/transfer.ts"],"sourcesContent":["import { isNil } from 'lodash-unified'\nimport {\n  buildProps,\n  definePropType,\n  isArray,\n  mutable,\n} from '@element-plus/utils'\nimport { CHANGE_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\n\nimport type { ExtractPropTypes, h as H, VNode } from 'vue'\nimport type Transfer from './transfer.vue'\n\nexport type TransferKey = string | number\nexport type TransferDirection = 'left' | 'right'\n\nexport type TransferDataItem = Record<string, any>\n\nexport type renderContent = (\n  h: typeof H,\n  option: TransferDataItem\n) => VNode | VNode[]\n\nexport interface TransferFormat {\n  noChecked?: string\n  hasChecked?: string\n}\n\nexport interface TransferPropsAlias {\n  label?: string\n  key?: string\n  disabled?: string\n}\n\nexport interface TransferCheckedState {\n  leftChecked: TransferKey[]\n  rightChecked: TransferKey[]\n}\n\nexport const LEFT_CHECK_CHANGE_EVENT = 'left-check-change'\nexport const RIGHT_CHECK_CHANGE_EVENT = 'right-check-change'\n\nexport const transferProps = buildProps({\n  data: {\n    type: definePropType<TransferDataItem[]>(Array),\n    default: () => [],\n  },\n  titles: {\n    type: definePropType<[string, string]>(Array),\n    default: () => [],\n  },\n  buttonTexts: {\n    type: definePropType<[string, string]>(Array),\n    default: () => [],\n  },\n  filterPlaceholder: String,\n  filterMethod: {\n    type: definePropType<(query: string, item: TransferDataItem) => boolean>(\n      Function\n    ),\n  },\n  leftDefaultChecked: {\n    type: definePropType<TransferKey[]>(Array),\n    default: () => [],\n  },\n  rightDefaultChecked: {\n    type: definePropType<TransferKey[]>(Array),\n    default: () => [],\n  },\n  renderContent: {\n    type: definePropType<renderContent>(Function),\n  },\n  modelValue: {\n    type: definePropType<TransferKey[]>(Array),\n    default: () => [],\n  },\n  format: {\n    type: definePropType<TransferFormat>(Object),\n    default: () => ({}),\n  },\n  filterable: Boolean,\n  props: {\n    type: definePropType<TransferPropsAlias>(Object),\n    default: () =>\n      mutable({\n        label: 'label',\n        key: 'key',\n        disabled: 'disabled',\n      } as const),\n  },\n  targetOrder: {\n    type: String,\n    values: ['original', 'push', 'unshift'],\n    default: 'original',\n  },\n  validateEvent: {\n    type: Boolean,\n    default: true,\n  },\n} as const)\nexport type TransferProps = ExtractPropTypes<typeof transferProps>\n\nexport const transferCheckedChangeFn = (\n  value: TransferKey[],\n  movedKeys?: TransferKey[]\n) => [value, movedKeys].every(isArray) || (isArray(value) && isNil(movedKeys))\n\nexport const transferEmits = {\n  [CHANGE_EVENT]: (\n    value: TransferKey[],\n    direction: TransferDirection,\n    movedKeys: TransferKey[]\n  ) =>\n    [value, movedKeys].every(isArray) && ['left', 'right'].includes(direction),\n  [UPDATE_MODEL_EVENT]: (value: TransferKey[]) => isArray(value),\n  [LEFT_CHECK_CHANGE_EVENT]: transferCheckedChangeFn,\n  [RIGHT_CHECK_CHANGE_EVENT]: transferCheckedChangeFn,\n}\nexport type TransferEmits = typeof transferEmits\n\nexport type TransferInstance = InstanceType<typeof Transfer>\n"]},"metadata":{},"sourceType":"module"}