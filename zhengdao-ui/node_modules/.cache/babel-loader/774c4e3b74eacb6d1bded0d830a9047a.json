{"ast":null,"code":"import _slicedToArray from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { defineComponent, ref, computed, openBlock, createElementBlock, normalizeClass, unref, createElementVNode, renderSlot, toDisplayString, createVNode, withCtx, createTextVNode, createCommentVNode, createSlots, normalizeProps, guardReactiveProps, Fragment, renderList, createBlock } from 'vue';\nimport dayjs from 'dayjs';\nimport { ElButtonGroup, ElButton } from '../../button/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport DateTable from './date-table2.mjs';\nimport { calendarProps, calendarEmits } from './calendar.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { INPUT_EVENT, UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nvar __default__ = {\n  name: \"ElCalendar\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: calendarProps,\n  emits: calendarEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n        emit = _ref.emit;\n    var props = __props;\n    var COMPONENT_NAME = \"ElCalendar\";\n    var ns = useNamespace(\"calendar\");\n\n    var _useLocale = useLocale(),\n        t = _useLocale.t,\n        lang = _useLocale.lang;\n\n    var selectedDay = ref();\n    var now = dayjs().locale(lang.value);\n    var realSelectedDay = computed({\n      get: function get() {\n        if (!props.modelValue) return selectedDay.value;\n        return date.value;\n      },\n      set: function set(val) {\n        if (!val) return;\n        selectedDay.value = val;\n        var result = val.toDate();\n        emit(INPUT_EVENT, result);\n        emit(UPDATE_MODEL_EVENT, result);\n      }\n    });\n    var validatedRange = computed(function () {\n      if (!props.range) return [];\n      var rangeArrDayjs = props.range.map(function (_) {\n        return dayjs(_).locale(lang.value);\n      });\n\n      var _rangeArrDayjs = _slicedToArray(rangeArrDayjs, 2),\n          startDayjs = _rangeArrDayjs[0],\n          endDayjs = _rangeArrDayjs[1];\n\n      if (startDayjs.isAfter(endDayjs)) {\n        debugWarn(COMPONENT_NAME, \"end time should be greater than start time\");\n        return [];\n      }\n\n      if (startDayjs.isSame(endDayjs, \"month\")) {\n        return calculateValidatedDateRange(startDayjs, endDayjs);\n      } else {\n        if (startDayjs.add(1, \"month\").month() !== endDayjs.month()) {\n          debugWarn(COMPONENT_NAME, \"start time and end time interval must not exceed two months\");\n          return [];\n        }\n\n        return calculateValidatedDateRange(startDayjs, endDayjs);\n      }\n    });\n    var date = computed(function () {\n      if (!props.modelValue) {\n        if (realSelectedDay.value) {\n          return realSelectedDay.value;\n        } else if (validatedRange.value.length) {\n          return validatedRange.value[0][0];\n        }\n\n        return now;\n      } else {\n        return dayjs(props.modelValue).locale(lang.value);\n      }\n    });\n    var prevMonthDayjs = computed(function () {\n      return date.value.subtract(1, \"month\").date(1);\n    });\n    var nextMonthDayjs = computed(function () {\n      return date.value.add(1, \"month\").date(1);\n    });\n    var prevYearDayjs = computed(function () {\n      return date.value.subtract(1, \"year\").date(1);\n    });\n    var nextYearDayjs = computed(function () {\n      return date.value.add(1, \"year\").date(1);\n    });\n    var i18nDate = computed(function () {\n      var pickedMonth = \"el.datepicker.month\".concat(date.value.format(\"M\"));\n      return \"\".concat(date.value.year(), \" \").concat(t(\"el.datepicker.year\"), \" \").concat(t(pickedMonth));\n    });\n\n    var calculateValidatedDateRange = function calculateValidatedDateRange(startDayjs, endDayjs) {\n      var firstDay = startDayjs.startOf(\"week\");\n      var lastDay = endDayjs.endOf(\"week\");\n      var firstMonth = firstDay.get(\"month\");\n      var lastMonth = lastDay.get(\"month\");\n\n      if (firstMonth === lastMonth) {\n        return [[firstDay, lastDay]];\n      } else if (firstMonth + 1 === lastMonth) {\n        var firstMonthLastDay = firstDay.endOf(\"month\");\n        var lastMonthFirstDay = lastDay.startOf(\"month\");\n        var isSameWeek = firstMonthLastDay.isSame(lastMonthFirstDay, \"week\");\n        var lastMonthStartDay = isSameWeek ? lastMonthFirstDay.add(1, \"week\") : lastMonthFirstDay;\n        return [[firstDay, firstMonthLastDay], [lastMonthStartDay.startOf(\"week\"), lastDay]];\n      } else if (firstMonth + 2 === lastMonth || (firstMonth + 1) % 11 === lastMonth) {\n        var _firstMonthLastDay = firstDay.endOf(\"month\");\n\n        var secondMonthFirstDay = firstDay.add(1, \"month\").startOf(\"month\");\n        var secondMonthStartDay = _firstMonthLastDay.isSame(secondMonthFirstDay, \"week\") ? secondMonthFirstDay.add(1, \"week\") : secondMonthFirstDay;\n        var secondMonthLastDay = secondMonthStartDay.endOf(\"month\");\n\n        var _lastMonthFirstDay = lastDay.startOf(\"month\");\n\n        var _lastMonthStartDay = secondMonthLastDay.isSame(_lastMonthFirstDay, \"week\") ? _lastMonthFirstDay.add(1, \"week\") : _lastMonthFirstDay;\n\n        return [[firstDay, _firstMonthLastDay], [secondMonthStartDay.startOf(\"week\"), secondMonthLastDay], [_lastMonthStartDay.startOf(\"week\"), lastDay]];\n      } else {\n        debugWarn(COMPONENT_NAME, \"start time and end time interval must not exceed two months\");\n        return [];\n      }\n    };\n\n    var pickDay = function pickDay(day) {\n      realSelectedDay.value = day;\n    };\n\n    var selectDate = function selectDate(type) {\n      var day;\n\n      if (type === \"prev-month\") {\n        day = prevMonthDayjs.value;\n      } else if (type === \"next-month\") {\n        day = nextMonthDayjs.value;\n      } else if (type === \"prev-year\") {\n        day = prevYearDayjs.value;\n      } else if (type === \"next-year\") {\n        day = nextYearDayjs.value;\n      } else {\n        day = now;\n      }\n\n      if (day.isSame(date.value, \"day\")) return;\n      pickDay(day);\n    };\n\n    expose({\n      selectedDay: realSelectedDay,\n      pickDay: pickDay,\n      selectDate: selectDate,\n      calculateValidatedDateRange: calculateValidatedDateRange\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        \"class\": normalizeClass(unref(ns).b())\n      }, [createElementVNode(\"div\", {\n        \"class\": normalizeClass(unref(ns).e(\"header\"))\n      }, [renderSlot(_ctx.$slots, \"header\", {\n        date: unref(i18nDate)\n      }, function () {\n        return [createElementVNode(\"div\", {\n          \"class\": normalizeClass(unref(ns).e(\"title\"))\n        }, toDisplayString(unref(i18nDate)), 3), unref(validatedRange).length === 0 ? (openBlock(), createElementBlock(\"div\", {\n          key: 0,\n          \"class\": normalizeClass(unref(ns).e(\"button-group\"))\n        }, [createVNode(unref(ElButtonGroup), null, {\n          \"default\": withCtx(function () {\n            return [createVNode(unref(ElButton), {\n              size: \"small\",\n              onClick: _cache[0] || (_cache[0] = function ($event) {\n                return selectDate(\"prev-month\");\n              })\n            }, {\n              \"default\": withCtx(function () {\n                return [createTextVNode(toDisplayString(unref(t)(\"el.datepicker.prevMonth\")), 1)];\n              }),\n              _: 1\n            }), createVNode(unref(ElButton), {\n              size: \"small\",\n              onClick: _cache[1] || (_cache[1] = function ($event) {\n                return selectDate(\"today\");\n              })\n            }, {\n              \"default\": withCtx(function () {\n                return [createTextVNode(toDisplayString(unref(t)(\"el.datepicker.today\")), 1)];\n              }),\n              _: 1\n            }), createVNode(unref(ElButton), {\n              size: \"small\",\n              onClick: _cache[2] || (_cache[2] = function ($event) {\n                return selectDate(\"next-month\");\n              })\n            }, {\n              \"default\": withCtx(function () {\n                return [createTextVNode(toDisplayString(unref(t)(\"el.datepicker.nextMonth\")), 1)];\n              }),\n              _: 1\n            })];\n          }),\n          _: 1\n        })], 2)) : createCommentVNode(\"v-if\", true)];\n      })], 2), unref(validatedRange).length === 0 ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        \"class\": normalizeClass(unref(ns).e(\"body\"))\n      }, [createVNode(DateTable, {\n        date: unref(date),\n        \"selected-day\": unref(realSelectedDay),\n        onPick: pickDay\n      }, createSlots({\n        _: 2\n      }, [_ctx.$slots.dateCell ? {\n        name: \"dateCell\",\n        fn: withCtx(function (data) {\n          return [renderSlot(_ctx.$slots, \"dateCell\", normalizeProps(guardReactiveProps(data)))];\n        })\n      } : void 0]), 1032, [\"date\", \"selected-day\"])], 2)) : (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        \"class\": normalizeClass(unref(ns).e(\"body\"))\n      }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(validatedRange), function (range_, index) {\n        return openBlock(), createBlock(DateTable, {\n          key: index,\n          date: range_[0],\n          \"selected-day\": unref(realSelectedDay),\n          range: range_,\n          \"hide-header\": index !== 0,\n          onPick: pickDay\n        }, createSlots({\n          _: 2\n        }, [_ctx.$slots.dateCell ? {\n          name: \"dateCell\",\n          fn: withCtx(function (data) {\n            return [renderSlot(_ctx.$slots, \"dateCell\", normalizeProps(guardReactiveProps(data)))];\n          })\n        } : void 0]), 1032, [\"date\", \"selected-day\", \"range\", \"hide-header\"]);\n      }), 128))], 2))], 2);\n    };\n  }\n}));\n\nvar Calendar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/calendar/src/calendar.vue\"]]);\n\nexport { Calendar as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;IA2DA;IASA;;IACA;IAAA;IAAA;;IAEA;IACA;IAEA;MACAA,GADA,iBACA;QACA;QACA;MACA,CAJA;MAKAC,GALA,eAKAC,GALA,EAKA;QACA;QACAC;QACA;QAEAC;QACAA;MACA;IAZA;IAgBA;MACA;MACA;QAAA;MAAA;;MACA;MAAA;MAAA;;MACA;QACAC;QACA;MACA;;MACA;QAEA;MACA,CAHA,MAGA;QAEA;UACAA,UACAC,cADA,EAEA,6DAFA;UAIA;QACA;;QACA;MACA;IACA,CAtBA;IAwBA;MACA;QACA;UACA;QACA,CAFA,MAEA;UACA;QACA;;QACA;MACA,CAPA,MAOA;QACA;MACA;IACA,CAXA;IAYA;MAAA;IAAA;IACA;MAAA;IAAA;IACA;MAAA;IAAA;IACA;MAAA;IAAA;IAEA;MACA;MACA;IACA,CAHA;;IAOA,uEACAC,UADA,EAEAC,QAFA,EAGA;MACA;MACA;MACA;MACA;;MAGA;QACA;MACA,CAFA,MAEA,IAEAC,4BAFA,EAEA;QACA;QACA;QAGA;QACA,kCACA,sCACAC,iBAFA;QAIA,QACA,6BADA,EAEA,4CAFA;MAGA,CAfA,MAeA,IAIAD,gCACA,mCALA,EAMA;QACA;;QACA;QAGA,oDACAE,mBADA,EAEA,MAFA,IAIAA,kCAJA,GAKAA,mBALA;QAOA;;QACA;;QAGA,mDACAD,kBADA,EAEA,MAFA,IAIAA,iCAJA,GAKAA,kBALA;;QAOA,QACA,8BADA,EAEA,yDAFA,EAGA,6CAHA;MAOA,CApCA,MAoCA;QACAL,UACAC,cADA,EAEA,6DAFA;QAIA;MACA;IACA,CAtEA;;IAwEA;MACAM;IACA,CAFA;;IAIA;MACA;;MACA;QACAC;MACA,CAFA,MAEA;QACAA;MACA,CAFA,MAEA;QACAA;MACA,CAFA,MAEA;QACAA;MACA,CAFA,MAEA;QACAA;MACA;;MAEA;MACAC;IACA,CAhBA;;IAkBAC;MAEAZ,4BAFA;MAIAW,gBAJA;MAMAE,sBANA;MAQAC;IARA","names":["get","set","val","selectedDay","emit","debugWarn","COMPONENT_NAME","startDayjs","endDayjs","firstMonth","lastMonthFirstDay","secondMonthFirstDay","realSelectedDay","day","pickDay","expose","selectDate","calculateValidatedDateRange"],"sources":["../../../../../../packages/components/calendar/src/calendar.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\">\n    <div :class=\"ns.e('header')\">\n      <slot name=\"header\" :date=\"i18nDate\">\n        <div :class=\"ns.e('title')\">{{ i18nDate }}</div>\n        <div v-if=\"validatedRange.length === 0\" :class=\"ns.e('button-group')\">\n          <el-button-group>\n            <el-button size=\"small\" @click=\"selectDate('prev-month')\">\n              {{ t('el.datepicker.prevMonth') }}\n            </el-button>\n            <el-button size=\"small\" @click=\"selectDate('today')\">\n              {{ t('el.datepicker.today') }}\n            </el-button>\n            <el-button size=\"small\" @click=\"selectDate('next-month')\">\n              {{ t('el.datepicker.nextMonth') }}\n            </el-button>\n          </el-button-group>\n        </div>\n      </slot>\n    </div>\n    <div v-if=\"validatedRange.length === 0\" :class=\"ns.e('body')\">\n      <date-table :date=\"date\" :selected-day=\"realSelectedDay\" @pick=\"pickDay\">\n        <template v-if=\"$slots.dateCell\" #dateCell=\"data\">\n          <slot name=\"dateCell\" v-bind=\"data\" />\n        </template>\n      </date-table>\n    </div>\n    <div v-else :class=\"ns.e('body')\">\n      <date-table\n        v-for=\"(range_, index) in validatedRange\"\n        :key=\"index\"\n        :date=\"range_[0]\"\n        :selected-day=\"realSelectedDay\"\n        :range=\"range_\"\n        :hide-header=\"index !== 0\"\n        @pick=\"pickDay\"\n      >\n        <template v-if=\"$slots.dateCell\" #dateCell=\"data\">\n          <slot name=\"dateCell\" v-bind=\"data\" />\n        </template>\n      </date-table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport { ElButton, ElButtonGroup } from '@element-plus/components/button'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { debugWarn } from '@element-plus/utils'\nimport { INPUT_EVENT, UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport DateTable from './date-table.vue'\nimport { calendarEmits, calendarProps } from './calendar'\n\nimport type { CalendarDateType } from './calendar'\nimport type { ComputedRef } from 'vue'\nimport type { Dayjs } from 'dayjs'\n\nconst COMPONENT_NAME = 'ElCalendar'\n\ndefineOptions({\n  name: 'ElCalendar',\n})\n\nconst props = defineProps(calendarProps)\nconst emit = defineEmits(calendarEmits)\n\nconst ns = useNamespace('calendar')\nconst { t, lang } = useLocale()\n\nconst selectedDay = ref<Dayjs>()\nconst now = dayjs().locale(lang.value)\n\nconst realSelectedDay = computed<Dayjs | undefined>({\n  get() {\n    if (!props.modelValue) return selectedDay.value\n    return date.value\n  },\n  set(val) {\n    if (!val) return\n    selectedDay.value = val\n    const result = val.toDate()\n\n    emit(INPUT_EVENT, result)\n    emit(UPDATE_MODEL_EVENT, result)\n  },\n})\n\n// if range is valid, we get a two-digit array\nconst validatedRange = computed(() => {\n  if (!props.range) return []\n  const rangeArrDayjs = props.range.map((_) => dayjs(_).locale(lang.value))\n  const [startDayjs, endDayjs] = rangeArrDayjs\n  if (startDayjs.isAfter(endDayjs)) {\n    debugWarn(COMPONENT_NAME, 'end time should be greater than start time')\n    return []\n  }\n  if (startDayjs.isSame(endDayjs, 'month')) {\n    // same month\n    return calculateValidatedDateRange(startDayjs, endDayjs)\n  } else {\n    // two months\n    if (startDayjs.add(1, 'month').month() !== endDayjs.month()) {\n      debugWarn(\n        COMPONENT_NAME,\n        'start time and end time interval must not exceed two months'\n      )\n      return []\n    }\n    return calculateValidatedDateRange(startDayjs, endDayjs)\n  }\n})\n\nconst date: ComputedRef<Dayjs> = computed(() => {\n  if (!props.modelValue) {\n    if (realSelectedDay.value) {\n      return realSelectedDay.value\n    } else if (validatedRange.value.length) {\n      return validatedRange.value[0][0]\n    }\n    return now\n  } else {\n    return dayjs(props.modelValue).locale(lang.value)\n  }\n})\nconst prevMonthDayjs = computed(() => date.value.subtract(1, 'month').date(1))\nconst nextMonthDayjs = computed(() => date.value.add(1, 'month').date(1))\nconst prevYearDayjs = computed(() => date.value.subtract(1, 'year').date(1))\nconst nextYearDayjs = computed(() => date.value.add(1, 'year').date(1))\n\nconst i18nDate = computed(() => {\n  const pickedMonth = `el.datepicker.month${date.value.format('M')}`\n  return `${date.value.year()} ${t('el.datepicker.year')} ${t(pickedMonth)}`\n})\n\n// https://github.com/element-plus/element-plus/issues/3155\n// Calculate the validate date range according to the start and end dates\nconst calculateValidatedDateRange = (\n  startDayjs: Dayjs,\n  endDayjs: Dayjs\n): [Dayjs, Dayjs][] => {\n  const firstDay = startDayjs.startOf('week')\n  const lastDay = endDayjs.endOf('week')\n  const firstMonth = firstDay.get('month')\n  const lastMonth = lastDay.get('month')\n\n  // Current mouth\n  if (firstMonth === lastMonth) {\n    return [[firstDay, lastDay]]\n  }\n  // Two adjacent months\n  else if (firstMonth + 1 === lastMonth) {\n    const firstMonthLastDay = firstDay.endOf('month')\n    const lastMonthFirstDay = lastDay.startOf('month')\n\n    // Whether the last day of the first month and the first day of the last month is in the same week\n    const isSameWeek = firstMonthLastDay.isSame(lastMonthFirstDay, 'week')\n    const lastMonthStartDay = isSameWeek\n      ? lastMonthFirstDay.add(1, 'week')\n      : lastMonthFirstDay\n\n    return [\n      [firstDay, firstMonthLastDay],\n      [lastMonthStartDay.startOf('week'), lastDay],\n    ]\n  }\n  // Three consecutive months (compatible: 2021-01-30 to 2021-02-28)\n  else if (\n    firstMonth + 2 === lastMonth ||\n    (firstMonth + 1) % 11 === lastMonth\n  ) {\n    const firstMonthLastDay = firstDay.endOf('month')\n    const secondMonthFirstDay = firstDay.add(1, 'month').startOf('month')\n\n    // Whether the last day of the first month and the second month is in the same week\n    const secondMonthStartDay = firstMonthLastDay.isSame(\n      secondMonthFirstDay,\n      'week'\n    )\n      ? secondMonthFirstDay.add(1, 'week')\n      : secondMonthFirstDay\n\n    const secondMonthLastDay = secondMonthStartDay.endOf('month')\n    const lastMonthFirstDay = lastDay.startOf('month')\n\n    // Whether the last day of the second month and the last day of the last month is in the same week\n    const lastMonthStartDay = secondMonthLastDay.isSame(\n      lastMonthFirstDay,\n      'week'\n    )\n      ? lastMonthFirstDay.add(1, 'week')\n      : lastMonthFirstDay\n\n    return [\n      [firstDay, firstMonthLastDay],\n      [secondMonthStartDay.startOf('week'), secondMonthLastDay],\n      [lastMonthStartDay.startOf('week'), lastDay],\n    ]\n  }\n  // Other cases\n  else {\n    debugWarn(\n      COMPONENT_NAME,\n      'start time and end time interval must not exceed two months'\n    )\n    return []\n  }\n}\n\nconst pickDay = (day: Dayjs) => {\n  realSelectedDay.value = day\n}\n\nconst selectDate = (type: CalendarDateType) => {\n  let day: Dayjs\n  if (type === 'prev-month') {\n    day = prevMonthDayjs.value\n  } else if (type === 'next-month') {\n    day = nextMonthDayjs.value\n  } else if (type === 'prev-year') {\n    day = prevYearDayjs.value\n  } else if (type === 'next-year') {\n    day = nextYearDayjs.value\n  } else {\n    day = now\n  }\n\n  if (day.isSame(date.value, 'day')) return\n  pickDay(day)\n}\n\ndefineExpose({\n  /** @description currently selected date */\n  selectedDay: realSelectedDay,\n  /** @description select a specific date */\n  pickDay,\n  /** @description select date */\n  selectDate,\n  /** @description Calculate the validate date range according to the start and end dates */\n  calculateValidatedDateRange,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}