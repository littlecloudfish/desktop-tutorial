{"ast":null,"code":"import _classCallCheck from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { ref, isRef, nextTick } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport { parseHeight } from './util.mjs';\nimport { hasOwn } from '@vue/shared';\n\nvar TableLayout = /*#__PURE__*/function () {\n  function TableLayout(options) {\n    _classCallCheck(this, TableLayout);\n\n    this.observers = [];\n    this.table = null;\n    this.store = null;\n    this.columns = [];\n    this.fit = true;\n    this.showHeader = true;\n    this.height = ref(null);\n    this.scrollX = ref(false);\n    this.scrollY = ref(false);\n    this.bodyWidth = ref(null);\n    this.fixedWidth = ref(null);\n    this.rightFixedWidth = ref(null);\n    this.gutterWidth = 0;\n\n    for (var name in options) {\n      if (hasOwn(options, name)) {\n        if (isRef(this[name])) {\n          this[name].value = options[name];\n        } else {\n          this[name] = options[name];\n        }\n      }\n    }\n\n    if (!this.table) {\n      throw new Error(\"Table is required for Table Layout\");\n    }\n\n    if (!this.store) {\n      throw new Error(\"Store is required for Table Layout\");\n    }\n  }\n\n  _createClass(TableLayout, [{\n    key: \"updateScrollY\",\n    value: function updateScrollY() {\n      var height = this.height.value;\n      if (height === null) return false;\n      var scrollBarRef = this.table.refs.scrollBarRef;\n\n      if (this.table.vnode.el && scrollBarRef) {\n        var scrollY = true;\n        var prevScrollY = this.scrollY.value;\n        scrollY = scrollBarRef.wrap$.scrollHeight > scrollBarRef.wrap$.clientHeight;\n        this.scrollY.value = scrollY;\n        return prevScrollY !== scrollY;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"setHeight\",\n    value: function setHeight(value) {\n      var _this = this;\n\n      var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"height\";\n      if (!isClient) return;\n      var el = this.table.vnode.el;\n      value = parseHeight(value);\n      this.height.value = Number(value);\n      if (!el && (value || value === 0)) return nextTick(function () {\n        return _this.setHeight(value, prop);\n      });\n\n      if (typeof value === \"number\") {\n        el.style[prop] = \"\".concat(value, \"px\");\n        this.updateElsHeight();\n      } else if (typeof value === \"string\") {\n        el.style[prop] = value;\n        this.updateElsHeight();\n      }\n    }\n  }, {\n    key: \"setMaxHeight\",\n    value: function setMaxHeight(value) {\n      this.setHeight(value, \"max-height\");\n    }\n  }, {\n    key: \"getFlattenColumns\",\n    value: function getFlattenColumns() {\n      var flattenColumns = [];\n      var columns = this.table.store.states.columns.value;\n      columns.forEach(function (column) {\n        if (column.isColumnGroup) {\n          flattenColumns.push.apply(flattenColumns, column.columns);\n        } else {\n          flattenColumns.push(column);\n        }\n      });\n      return flattenColumns;\n    }\n  }, {\n    key: \"updateElsHeight\",\n    value: function updateElsHeight() {\n      this.updateScrollY();\n      this.notifyObservers(\"scrollable\");\n    }\n  }, {\n    key: \"headerDisplayNone\",\n    value: function headerDisplayNone(elm) {\n      if (!elm) return true;\n      var headerChild = elm;\n\n      while (headerChild.tagName !== \"DIV\") {\n        if (getComputedStyle(headerChild).display === \"none\") {\n          return true;\n        }\n\n        headerChild = headerChild.parentElement;\n      }\n\n      return false;\n    }\n  }, {\n    key: \"updateColumnsWidth\",\n    value: function updateColumnsWidth() {\n      if (!isClient) return;\n      var fit = this.fit;\n      var bodyWidth = this.table.vnode.el.clientWidth;\n      var bodyMinWidth = 0;\n      var flattenColumns = this.getFlattenColumns();\n      var flexColumns = flattenColumns.filter(function (column) {\n        return typeof column.width !== \"number\";\n      });\n      flattenColumns.forEach(function (column) {\n        if (typeof column.width === \"number\" && column.realWidth) column.realWidth = null;\n      });\n\n      if (flexColumns.length > 0 && fit) {\n        flattenColumns.forEach(function (column) {\n          bodyMinWidth += Number(column.width || column.minWidth || 80);\n        });\n\n        if (bodyMinWidth <= bodyWidth) {\n          this.scrollX.value = false;\n          var totalFlexWidth = bodyWidth - bodyMinWidth;\n\n          if (flexColumns.length === 1) {\n            flexColumns[0].realWidth = Number(flexColumns[0].minWidth || 80) + totalFlexWidth;\n          } else {\n            var allColumnsWidth = flexColumns.reduce(function (prev, column) {\n              return prev + Number(column.minWidth || 80);\n            }, 0);\n            var flexWidthPerPixel = totalFlexWidth / allColumnsWidth;\n            var noneFirstWidth = 0;\n            flexColumns.forEach(function (column, index) {\n              if (index === 0) return;\n              var flexWidth = Math.floor(Number(column.minWidth || 80) * flexWidthPerPixel);\n              noneFirstWidth += flexWidth;\n              column.realWidth = Number(column.minWidth || 80) + flexWidth;\n            });\n            flexColumns[0].realWidth = Number(flexColumns[0].minWidth || 80) + totalFlexWidth - noneFirstWidth;\n          }\n        } else {\n          this.scrollX.value = true;\n          flexColumns.forEach(function (column) {\n            column.realWidth = Number(column.minWidth);\n          });\n        }\n\n        this.bodyWidth.value = Math.max(bodyMinWidth, bodyWidth);\n        this.table.state.resizeState.value.width = this.bodyWidth.value;\n      } else {\n        flattenColumns.forEach(function (column) {\n          if (!column.width && !column.minWidth) {\n            column.realWidth = 80;\n          } else {\n            column.realWidth = Number(column.width || column.minWidth);\n          }\n\n          bodyMinWidth += column.realWidth;\n        });\n        this.scrollX.value = bodyMinWidth > bodyWidth;\n        this.bodyWidth.value = bodyMinWidth;\n      }\n\n      var fixedColumns = this.store.states.fixedColumns.value;\n\n      if (fixedColumns.length > 0) {\n        var fixedWidth = 0;\n        fixedColumns.forEach(function (column) {\n          fixedWidth += Number(column.realWidth || column.width);\n        });\n        this.fixedWidth.value = fixedWidth;\n      }\n\n      var rightFixedColumns = this.store.states.rightFixedColumns.value;\n\n      if (rightFixedColumns.length > 0) {\n        var rightFixedWidth = 0;\n        rightFixedColumns.forEach(function (column) {\n          rightFixedWidth += Number(column.realWidth || column.width);\n        });\n        this.rightFixedWidth.value = rightFixedWidth;\n      }\n\n      this.notifyObservers(\"columns\");\n    }\n  }, {\n    key: \"addObserver\",\n    value: function addObserver(observer) {\n      this.observers.push(observer);\n    }\n  }, {\n    key: \"removeObserver\",\n    value: function removeObserver(observer) {\n      var index = this.observers.indexOf(observer);\n\n      if (index !== -1) {\n        this.observers.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"notifyObservers\",\n    value: function notifyObservers(event) {\n      var _this2 = this;\n\n      var observers = this.observers;\n      observers.forEach(function (observer) {\n        var _a, _b;\n\n        switch (event) {\n          case \"columns\":\n            (_a = observer.state) == null ? void 0 : _a.onColumnsChange(_this2);\n            break;\n\n          case \"scrollable\":\n            (_b = observer.state) == null ? void 0 : _b.onScrollableChange(_this2);\n            break;\n\n          default:\n            throw new Error(\"Table Layout don't have event \".concat(event, \".\"));\n        }\n      });\n    }\n  }]);\n\n  return TableLayout;\n}();\n\nexport { TableLayout as default };","map":{"version":3,"mappings":"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","names":["TableLayout","options","observers","table","store","columns","fit","showHeader","height","ref","scrollX","scrollY","bodyWidth","fixedWidth","rightFixedWidth","gutterWidth","name","hasOwn","isRef","value","Error","scrollBarRef","refs","vnode","el","prevScrollY","wrap$","scrollHeight","clientHeight","prop","isClient","parseHeight","Number","nextTick","setHeight","style","updateElsHeight","flattenColumns","states","forEach","column","isColumnGroup","push","apply","updateScrollY","notifyObservers","elm","headerChild","tagName","getComputedStyle","display","parentElement","clientWidth","bodyMinWidth","getFlattenColumns","flexColumns","filter","width","realWidth","length","minWidth","totalFlexWidth","allColumnsWidth","reduce","prev","flexWidthPerPixel","noneFirstWidth","index","flexWidth","Math","floor","max","state","resizeState","fixedColumns","rightFixedColumns","observer","indexOf","splice","event","_a","_b","onColumnsChange","onScrollableChange"],"sources":["../../../../../../packages/components/table/src/table-layout.ts"],"sourcesContent":["// @ts-nocheck\nimport { isRef, nextTick, ref } from 'vue'\nimport { isClient } from '@vueuse/core'\nimport { hasOwn } from '@element-plus/utils'\nimport { parseHeight } from './util'\nimport type { Ref } from 'vue'\n\nimport type { TableColumnCtx } from './table-column/defaults'\nimport type { TableHeader } from './table-header'\nimport type { Table } from './table/defaults'\nimport type { Store } from './store'\nclass TableLayout<T> {\n  observers: TableHeader[]\n  table: Table<T>\n  store: Store<T>\n  columns: TableColumnCtx<T>[]\n  fit: boolean\n  showHeader: boolean\n\n  height: Ref<null | number>\n  scrollX: Ref<boolean>\n  scrollY: Ref<boolean>\n  bodyWidth: Ref<null | number>\n  fixedWidth: Ref<null | number>\n  rightFixedWidth: Ref<null | number>\n  tableHeight: Ref<null | number>\n  headerHeight: Ref<null | number> // Table Header Height\n  appendHeight: Ref<null | number> // Append Slot Height\n  footerHeight: Ref<null | number> // Table Footer Height\n  gutterWidth: number\n  constructor(options: Record<string, any>) {\n    this.observers = []\n    this.table = null\n    this.store = null\n    this.columns = []\n    this.fit = true\n    this.showHeader = true\n    this.height = ref(null)\n    this.scrollX = ref(false)\n    this.scrollY = ref(false)\n    this.bodyWidth = ref(null)\n    this.fixedWidth = ref(null)\n    this.rightFixedWidth = ref(null)\n    this.gutterWidth = 0\n    for (const name in options) {\n      if (hasOwn(options, name)) {\n        if (isRef(this[name])) {\n          this[name as string].value = options[name]\n        } else {\n          this[name as string] = options[name]\n        }\n      }\n    }\n    if (!this.table) {\n      throw new Error('Table is required for Table Layout')\n    }\n    if (!this.store) {\n      throw new Error('Store is required for Table Layout')\n    }\n  }\n\n  updateScrollY() {\n    const height = this.height.value\n    /**\n     * When the height is not initialized, it is null.\n     * After the table is initialized, when the height is not configured, the height is 0.\n     */\n    if (height === null) return false\n    const scrollBarRef = this.table.refs.scrollBarRef\n    if (this.table.vnode.el && scrollBarRef) {\n      let scrollY = true\n      const prevScrollY = this.scrollY.value\n      scrollY =\n        scrollBarRef.wrap$.scrollHeight > scrollBarRef.wrap$.clientHeight\n      this.scrollY.value = scrollY\n      return prevScrollY !== scrollY\n    }\n    return false\n  }\n\n  setHeight(value: string | number, prop = 'height') {\n    if (!isClient) return\n    const el = this.table.vnode.el\n    value = parseHeight(value)\n    this.height.value = Number(value)\n\n    if (!el && (value || value === 0))\n      return nextTick(() => this.setHeight(value, prop))\n\n    if (typeof value === 'number') {\n      el.style[prop] = `${value}px`\n      this.updateElsHeight()\n    } else if (typeof value === 'string') {\n      el.style[prop] = value\n      this.updateElsHeight()\n    }\n  }\n\n  setMaxHeight(value: string | number) {\n    this.setHeight(value, 'max-height')\n  }\n\n  getFlattenColumns(): TableColumnCtx<T>[] {\n    const flattenColumns = []\n    const columns = this.table.store.states.columns.value\n    columns.forEach((column) => {\n      if (column.isColumnGroup) {\n        // eslint-disable-next-line prefer-spread\n        flattenColumns.push.apply(flattenColumns, column.columns)\n      } else {\n        flattenColumns.push(column)\n      }\n    })\n\n    return flattenColumns\n  }\n\n  updateElsHeight() {\n    this.updateScrollY()\n    this.notifyObservers('scrollable')\n  }\n\n  headerDisplayNone(elm: HTMLElement) {\n    if (!elm) return true\n    let headerChild = elm\n    while (headerChild.tagName !== 'DIV') {\n      if (getComputedStyle(headerChild).display === 'none') {\n        return true\n      }\n      headerChild = headerChild.parentElement\n    }\n    return false\n  }\n\n  updateColumnsWidth() {\n    if (!isClient) return\n    const fit = this.fit\n    const bodyWidth = this.table.vnode.el.clientWidth\n    let bodyMinWidth = 0\n\n    const flattenColumns = this.getFlattenColumns()\n    const flexColumns = flattenColumns.filter(\n      (column) => typeof column.width !== 'number'\n    )\n    flattenColumns.forEach((column) => {\n      // Clean those columns whose width changed from flex to unflex\n      if (typeof column.width === 'number' && column.realWidth)\n        column.realWidth = null\n    })\n    if (flexColumns.length > 0 && fit) {\n      flattenColumns.forEach((column) => {\n        bodyMinWidth += Number(column.width || column.minWidth || 80)\n      })\n      if (bodyMinWidth <= bodyWidth) {\n        // DON'T HAVE SCROLL BAR\n        this.scrollX.value = false\n\n        const totalFlexWidth = bodyWidth - bodyMinWidth\n\n        if (flexColumns.length === 1) {\n          flexColumns[0].realWidth =\n            Number(flexColumns[0].minWidth || 80) + totalFlexWidth\n        } else {\n          const allColumnsWidth = flexColumns.reduce(\n            (prev, column) => prev + Number(column.minWidth || 80),\n            0\n          )\n          const flexWidthPerPixel = totalFlexWidth / allColumnsWidth\n          let noneFirstWidth = 0\n\n          flexColumns.forEach((column, index) => {\n            if (index === 0) return\n            const flexWidth = Math.floor(\n              Number(column.minWidth || 80) * flexWidthPerPixel\n            )\n            noneFirstWidth += flexWidth\n            column.realWidth = Number(column.minWidth || 80) + flexWidth\n          })\n\n          flexColumns[0].realWidth =\n            Number(flexColumns[0].minWidth || 80) +\n            totalFlexWidth -\n            noneFirstWidth\n        }\n      } else {\n        // HAVE HORIZONTAL SCROLL BAR\n        this.scrollX.value = true\n        flexColumns.forEach((column) => {\n          column.realWidth = Number(column.minWidth)\n        })\n      }\n\n      this.bodyWidth.value = Math.max(bodyMinWidth, bodyWidth)\n      this.table.state.resizeState.value.width = this.bodyWidth.value\n    } else {\n      flattenColumns.forEach((column) => {\n        if (!column.width && !column.minWidth) {\n          column.realWidth = 80\n        } else {\n          column.realWidth = Number(column.width || column.minWidth)\n        }\n        bodyMinWidth += column.realWidth\n      })\n      this.scrollX.value = bodyMinWidth > bodyWidth\n\n      this.bodyWidth.value = bodyMinWidth\n    }\n\n    const fixedColumns = this.store.states.fixedColumns.value\n\n    if (fixedColumns.length > 0) {\n      let fixedWidth = 0\n      fixedColumns.forEach((column) => {\n        fixedWidth += Number(column.realWidth || column.width)\n      })\n\n      this.fixedWidth.value = fixedWidth\n    }\n\n    const rightFixedColumns = this.store.states.rightFixedColumns.value\n    if (rightFixedColumns.length > 0) {\n      let rightFixedWidth = 0\n      rightFixedColumns.forEach((column) => {\n        rightFixedWidth += Number(column.realWidth || column.width)\n      })\n\n      this.rightFixedWidth.value = rightFixedWidth\n    }\n    this.notifyObservers('columns')\n  }\n\n  addObserver(observer: TableHeader) {\n    this.observers.push(observer)\n  }\n\n  removeObserver(observer: TableHeader) {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.observers.splice(index, 1)\n    }\n  }\n\n  notifyObservers(event: string) {\n    const observers = this.observers\n    observers.forEach((observer) => {\n      switch (event) {\n        case 'columns':\n          observer.state?.onColumnsChange(this)\n          break\n        case 'scrollable':\n          observer.state?.onScrollableChange(this)\n          break\n        default:\n          throw new Error(`Table Layout don't have event ${event}.`)\n      }\n    })\n  }\n}\n\nexport default TableLayout\n"]},"metadata":{},"sourceType":"module"}