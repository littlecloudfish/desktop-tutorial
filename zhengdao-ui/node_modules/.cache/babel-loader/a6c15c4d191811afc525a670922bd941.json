{"ast":null,"code":"import _objectSpread from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { inject, computed, h } from 'vue';\nimport '../../../../hooks/index.mjs';\nimport { getRowIdentity } from '../util.mjs';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\nimport useEvents from './events-helper.mjs';\nimport useStyles from './styles-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\n\nfunction useRender(props) {\n  var parent = inject(TABLE_INJECTION_KEY);\n  var ns = useNamespace(\"table\");\n\n  var _useEvents = useEvents(props),\n      handleDoubleClick = _useEvents.handleDoubleClick,\n      handleClick = _useEvents.handleClick,\n      handleContextMenu = _useEvents.handleContextMenu,\n      handleMouseEnter = _useEvents.handleMouseEnter,\n      handleMouseLeave = _useEvents.handleMouseLeave,\n      handleCellMouseEnter = _useEvents.handleCellMouseEnter,\n      handleCellMouseLeave = _useEvents.handleCellMouseLeave,\n      tooltipContent = _useEvents.tooltipContent,\n      tooltipTrigger = _useEvents.tooltipTrigger;\n\n  var _useStyles = useStyles(props),\n      getRowStyle = _useStyles.getRowStyle,\n      getRowClass = _useStyles.getRowClass,\n      getCellStyle = _useStyles.getCellStyle,\n      getCellClass = _useStyles.getCellClass,\n      getSpan = _useStyles.getSpan,\n      getColspanRealWidth = _useStyles.getColspanRealWidth;\n\n  var firstDefaultColumnIndex = computed(function () {\n    return props.store.states.columns.value.findIndex(function (_ref) {\n      var type = _ref.type;\n      return type === \"default\";\n    });\n  });\n\n  var getKeyOfRow = function getKeyOfRow(row, index) {\n    var rowKey = parent.props.rowKey;\n\n    if (rowKey) {\n      return getRowIdentity(row, rowKey);\n    }\n\n    return index;\n  };\n\n  var rowRender = function rowRender(row, $index, treeRowData) {\n    var expanded = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    var tooltipEffect = props.tooltipEffect,\n        store = props.store;\n    var _store$states = store.states,\n        indent = _store$states.indent,\n        columns = _store$states.columns;\n    var rowClasses = getRowClass(row, $index);\n    var display = true;\n\n    if (treeRowData) {\n      rowClasses.push(ns.em(\"row\", \"level-\".concat(treeRowData.level)));\n      display = treeRowData.display;\n    }\n\n    var displayStyle = display ? null : {\n      display: \"none\"\n    };\n    return h(\"tr\", {\n      style: [displayStyle, getRowStyle(row, $index)],\n      \"class\": rowClasses,\n      key: getKeyOfRow(row, $index),\n      onDblclick: function onDblclick($event) {\n        return handleDoubleClick($event, row);\n      },\n      onClick: function onClick($event) {\n        return handleClick($event, row);\n      },\n      onContextmenu: function onContextmenu($event) {\n        return handleContextMenu($event, row);\n      },\n      onMouseenter: function onMouseenter() {\n        return handleMouseEnter($index);\n      },\n      onMouseleave: handleMouseLeave\n    }, columns.value.map(function (column, cellIndex) {\n      var _getSpan = getSpan(row, column, $index, cellIndex),\n          rowspan = _getSpan.rowspan,\n          colspan = _getSpan.colspan;\n\n      if (!rowspan || !colspan) {\n        return null;\n      }\n\n      var columnData = _objectSpread({}, column);\n\n      columnData.realWidth = getColspanRealWidth(columns.value, colspan, cellIndex);\n      var data = {\n        store: props.store,\n        _self: props.context || parent,\n        column: columnData,\n        row: row,\n        $index: $index,\n        cellIndex: cellIndex,\n        expanded: expanded\n      };\n\n      if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n        data.treeNode = {\n          indent: treeRowData.level * indent.value,\n          level: treeRowData.level\n        };\n\n        if (typeof treeRowData.expanded === \"boolean\") {\n          data.treeNode.expanded = treeRowData.expanded;\n\n          if (\"loading\" in treeRowData) {\n            data.treeNode.loading = treeRowData.loading;\n          }\n\n          if (\"noLazyChildren\" in treeRowData) {\n            data.treeNode.noLazyChildren = treeRowData.noLazyChildren;\n          }\n        }\n      }\n\n      var baseKey = \"\".concat($index, \",\").concat(cellIndex);\n      var patchKey = columnData.columnKey || columnData.rawColumnKey || \"\";\n      var tdChildren = cellChildren(cellIndex, column, data);\n      return h(\"td\", {\n        style: getCellStyle($index, cellIndex, row, column),\n        \"class\": getCellClass($index, cellIndex, row, column),\n        key: \"\".concat(patchKey).concat(baseKey),\n        rowspan: rowspan,\n        colspan: colspan,\n        onMouseenter: function onMouseenter($event) {\n          return handleCellMouseEnter($event, _objectSpread(_objectSpread({}, row), {}, {\n            tooltipEffect: tooltipEffect\n          }));\n        },\n        onMouseleave: handleCellMouseLeave\n      }, [tdChildren]);\n    }));\n  };\n\n  var cellChildren = function cellChildren(cellIndex, column, data) {\n    return column.renderCell(data);\n  };\n\n  var wrappedRowRender = function wrappedRowRender(row, $index) {\n    var store = props.store;\n    var isRowExpanded = store.isRowExpanded,\n        assertRowKey = store.assertRowKey;\n    var _store$states2 = store.states,\n        treeData = _store$states2.treeData,\n        lazyTreeNodeMap = _store$states2.lazyTreeNodeMap,\n        childrenColumnName = _store$states2.childrenColumnName,\n        rowKey = _store$states2.rowKey;\n    var columns = store.states.columns.value;\n    var hasExpandColumn = columns.some(function (_ref2) {\n      var type = _ref2.type;\n      return type === \"expand\";\n    });\n\n    if (hasExpandColumn) {\n      var expanded = isRowExpanded(row);\n      var tr = rowRender(row, $index, void 0, expanded);\n      var renderExpanded = parent.renderExpanded;\n\n      if (expanded) {\n        if (!renderExpanded) {\n          console.error(\"[Element Error]renderExpanded is required.\");\n          return tr;\n        }\n\n        return [[tr, h(\"tr\", {\n          key: \"expanded-row__\".concat(tr.key)\n        }, [h(\"td\", {\n          colspan: columns.length,\n          \"class\": \"el-table__cell el-table__expanded-cell\"\n        }, [renderExpanded({\n          row: row,\n          $index: $index,\n          store: store,\n          expanded: expanded\n        })])])]];\n      } else {\n        return [[tr]];\n      }\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey();\n      var key = getRowIdentity(row, rowKey.value);\n      var cur = treeData.value[key];\n      var treeRowData = null;\n\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true\n        };\n\n        if (typeof cur.lazy === \"boolean\") {\n          if (typeof cur.loaded === \"boolean\" && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length);\n          }\n\n          treeRowData.loading = cur.loading;\n        }\n      }\n\n      var tmp = [rowRender(row, $index, treeRowData)];\n\n      if (cur) {\n        var i = 0;\n\n        var traverse = function traverse(children, parent2) {\n          if (!(children && children.length && parent2)) return;\n          children.forEach(function (node) {\n            var innerTreeRowData = {\n              display: parent2.display && parent2.expanded,\n              level: parent2.level + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false\n            };\n            var childKey = getRowIdentity(node, rowKey.value);\n\n            if (childKey === void 0 || childKey === null) {\n              throw new Error(\"For nested data item, row-key is required.\");\n            }\n\n            cur = _objectSpread({}, treeData.value[childKey]);\n\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded;\n              cur.level = cur.level || innerTreeRowData.level;\n              cur.display = !!(cur.expanded && innerTreeRowData.display);\n\n              if (typeof cur.lazy === \"boolean\") {\n                if (typeof cur.loaded === \"boolean\" && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(cur.children && cur.children.length);\n                }\n\n                innerTreeRowData.loading = cur.loading;\n              }\n            }\n\n            i++;\n            tmp.push(rowRender(node, $index + i, innerTreeRowData));\n\n            if (cur) {\n              var nodes2 = lazyTreeNodeMap.value[childKey] || node[childrenColumnName.value];\n              traverse(nodes2, cur);\n            }\n          });\n        };\n\n        cur.display = true;\n        var nodes = lazyTreeNodeMap.value[key] || row[childrenColumnName.value];\n        traverse(nodes, cur);\n      }\n\n      return tmp;\n    } else {\n      return rowRender(row, $index, void 0);\n    }\n  };\n\n  return {\n    wrappedRowRender: wrappedRowRender,\n    tooltipContent: tooltipContent,\n    tooltipTrigger: tooltipTrigger\n  };\n}\n\nexport { useRender as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;AAMA,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;EACxB,IAAMC,MAAM,GAAGC,MAAM,CAACC,mBAAD,CAArB;EACA,IAAMC,EAAE,GAAGC,YAAY,CAAC,OAAD,CAAvB;;EACA,iBAUIC,SAAS,CAACN,KAAD,CAVb;EAAA,IACEO,iBADF,cACEA,iBADF;EAAA,IAEEC,WAFF,cAEEA,WAFF;EAAA,IAGEC,iBAHF,cAGEA,iBAHF;EAAA,IAIEC,gBAJF,cAIEA,gBAJF;EAAA,IAKEC,gBALF,cAKEA,gBALF;EAAA,IAMEC,oBANF,cAMEA,oBANF;EAAA,IAOEC,oBAPF,cAOEA,oBAPF;EAAA,IAQEC,cARF,cAQEA,cARF;EAAA,IASEC,cATF,cASEA,cATF;;EAWA,iBAOIC,SAAS,CAAChB,KAAD,CAPb;EAAA,IACEiB,WADF,cACEA,WADF;EAAA,IAEEC,WAFF,cAEEA,WAFF;EAAA,IAGEC,YAHF,cAGEA,YAHF;EAAA,IAIEC,YAJF,cAIEA,YAJF;EAAA,IAKEC,OALF,cAKEA,OALF;EAAA,IAMEC,mBANF,cAMEA,mBANF;;EAQA,IAAMC,uBAAuB,GAAGC,QAAQ,CAAC,YAAM;IAC7C,OAAOxB,KAAK,CAACyB,KAAN,CAAYC,MAAZ,CAAmBC,OAAnB,CAA2BC,KAA3B,CAAiCC,SAAjC,CAA2C;MAAA,IAAGC,IAAH,QAAGA,IAAH;MAAA,OAAcA,IAAI,KAAK,SAAvB;IAAA,CAA3C,CAAP;EACD,CAFuC,CAAxC;;EAGA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAAMC,KAAN,EAAgB;IAClC,IAAMC,MAAM,GAAGjC,MAAM,CAACD,KAAP,CAAakC,MAA5B;;IACA,IAAIA,MAAJ,EAAY;MACV,OAAOC,cAAc,CAACH,GAAD,EAAME,MAAN,CAArB;IACD;;IACD,OAAOD,KAAP;EACD,CAND;;EAOA,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACJ,GAAD,EAAMK,MAAN,EAAcC,WAAd,EAAgD;IAAA,IAArBC,QAAqB,uEAAV,KAAU;IAChE,IAAQC,aAAR,GAAiCxC,KAAjC,CAAQwC,aAAR;IAAA,IAAuBf,KAAvB,GAAiCzB,KAAjC,CAAuByB,KAAvB;IACA,oBAA4BA,KAAK,CAACC,MAAlC;IAAA,IAAQe,MAAR,iBAAQA,MAAR;IAAA,IAAgBd,OAAhB,iBAAgBA,OAAhB;IACA,IAAMe,UAAU,GAAGxB,WAAW,CAACc,GAAD,EAAMK,MAAN,CAA9B;IACA,IAAIM,OAAO,GAAG,IAAd;;IACA,IAAIL,WAAJ,EAAiB;MACfI,UAAU,CAACE,IAAX,CAAgBxC,EAAE,CAACyC,EAAH,CAAM,KAAN,kBAAsBP,WAAW,CAACQ,KAAlC,EAAhB;MACAH,OAAO,GAAGL,WAAW,CAACK,OAAtB;IACD;;IACD,IAAMI,YAAY,GAAGJ,OAAO,GAAG,IAAH,GAAU;MACpCA,OAAO,EAAE;IAD2B,CAAtC;IAGA,OAAOK,CAAC,CAAC,IAAD,EAAO;MACbC,KAAK,EAAE,CAACF,YAAD,EAAe9B,WAAW,CAACe,GAAD,EAAMK,MAAN,CAA1B,CADM;MAEb,SAAOK,UAFM;MAGbQ,GAAG,EAAEnB,WAAW,CAACC,GAAD,EAAMK,MAAN,CAHH;MAIbc,UAAU,EAAE,oBAACC,MAAD;QAAA,OAAY7C,iBAAiB,CAAC6C,MAAD,EAASpB,GAAT,CAA7B;MAAA,CAJC;MAKbqB,OAAO,EAAE,iBAACD,MAAD;QAAA,OAAY5C,WAAW,CAAC4C,MAAD,EAASpB,GAAT,CAAvB;MAAA,CALI;MAMbsB,aAAa,EAAE,uBAACF,MAAD;QAAA,OAAY3C,iBAAiB,CAAC2C,MAAD,EAASpB,GAAT,CAA7B;MAAA,CANF;MAObuB,YAAY,EAAE;QAAA,OAAM7C,gBAAgB,CAAC2B,MAAD,CAAtB;MAAA,CAPD;MAQbmB,YAAY,EAAE7C;IARD,CAAP,EASLgB,OAAO,CAACC,KAAR,CAAc6B,GAAd,CAAkB,UAACC,MAAD,EAASC,SAAT,EAAuB;MAC1C,eAA6BtC,OAAO,CAACW,GAAD,EAAM0B,MAAN,EAAcrB,MAAd,EAAsBsB,SAAtB,CAApC;MAAA,IAAQC,OAAR,YAAQA,OAAR;MAAA,IAAiBC,OAAjB,YAAiBA,OAAjB;;MACA,IAAI,CAACD,OAAD,IAAY,CAACC,OAAjB,EAA0B;QACxB,OAAO,IAAP;MACD;;MACD,IAAMC,UAAU,qBAAQJ,MAAR,CAAhB;;MACAI,UAAU,CAACC,SAAX,GAAuBzC,mBAAmB,CAACK,OAAO,CAACC,KAAT,EAAgBiC,OAAhB,EAAyBF,SAAzB,CAA1C;MACA,IAAMK,IAAI,GAAG;QACXvC,KAAK,EAAEzB,KAAK,CAACyB,KADF;QAEXwC,KAAK,EAAEjE,KAAK,CAACkE,OAAN,IAAiBjE,MAFb;QAGXyD,MAAM,EAAEI,UAHG;QAIX9B,GAAG,EAAHA,GAJW;QAKXK,MAAM,EAANA,MALW;QAMXsB,SAAS,EAATA,SANW;QAOXpB,QAAQ,EAARA;MAPW,CAAb;;MASA,IAAIoB,SAAS,KAAKpC,uBAAuB,CAACK,KAAtC,IAA+CU,WAAnD,EAAgE;QAC9D0B,IAAI,CAACG,QAAL,GAAgB;UACd1B,MAAM,EAAEH,WAAW,CAACQ,KAAZ,GAAoBL,MAAM,CAACb,KADrB;UAEdkB,KAAK,EAAER,WAAW,CAACQ;QAFL,CAAhB;;QAIA,IAAI,OAAOR,WAAW,CAACC,QAAnB,KAAgC,SAApC,EAA+C;UAC7CyB,IAAI,CAACG,QAAL,CAAc5B,QAAd,GAAyBD,WAAW,CAACC,QAArC;;UACA,IAAI,aAAaD,WAAjB,EAA8B;YAC5B0B,IAAI,CAACG,QAAL,CAAcC,OAAd,GAAwB9B,WAAW,CAAC8B,OAApC;UACD;;UACD,IAAI,oBAAoB9B,WAAxB,EAAqC;YACnC0B,IAAI,CAACG,QAAL,CAAcE,cAAd,GAA+B/B,WAAW,CAAC+B,cAA3C;UACD;QACF;MACF;;MACD,IAAMC,OAAO,aAAMjC,MAAN,cAAgBsB,SAAhB,CAAb;MACA,IAAMY,QAAQ,GAAGT,UAAU,CAACU,SAAX,IAAwBV,UAAU,CAACW,YAAnC,IAAmD,EAApE;MACA,IAAMC,UAAU,GAAGC,YAAY,CAAChB,SAAD,EAAYD,MAAZ,EAAoBM,IAApB,CAA/B;MACA,OAAOhB,CAAC,CAAC,IAAD,EAAO;QACbC,KAAK,EAAE9B,YAAY,CAACkB,MAAD,EAASsB,SAAT,EAAoB3B,GAApB,EAAyB0B,MAAzB,CADN;QAEb,SAAOtC,YAAY,CAACiB,MAAD,EAASsB,SAAT,EAAoB3B,GAApB,EAAyB0B,MAAzB,CAFN;QAGbR,GAAG,YAAKqB,QAAL,SAAgBD,OAAhB,CAHU;QAIbV,OAAO,EAAPA,OAJa;QAKbC,OAAO,EAAPA,OALa;QAMbN,YAAY,EAAE,sBAACH,MAAD;UAAA,OAAYxC,oBAAoB,CAACwC,MAAD,kCAAcpB,GAAd;YAAmBQ,aAAa,EAAbA;UAAnB,GAAhC;QAAA,CAND;QAObgB,YAAY,EAAE3C;MAPD,CAAP,EAQL,CAAC6D,UAAD,CARK,CAAR;IASD,CA3CE,CATK,CAAR;EAqDD,CAjED;;EAkEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAChB,SAAD,EAAYD,MAAZ,EAAoBM,IAApB,EAA6B;IAChD,OAAON,MAAM,CAACkB,UAAP,CAAkBZ,IAAlB,CAAP;EACD,CAFD;;EAGA,IAAMa,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAC7C,GAAD,EAAMK,MAAN,EAAiB;IACxC,IAAMZ,KAAK,GAAGzB,KAAK,CAACyB,KAApB;IACA,IAAQqD,aAAR,GAAwCrD,KAAxC,CAAQqD,aAAR;IAAA,IAAuBC,YAAvB,GAAwCtD,KAAxC,CAAuBsD,YAAvB;IACA,qBAAkEtD,KAAK,CAACC,MAAxE;IAAA,IAAQsD,QAAR,kBAAQA,QAAR;IAAA,IAAkBC,eAAlB,kBAAkBA,eAAlB;IAAA,IAAmCC,kBAAnC,kBAAmCA,kBAAnC;IAAA,IAAuDhD,MAAvD,kBAAuDA,MAAvD;IACA,IAAMP,OAAO,GAAGF,KAAK,CAACC,MAAN,CAAaC,OAAb,CAAqBC,KAArC;IACA,IAAMuD,eAAe,GAAGxD,OAAO,CAACyD,IAAR,CAAa;MAAA,IAAGtD,IAAH,SAAGA,IAAH;MAAA,OAAcA,IAAI,KAAK,QAAvB;IAAA,CAAb,CAAxB;;IACA,IAAIqD,eAAJ,EAAqB;MACnB,IAAM5C,QAAQ,GAAGuC,aAAa,CAAC9C,GAAD,CAA9B;MACA,IAAMqD,EAAE,GAAGjD,SAAS,CAACJ,GAAD,EAAMK,MAAN,EAAc,KAAK,CAAnB,EAAsBE,QAAtB,CAApB;MACA,IAAM+C,cAAc,GAAGrF,MAAM,CAACqF,cAA9B;;MACA,IAAI/C,QAAJ,EAAc;QACZ,IAAI,CAAC+C,cAAL,EAAqB;UACnBC,OAAO,CAACC,KAAR,CAAc,4CAAd;UACA,OAAOH,EAAP;QACD;;QACD,OAAO,CACL,CACEA,EADF,EAEErC,CAAC,CAAC,IAAD,EAAO;UACNE,GAAG,0BAAmBmC,EAAE,CAACnC,GAAtB;QADG,CAAP,EAEE,CACDF,CAAC,CAAC,IAAD,EAAO;UACNa,OAAO,EAAElC,OAAO,CAAC8D,MADX;UAEN,SAAO;QAFD,CAAP,EAGE,CAACH,cAAc,CAAC;UAAEtD,GAAG,EAAHA,GAAF;UAAOK,MAAM,EAANA,MAAP;UAAeZ,KAAK,EAALA,KAAf;UAAsBc,QAAQ,EAARA;QAAtB,CAAD,CAAf,CAHF,CADA,CAFF,CAFH,CADK,CAAP;MAaD,CAlBD,MAkBO;QACL,OAAO,CAAC,CAAC8C,EAAD,CAAD,CAAP;MACD;IACF,CAzBD,MAyBO,IAAIK,MAAM,CAACC,IAAP,CAAYX,QAAQ,CAACpD,KAArB,EAA4B6D,MAAhC,EAAwC;MAC7CV,YAAY;MACZ,IAAM7B,GAAG,GAAGf,cAAc,CAACH,GAAD,EAAME,MAAM,CAACN,KAAb,CAA1B;MACA,IAAIgE,GAAG,GAAGZ,QAAQ,CAACpD,KAAT,CAAesB,GAAf,CAAV;MACA,IAAIZ,WAAW,GAAG,IAAlB;;MACA,IAAIsD,GAAJ,EAAS;QACPtD,WAAW,GAAG;UACZC,QAAQ,EAAEqD,GAAG,CAACrD,QADF;UAEZO,KAAK,EAAE8C,GAAG,CAAC9C,KAFC;UAGZH,OAAO,EAAE;QAHG,CAAd;;QAKA,IAAI,OAAOiD,GAAG,CAACC,IAAX,KAAoB,SAAxB,EAAmC;UACjC,IAAI,OAAOD,GAAG,CAACE,MAAX,KAAsB,SAAtB,IAAmCF,GAAG,CAACE,MAA3C,EAAmD;YACjDxD,WAAW,CAAC+B,cAAZ,GAA6B,EAAEuB,GAAG,CAACG,QAAJ,IAAgBH,GAAG,CAACG,QAAJ,CAAaN,MAA/B,CAA7B;UACD;;UACDnD,WAAW,CAAC8B,OAAZ,GAAsBwB,GAAG,CAACxB,OAA1B;QACD;MACF;;MACD,IAAM4B,GAAG,GAAG,CAAC5D,SAAS,CAACJ,GAAD,EAAMK,MAAN,EAAcC,WAAd,CAAV,CAAZ;;MACA,IAAIsD,GAAJ,EAAS;QACP,IAAIK,CAAC,GAAG,CAAR;;QACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACH,QAAD,EAAWI,OAAX,EAAuB;UACtC,IAAI,EAAEJ,QAAQ,IAAIA,QAAQ,CAACN,MAArB,IAA+BU,OAAjC,CAAJ,EACE;UACFJ,QAAQ,CAACK,OAAT,CAAiB,UAACC,IAAD,EAAU;YACzB,IAAMC,gBAAgB,GAAG;cACvB3D,OAAO,EAAEwD,OAAO,CAACxD,OAAR,IAAmBwD,OAAO,CAAC5D,QADb;cAEvBO,KAAK,EAAEqD,OAAO,CAACrD,KAAR,GAAgB,CAFA;cAGvBP,QAAQ,EAAE,KAHa;cAIvB8B,cAAc,EAAE,KAJO;cAKvBD,OAAO,EAAE;YALc,CAAzB;YAOA,IAAMmC,QAAQ,GAAGpE,cAAc,CAACkE,IAAD,EAAOnE,MAAM,CAACN,KAAd,CAA/B;;YACA,IAAI2E,QAAQ,KAAK,KAAK,CAAlB,IAAuBA,QAAQ,KAAK,IAAxC,EAA8C;cAC5C,MAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;YACD;;YACDZ,GAAG,qBAAQZ,QAAQ,CAACpD,KAAT,CAAe2E,QAAf,CAAR,CAAH;;YACA,IAAIX,GAAJ,EAAS;cACPU,gBAAgB,CAAC/D,QAAjB,GAA4BqD,GAAG,CAACrD,QAAhC;cACAqD,GAAG,CAAC9C,KAAJ,GAAY8C,GAAG,CAAC9C,KAAJ,IAAawD,gBAAgB,CAACxD,KAA1C;cACA8C,GAAG,CAACjD,OAAJ,GAAc,CAAC,EAAEiD,GAAG,CAACrD,QAAJ,IAAgB+D,gBAAgB,CAAC3D,OAAnC,CAAf;;cACA,IAAI,OAAOiD,GAAG,CAACC,IAAX,KAAoB,SAAxB,EAAmC;gBACjC,IAAI,OAAOD,GAAG,CAACE,MAAX,KAAsB,SAAtB,IAAmCF,GAAG,CAACE,MAA3C,EAAmD;kBACjDQ,gBAAgB,CAACjC,cAAjB,GAAkC,EAAEuB,GAAG,CAACG,QAAJ,IAAgBH,GAAG,CAACG,QAAJ,CAAaN,MAA/B,CAAlC;gBACD;;gBACDa,gBAAgB,CAAClC,OAAjB,GAA2BwB,GAAG,CAACxB,OAA/B;cACD;YACF;;YACD6B,CAAC;YACDD,GAAG,CAACpD,IAAJ,CAASR,SAAS,CAACiE,IAAD,EAAOhE,MAAM,GAAG4D,CAAhB,EAAmBK,gBAAnB,CAAlB;;YACA,IAAIV,GAAJ,EAAS;cACP,IAAMa,MAAM,GAAGxB,eAAe,CAACrD,KAAhB,CAAsB2E,QAAtB,KAAmCF,IAAI,CAACnB,kBAAkB,CAACtD,KAApB,CAAtD;cACAsE,QAAQ,CAACO,MAAD,EAASb,GAAT,CAAR;YACD;UACF,CA9BD;QA+BD,CAlCD;;QAmCAA,GAAG,CAACjD,OAAJ,GAAc,IAAd;QACA,IAAM+D,KAAK,GAAGzB,eAAe,CAACrD,KAAhB,CAAsBsB,GAAtB,KAA8BlB,GAAG,CAACkD,kBAAkB,CAACtD,KAApB,CAA/C;QACAsE,QAAQ,CAACQ,KAAD,EAAQd,GAAR,CAAR;MACD;;MACD,OAAOI,GAAP;IACD,CA7DM,MA6DA;MACL,OAAO5D,SAAS,CAACJ,GAAD,EAAMK,MAAN,EAAc,KAAK,CAAnB,CAAhB;IACD;EACF,CA/FD;;EAgGA,OAAO;IACLwC,gBAAgB,EAAhBA,gBADK;IAEL/D,cAAc,EAAdA,cAFK;IAGLC,cAAc,EAAdA;EAHK,CAAP;AAKF","names":["useRender","props","parent","inject","TABLE_INJECTION_KEY","ns","useNamespace","useEvents","handleDoubleClick","handleClick","handleContextMenu","handleMouseEnter","handleMouseLeave","handleCellMouseEnter","handleCellMouseLeave","tooltipContent","tooltipTrigger","useStyles","getRowStyle","getRowClass","getCellStyle","getCellClass","getSpan","getColspanRealWidth","firstDefaultColumnIndex","computed","store","states","columns","value","findIndex","type","getKeyOfRow","row","index","rowKey","getRowIdentity","rowRender","$index","treeRowData","expanded","tooltipEffect","indent","rowClasses","display","push","em","level","displayStyle","h","style","key","onDblclick","$event","onClick","onContextmenu","onMouseenter","onMouseleave","map","column","cellIndex","rowspan","colspan","columnData","realWidth","data","_self","context","treeNode","loading","noLazyChildren","baseKey","patchKey","columnKey","rawColumnKey","tdChildren","cellChildren","renderCell","wrappedRowRender","isRowExpanded","assertRowKey","treeData","lazyTreeNodeMap","childrenColumnName","hasExpandColumn","some","tr","renderExpanded","console","error","length","Object","keys","cur","lazy","loaded","children","tmp","i","traverse","parent2","forEach","node","innerTreeRowData","childKey","Error","nodes2","nodes"],"sources":["../../../../../../../packages/components/table/src/table-body/render-helper.ts"],"sourcesContent":["// @ts-nocheck\nimport { computed, h, inject } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { getRowIdentity } from '../util'\nimport { TABLE_INJECTION_KEY } from '../tokens'\nimport useEvents from './events-helper'\nimport useStyles from './styles-helper'\nimport type { TableBodyProps } from './defaults'\nimport type { RenderRowData, TableProps, TreeNode } from '../table/defaults'\n\nfunction useRender<T>(props: Partial<TableBodyProps<T>>) {\n  const parent = inject(TABLE_INJECTION_KEY)\n  const ns = useNamespace('table')\n  const {\n    handleDoubleClick,\n    handleClick,\n    handleContextMenu,\n    handleMouseEnter,\n    handleMouseLeave,\n    handleCellMouseEnter,\n    handleCellMouseLeave,\n    tooltipContent,\n    tooltipTrigger,\n  } = useEvents(props)\n  const {\n    getRowStyle,\n    getRowClass,\n    getCellStyle,\n    getCellClass,\n    getSpan,\n    getColspanRealWidth,\n  } = useStyles(props)\n  const firstDefaultColumnIndex = computed(() => {\n    return props.store.states.columns.value.findIndex(\n      ({ type }) => type === 'default'\n    )\n  })\n  const getKeyOfRow = (row: T, index: number) => {\n    const rowKey = (parent.props as Partial<TableProps<T>>).rowKey\n    if (rowKey) {\n      return getRowIdentity(row, rowKey)\n    }\n    return index\n  }\n  const rowRender = (\n    row: T,\n    $index: number,\n    treeRowData?: TreeNode,\n    expanded = false\n  ) => {\n    const { tooltipEffect, store } = props\n    const { indent, columns } = store.states\n    const rowClasses = getRowClass(row, $index)\n    let display = true\n    if (treeRowData) {\n      rowClasses.push(ns.em('row', `level-${treeRowData.level}`))\n      display = treeRowData.display\n    }\n    const displayStyle = display\n      ? null\n      : {\n          display: 'none',\n        }\n    return h(\n      'tr',\n      {\n        style: [displayStyle, getRowStyle(row, $index)],\n        class: rowClasses,\n        key: getKeyOfRow(row, $index),\n        onDblclick: ($event) => handleDoubleClick($event, row),\n        onClick: ($event) => handleClick($event, row),\n        onContextmenu: ($event) => handleContextMenu($event, row),\n        onMouseenter: () => handleMouseEnter($index),\n        onMouseleave: handleMouseLeave,\n      },\n      columns.value.map((column, cellIndex) => {\n        const { rowspan, colspan } = getSpan(row, column, $index, cellIndex)\n        if (!rowspan || !colspan) {\n          return null\n        }\n        const columnData = { ...column }\n        columnData.realWidth = getColspanRealWidth(\n          columns.value,\n          colspan,\n          cellIndex\n        )\n        const data: RenderRowData<T> = {\n          store: props.store,\n          _self: props.context || parent,\n          column: columnData,\n          row,\n          $index,\n          cellIndex,\n          expanded,\n        }\n        if (cellIndex === firstDefaultColumnIndex.value && treeRowData) {\n          data.treeNode = {\n            indent: treeRowData.level * indent.value,\n            level: treeRowData.level,\n          }\n          if (typeof treeRowData.expanded === 'boolean') {\n            data.treeNode.expanded = treeRowData.expanded\n            // 表明是懒加载\n            if ('loading' in treeRowData) {\n              data.treeNode.loading = treeRowData.loading\n            }\n            if ('noLazyChildren' in treeRowData) {\n              data.treeNode.noLazyChildren = treeRowData.noLazyChildren\n            }\n          }\n        }\n        const baseKey = `${$index},${cellIndex}`\n        const patchKey = columnData.columnKey || columnData.rawColumnKey || ''\n        const tdChildren = cellChildren(cellIndex, column, data)\n        return h(\n          'td',\n          {\n            style: getCellStyle($index, cellIndex, row, column),\n            class: getCellClass($index, cellIndex, row, column),\n            key: `${patchKey}${baseKey}`,\n            rowspan,\n            colspan,\n            onMouseenter: ($event) =>\n              handleCellMouseEnter($event, { ...row, tooltipEffect }),\n            onMouseleave: handleCellMouseLeave,\n          },\n          [tdChildren]\n        )\n      })\n    )\n  }\n  const cellChildren = (cellIndex, column, data) => {\n    return column.renderCell(data)\n  }\n\n  const wrappedRowRender = (row: T, $index: number) => {\n    const store = props.store\n    const { isRowExpanded, assertRowKey } = store\n    const { treeData, lazyTreeNodeMap, childrenColumnName, rowKey } =\n      store.states\n    const columns = store.states.columns.value\n    const hasExpandColumn = columns.some(({ type }) => type === 'expand')\n    if (hasExpandColumn) {\n      const expanded = isRowExpanded(row)\n      const tr = rowRender(row, $index, undefined, expanded)\n      const renderExpanded = parent.renderExpanded\n      if (expanded) {\n        if (!renderExpanded) {\n          console.error('[Element Error]renderExpanded is required.')\n          return tr\n        }\n        // 使用二维数组，避免修改 $index\n        // Use a matrix to avoid modifying $index\n        return [\n          [\n            tr,\n            h(\n              'tr',\n              {\n                key: `expanded-row__${tr.key as string}`,\n              },\n              [\n                h(\n                  'td',\n                  {\n                    colspan: columns.length,\n                    class: 'el-table__cell el-table__expanded-cell',\n                  },\n                  [renderExpanded({ row, $index, store, expanded })]\n                ),\n              ]\n            ),\n          ],\n        ]\n      } else {\n        // 使用二维数组，避免修改 $index\n        // Use a two dimensional array avoid modifying $index\n        return [[tr]]\n      }\n    } else if (Object.keys(treeData.value).length) {\n      assertRowKey()\n      // TreeTable 时，rowKey 必须由用户设定，不使用 getKeyOfRow 计算\n      // 在调用 rowRender 函数时，仍然会计算 rowKey，不太好的操作\n      const key = getRowIdentity(row, rowKey.value)\n      let cur = treeData.value[key]\n      let treeRowData = null\n      if (cur) {\n        treeRowData = {\n          expanded: cur.expanded,\n          level: cur.level,\n          display: true,\n        }\n        if (typeof cur.lazy === 'boolean') {\n          if (typeof cur.loaded === 'boolean' && cur.loaded) {\n            treeRowData.noLazyChildren = !(cur.children && cur.children.length)\n          }\n          treeRowData.loading = cur.loading\n        }\n      }\n      const tmp = [rowRender(row, $index, treeRowData)]\n      // 渲染嵌套数据\n      if (cur) {\n        // currentRow 记录的是 index，所以还需主动增加 TreeTable 的 index\n        let i = 0\n        const traverse = (children, parent) => {\n          if (!(children && children.length && parent)) return\n          children.forEach((node) => {\n            // 父节点的 display 状态影响子节点的显示状态\n            const innerTreeRowData = {\n              display: parent.display && parent.expanded,\n              level: parent.level + 1,\n              expanded: false,\n              noLazyChildren: false,\n              loading: false,\n            }\n            const childKey = getRowIdentity(node, rowKey.value)\n            if (childKey === undefined || childKey === null) {\n              throw new Error('For nested data item, row-key is required.')\n            }\n            cur = { ...treeData.value[childKey] }\n            // 对于当前节点，分成有无子节点两种情况。\n            // 如果包含子节点的，设置 expanded 属性。\n            // 对于它子节点的 display 属性由它本身的 expanded 与 display 共同决定。\n            if (cur) {\n              innerTreeRowData.expanded = cur.expanded\n              // 懒加载的某些节点，level 未知\n              cur.level = cur.level || innerTreeRowData.level\n              cur.display = !!(cur.expanded && innerTreeRowData.display)\n              if (typeof cur.lazy === 'boolean') {\n                if (typeof cur.loaded === 'boolean' && cur.loaded) {\n                  innerTreeRowData.noLazyChildren = !(\n                    cur.children && cur.children.length\n                  )\n                }\n                innerTreeRowData.loading = cur.loading\n              }\n            }\n            i++\n            tmp.push(rowRender(node, $index + i, innerTreeRowData))\n            if (cur) {\n              const nodes =\n                lazyTreeNodeMap.value[childKey] ||\n                node[childrenColumnName.value]\n              traverse(nodes, cur)\n            }\n          })\n        }\n        // 对于 root 节点，display 一定为 true\n        cur.display = true\n        const nodes =\n          lazyTreeNodeMap.value[key] || row[childrenColumnName.value]\n        traverse(nodes, cur)\n      }\n      return tmp\n    } else {\n      return rowRender(row, $index, undefined)\n    }\n  }\n\n  return {\n    wrappedRowRender,\n    tooltipContent,\n    tooltipTrigger,\n  }\n}\n\nexport default useRender\n"]},"metadata":{},"sourceType":"module"}