{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"upload-example\"\n};\nconst _hoisted_2 = {\n  class: \"button-wrapper\"\n};\n\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\" Load Image \");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_cropper = _resolveComponent(\"cropper\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_cropper, {\n    src: $data.img.src,\n    \"stencil-component\": _ctx.$options.components.CircleStencil\n  }, null, 8\n  /* PROPS */\n  , [\"src\", \"stencil-component\"])]), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    class: \"button\",\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.$refs.file.click())\n  }, [_createElementVNode(\"input\", {\n    type: \"file\",\n    ref: \"file\",\n    onChange: _cache[0] || (_cache[0] = $event => $options.loadImage($event)),\n    accept: \"image/*\"\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  )]), _hoisted_3])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;EAESA,KAAK,EAAG;;;EAMJA,KAAK,EAAG;;;iDAGJ;;;;;6DATbC,oBAKU,KALV,cAKU,CAJNC,aAGEC,kBAHF,EAGE;IAFDC,GAAG,EAAIC,UAAID,GAEV;IADD,qBAAmBE,cAASC,UAAT,CAAoBC;EACtC,CAHF;;EAAA,+BAIM,CALV,GAMIP,oBAKE,KALF,cAKE,CAJFA,oBAES,QAFT,EAES;IAFDD,KAAK,EAAG,QAEP;IAFiBS,OAAK,sCAAIH,WAAMI,IAAN,CAAWC,KAAX,EAAJ;EAEtB,CAFT,GACAV,oBAA8E,OAA9E,EAA8E;IAAvEW,IAAI,EAAC,MAAkE;IAA3DC,GAAG,EAAC,MAAuD;IAA/CC,QAAM,sCAAIC,mBAAUC,MAAV,CAAJ,CAAyC;IAAlBC,MAAM,EAAC;EAAW,CAA9E;;EAAA,EADA,CAIE,aALF","names":["class","_createElementVNode","_createVNode","_component_cropper","src","$data","_ctx","components","CircleStencil","onClick","file","click","type","ref","onChange","$options","$event","accept"],"sourceRoot":"","sources":["/home/little/Documents/music_web/startproj/zhengdao-ui/src/views/Music/MusicSearch.vue"],"sourcesContent":["<template>\n\n    <div class = \"upload-example\">\n        <cropper\n        :src = \"img.src\"\n        :stencil-component=\"$options.components.CircleStencil\"\n        />\n        </div>\n        <div class = \"button-wrapper\">\n        <button class = \"button\" @click = \"$refs.file.click()\">\n        <input type=\"file\" ref=\"file\" @change = \"loadImage($event)\" accept=\"image/*\"/>\n        </button>\n            Load Image\n    </div>\n\n</template>\n\n<script>\nimport { CircleStencil, Cropper } from 'vue-advanced-cropper';\nimport 'vue-advanced-cropper/dist/style.css';\n\nfunction getMimeType(file, fallback = null) {\n    const byteArray = (new Uint8Array(file)).subarray(0, 4);\n    let header = '';\n    for (let i = 0; i < byteArray.length; i++) {\n    header += byteArray[i].toString(16);\n    }\n    switch (header) {\n    case \"89504e47\":\n    return \"image/png\";\n    case \"47494638\":\n    return \"image/gif\";\n    case \"ffd8ffe0\":\n    case \"ffd8ffe1\":\n    case \"ffd8ffe2\":\n    case \"ffd8ffe3\":\n    case \"ffd8ffe8\":\n    return \"image/jpeg\";\n    default:\n    return fallback;\n    }\n}\n\nexport default {\n    components: {\n    Cropper,CircleStencil\n    },\n    data() {\n    return {\n    // img: 'https://images.pexels.com/photos/4323307/pexels-photo-4323307.jpeg',\n    img:{\n    src: null,\n    type:null\n    }\n    };\n    },\n    methods: {\n    change({ coordinates, canvas }) {\n    console.log(coordinates, canvas);\n    },\n    crop() {\n    const { canvas } = this.$refs.cropper.getResult();\n    canvas.toBlob((blob) => {\n    // Do something with blob: upload to a server, download and etc.\n    }, this.image.type);\n    },\n    reset() {\n    this.image = {\n    src: null,\n    type: null\n    }\n    },\n    loadImage(event) {\n        // Reference to the DOM input element\n        const { files } = event.target;\n        // Ensure that you have a file before attempting to read it\n        if (files && files[0]) {\n        // 1. Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n        if (this.image.src) {\n        URL.revokeObjectURL(this.image.src)\n        }\n        // 2. Create the blob link to the file to optimize performance:\n        const blob = URL.createObjectURL(files[0]);\n        // 3. The steps below are designated to determine a file mime type to use it during the \n        // getting of a cropped image from the canvas. You can replace it them by the following string, \n        // but the type will be derived from the extension and it can lead to an incorrect result:\n        //\n        // this.image = {\n        // src: blob;\n        // type: files[0].type\n        // }\n        // Create a new FileReader to read this image binary data\n        const reader = new FileReader();\n        // Define a callback function to run, when FileReader finishes its job\n        reader.onload = (e) => {\n        // Note: arrow function used here, so that \"this.image\" refers to the image of Vue component\n        this.image = {\n        // Set the image source (it will look like blob:http://example.com/2c5270a5-18b5-406e-a4fb-07427f5e7b94)\n        src: blob,\n        // Determine the image type to preserve it during the extracting the image from canvas:\n        type: getMimeType(e.target.result, files[0].type),\n        };\n        };\n        // Start the reader job - read file as a data url (base64 format)\n        reader.readAsArrayBuffer(files[0]);\n        }\n        },\n    },\n    destroyed() {\n    // Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n    if (this.image.src) {\n    URL.revokeObjectURL(this.image.src)\n    }\n    }\n\n\n\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}