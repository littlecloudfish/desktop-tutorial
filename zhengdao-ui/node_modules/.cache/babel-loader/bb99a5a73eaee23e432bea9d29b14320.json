{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport BaseMixin from './AvBase';\n/**\n * Component props\n */\n\nconst props = {\n  /**\n   * prop: 'fft-size'\n   * Represents the window size in samples that is used when performing\n   * a Fast Fourier Transform (FFT) to get frequency domain data.\n   * Must be power of 2 between 2^5 and 2^15\n   * Default: 1024\n   */\n  fftSize: {\n    type: Number,\n    default: 1024\n  },\n\n  /**\n   * prop: 'canv-width'\n   * Canvas element width. Default 100\n   */\n  canvWidth: {\n    type: Number,\n    default: 100\n  },\n\n  /**\n   * prop: 'canv-height'\n   * Canvas element height. Default 100\n   */\n  canvHeight: {\n    type: Number,\n    default: 100\n  },\n\n  /**\n   * prop: 'radius'\n   * Set cercle radius. If zero will be calculated from canvas\n   * width: (canv-width / 2) * 0.7\n   * Default: 0\n   */\n  radius: {\n    type: Number,\n    default: 0\n  },\n\n  /**\n   * prop: 'line-width'\n   * Frequency bit line width to draw.\n   */\n  lineWidth: {\n    type: Number,\n    default: 1\n  },\n\n  /**\n   * prop: 'line-space'\n   * Space between lines to draw.\n   */\n  lineSpace: {\n    type: Number,\n    default: 1\n  },\n\n  /**\n   * prop: 'outline-color'\n   * Outline (contour) style RGB color.\n   * Default: #00f\n   */\n  outlineColor: {\n    type: String,\n    default: '#0000FF'\n  },\n\n  /**\n   * prop: 'outline-width'\n   * Outline (contour) line width. Float value.\n   * Default: 0.3\n   */\n  outlineWidth: {\n    type: Number,\n    default: 0.3\n  },\n\n  /**\n   * prop: 'bar-width'\n   * Frequency graph bar width.\n   */\n  barWidth: {\n    type: Number,\n    default: 1\n  },\n\n  /**\n   * prop: 'bar-length'\n   * Frequency graph bar length.\n   * Default is a difference between radius and canvas width.\n   */\n  barLength: {\n    type: Number,\n    default: 0\n  },\n\n  /**\n   * prop: 'bar-color'\n   * Bar style RGB color or radient gradient when array.\n   * Default: [ #FFFFFF, #0000FF ]\n   */\n  barColor: {\n    type: [String, Array],\n    default: () => ['#FFFFFF', '#0000FF']\n  },\n\n  /**\n   * prop: 'progress'\n   * Draw play progress meter.\n   * Default: false\n   */\n  progress: {\n    type: Boolean,\n    default: true\n  },\n\n  /**\n   * prop: 'progress-width'\n   * Progress meter width.\n   * Default: 1\n   */\n  progressWidth: {\n    type: Number,\n    default: 1\n  },\n\n  /**\n   * prop: 'progress-color'\n   * Progress meter color.\n   * Default: 1\n   */\n  progressColor: {\n    type: String,\n    default: '#0000FF'\n  },\n\n  /**\n   * prop: 'progress-clockwise'\n   * Progress meter arc draw direction. Default clockwise\n   * Default: true\n   */\n  progressClockwise: {\n    type: Boolean,\n    default: false\n  },\n\n  /**\n   * prop: 'outline-meter-space'\n   * Space between outline and progress meter.\n   * Default: 2\n   */\n  outlineMeterSpace: {\n    type: Number,\n    default: 3\n  },\n\n  /**\n   * prop: 'playtime'\n   * Draw playtime text in the center of the circle.\n   * Default: false\n   */\n  playtime: {\n    type: Boolean,\n    default: false\n  },\n\n  /**\n   * prop: 'playtime-font'\n   * Played time print font.\n   * Default: '14px Monaco'\n   */\n  playtimeFont: {\n    type: String,\n    default: '14px Monaco'\n  },\n\n  /**\n  * prop: 'playtime-color'\n  * Played time font color.\n  * Default: '#00f'\n  */\n  playtimeColor: {\n    type: String,\n    default: '#00f'\n  },\n\n  /**\n   * prop: 'rotate-graph'\n   * Rotate graph clockwise enable.\n   * Default: false\n   */\n  rotateGraph: {\n    type: Boolean,\n    default: false\n  },\n\n  /**\n   * prop: 'rotate-speed'\n   * Rotate graph speed.\n   * Default: 0.001\n   */\n  rotateSpeed: {\n    type: Number,\n    default: 0.001\n  }\n};\n/**\n * Component AvCircle\n */\n\nconst AvCircle = {\n  name: 'av-circle',\n  mixins: [BaseMixin],\n  props,\n\n  data() {\n    return {\n      animId: null,\n      rotate: 1.5,\n      audio: null,\n      analyser: null,\n      ctx: null,\n      audioCtx: null\n    };\n  },\n\n  methods: {\n    /**\n     * Main loop. Draws visualization.\n     */\n    mainLoop: function () {\n      const cx = this.canvWidth / 2; // center X\n\n      const cy = this.canvHeight / 2; // center Y\n\n      const r = this.radius ? this.radius : Math.round(this.canvWidth / 2 * 0.7);\n      const lineWidth = this.lineWidth;\n      const lineSpace = this.lineSpace;\n      const arcStep = Math.ceil(lineWidth + lineSpace);\n      const frqBits = this.analyser.frequencyBinCount;\n      const data = new Uint8Array(frqBits);\n      const step = (lineWidth + lineSpace) / data.length * (2 * Math.PI);\n      const barLen = this.barLength > 0 ? this.barLength : this.canvWidth / 2 - r;\n\n      let angle = Math.PI * this._rotate(); // start from top\n\n\n      this._setCanvas();\n\n      this.analyser.getByteFrequencyData(data); // contour outline\n\n      if (this.outlineWidth > 0) {\n        this._drawOutline(r, cx, cy);\n      } // draw play progress meter\n\n\n      if (this.progress) {\n        this._drawProgress(r, cx, cy);\n      } // draw played time\n\n\n      if (this.playtime) {\n        this._drawPlaytime(cx, cy);\n      } // circle bar lines\n\n\n      this.ctx.lineWidth = this.barWidth;\n      this.ctx.strokeStyle = this._setBarColor(cx, cy);\n      data.forEach((_, index) => {\n        angle += step;\n\n        if (index % arcStep) {\n          return;\n        }\n\n        const bits = Math.round(data.slice(index, index + arcStep).reduce((v, t) => t + v, 0) / arcStep);\n        const blen = r + bits / 255.0 * barLen;\n        this.ctx.beginPath();\n        this.ctx.moveTo(r * Math.cos(angle) + cx, r * Math.sin(angle) + cy);\n        this.ctx.lineTo(blen * Math.cos(angle) + cx, blen * Math.sin(angle) + cy);\n        this.ctx.stroke();\n      });\n      this.animId = requestAnimationFrame(this.mainLoop);\n    },\n\n    /**\n     * Canvas clear background fill\n     * @private\n     */\n    _setCanvas: function () {\n      this.ctx.clearRect(0, 0, this.canvWidth, this.canvHeight);\n      if (!this.canvFillColor) return;\n      this.ctx.fillStyle = Array.isArray(this.canvFillColor) ? this.fillGradient(this.canvFillColor) : this.canvFillColor;\n      this.ctx.fillRect(0, 0, this.canvWidth, this.canvHeight);\n    },\n\n    /**\n     * Draw play progress meter\n     */\n    _drawProgress: function (r, cx, cy) {\n      const elapsed = this.audio.currentTime / this.audio.duration * 2 * Math.PI;\n      const angleEnd = Math.PI * 1.5 + elapsed;\n      if (!elapsed) return;\n      this.ctx.lineWidth = this.progressWidth;\n      this.ctx.strokeStyle = this.progressColor;\n      this.ctx.beginPath();\n      this.ctx.arc(cx, cy, r - this.outlineWidth - this.outlineMeterSpace, 1.5 * Math.PI, angleEnd, this.progressClockwise);\n      this.ctx.stroke();\n    },\n\n    /**\n     * Draw outline circle\n     */\n    _drawOutline: function (r, cx, cy) {\n      this.ctx.beginPath();\n      this.ctx.strokeStyle = this.outlineColor;\n      this.ctx.lineWidth = this.outlineWidth;\n      this.ctx.arc(cx, cy, r, 0, 2 * Math.PI);\n      this.ctx.stroke();\n    },\n\n    /**\n     * Draw played time\n     */\n    _drawPlaytime: function (cx, cy) {\n      const m = Math.floor(this.audio.currentTime / 60);\n      const sec = Math.floor(this.audio.currentTime) % 60;\n      const s = sec < 10 ? `0${sec}` : `${sec}`;\n      const text = `${m}:${s}`;\n      const tsizew = Math.ceil(this.ctx.measureText(text).width);\n      this.ctx.font = this.playtimeFont;\n      this.ctx.fillStyle = this.playtimeColor;\n      this.ctx.fillText(text, cx - Math.round(tsizew / 2), cy + 0.25 * parseInt(this.playtimeFont));\n    },\n\n    /**\n     * If rotate is enabled will return rotated angle\n     */\n    _rotate: function () {\n      if (this.rotateGraph) {\n        this.rotate = this.rotate === 3.5 ? 1.5 : this.rotate + this.rotateSpeed;\n      } else {\n        this.rotate = 1.5;\n      }\n\n      return this.rotate;\n    },\n\n    /**\n     * Set bars color.\n     */\n    _setBarColor: function (cx, cy) {\n      if (!Array.isArray(this.barColor)) {\n        return this.barColor;\n      }\n\n      const gradient = this.ctx.createRadialGradient(cx, cy, this.canvWidth / 2, cx, cy, 0);\n      let offset = 0;\n      this.barColor.forEach(color => {\n        gradient.addColorStop(offset, color);\n        offset += 1 / this.barColor.length;\n      });\n      return gradient;\n    }\n  }\n};\nexport default AvCircle;","map":{"version":3,"names":["BaseMixin","props","fftSize","type","Number","default","canvWidth","canvHeight","radius","lineWidth","lineSpace","outlineColor","String","outlineWidth","barWidth","barLength","barColor","Array","progress","Boolean","progressWidth","progressColor","progressClockwise","outlineMeterSpace","playtime","playtimeFont","playtimeColor","rotateGraph","rotateSpeed","AvCircle","name","mixins","data","animId","rotate","audio","analyser","ctx","audioCtx","methods","mainLoop","cx","cy","r","Math","round","arcStep","ceil","frqBits","frequencyBinCount","Uint8Array","step","length","PI","barLen","angle","_rotate","_setCanvas","getByteFrequencyData","_drawOutline","_drawProgress","_drawPlaytime","strokeStyle","_setBarColor","forEach","_","index","bits","slice","reduce","v","t","blen","beginPath","moveTo","cos","sin","lineTo","stroke","requestAnimationFrame","clearRect","canvFillColor","fillStyle","isArray","fillGradient","fillRect","elapsed","currentTime","duration","angleEnd","arc","m","floor","sec","s","text","tsizew","measureText","width","font","fillText","parseInt","gradient","createRadialGradient","offset","color","addColorStop"],"sources":["/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/vue-audio-visual/src/components/AvCircle.js"],"sourcesContent":["import BaseMixin from './AvBase'\n\n/**\n * Component props\n */\nconst props = {\n  /**\n   * prop: 'fft-size'\n   * Represents the window size in samples that is used when performing\n   * a Fast Fourier Transform (FFT) to get frequency domain data.\n   * Must be power of 2 between 2^5 and 2^15\n   * Default: 1024\n   */\n  fftSize: {\n    type: Number,\n    default: 1024\n  },\n  /**\n   * prop: 'canv-width'\n   * Canvas element width. Default 100\n   */\n  canvWidth: {\n    type: Number,\n    default: 100\n  },\n  /**\n   * prop: 'canv-height'\n   * Canvas element height. Default 100\n   */\n  canvHeight: {\n    type: Number,\n    default: 100\n  },\n  /**\n   * prop: 'radius'\n   * Set cercle radius. If zero will be calculated from canvas\n   * width: (canv-width / 2) * 0.7\n   * Default: 0\n   */\n  radius: {\n    type: Number,\n    default: 0\n  },\n  /**\n   * prop: 'line-width'\n   * Frequency bit line width to draw.\n   */\n  lineWidth: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'line-space'\n   * Space between lines to draw.\n   */\n  lineSpace: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'outline-color'\n   * Outline (contour) style RGB color.\n   * Default: #00f\n   */\n  outlineColor: {\n    type: String,\n    default: '#0000FF'\n  },\n  /**\n   * prop: 'outline-width'\n   * Outline (contour) line width. Float value.\n   * Default: 0.3\n   */\n  outlineWidth: {\n    type: Number,\n    default: 0.3\n  },\n  /**\n   * prop: 'bar-width'\n   * Frequency graph bar width.\n   */\n  barWidth: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'bar-length'\n   * Frequency graph bar length.\n   * Default is a difference between radius and canvas width.\n   */\n  barLength: {\n    type: Number,\n    default: 0\n  },\n  /**\n   * prop: 'bar-color'\n   * Bar style RGB color or radient gradient when array.\n   * Default: [ #FFFFFF, #0000FF ]\n   */\n  barColor: {\n    type: [String, Array],\n    default: () => [ '#FFFFFF', '#0000FF' ]\n  },\n  /**\n   * prop: 'progress'\n   * Draw play progress meter.\n   * Default: false\n   */\n  progress: {\n    type: Boolean,\n    default: true\n  },\n  /**\n   * prop: 'progress-width'\n   * Progress meter width.\n   * Default: 1\n   */\n  progressWidth: {\n    type: Number,\n    default: 1\n  },\n  /**\n   * prop: 'progress-color'\n   * Progress meter color.\n   * Default: 1\n   */\n  progressColor: {\n    type: String,\n    default: '#0000FF'\n  },\n  /**\n   * prop: 'progress-clockwise'\n   * Progress meter arc draw direction. Default clockwise\n   * Default: true\n   */\n  progressClockwise: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * prop: 'outline-meter-space'\n   * Space between outline and progress meter.\n   * Default: 2\n   */\n  outlineMeterSpace: {\n    type: Number,\n    default: 3\n  },\n  /**\n   * prop: 'playtime'\n   * Draw playtime text in the center of the circle.\n   * Default: false\n   */\n  playtime: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * prop: 'playtime-font'\n   * Played time print font.\n   * Default: '14px Monaco'\n   */\n  playtimeFont: {\n    type: String,\n    default: '14px Monaco'\n  },\n  /**\n  * prop: 'playtime-color'\n  * Played time font color.\n  * Default: '#00f'\n  */\n  playtimeColor: {\n    type: String,\n    default: '#00f'\n  },\n  /**\n   * prop: 'rotate-graph'\n   * Rotate graph clockwise enable.\n   * Default: false\n   */\n  rotateGraph: {\n    type: Boolean,\n    default: false\n  },\n  /**\n   * prop: 'rotate-speed'\n   * Rotate graph speed.\n   * Default: 0.001\n   */\n  rotateSpeed: {\n    type: Number,\n    default: 0.001\n  }\n}\n\n/**\n * Component AvCircle\n */\nconst AvCircle = {\n  name: 'av-circle',\n  mixins: [ BaseMixin ],\n  props,\n  data () {\n    return {\n      animId: null,\n      rotate: 1.5,\n      audio: null,\n      analyser: null,\n      ctx: null,\n      audioCtx: null\n    }\n  },\n  methods: {\n    /**\n     * Main loop. Draws visualization.\n     */\n    mainLoop: function () {\n      const cx = this.canvWidth / 2 // center X\n      const cy = this.canvHeight / 2 // center Y\n      const r = this.radius ? this.radius : Math.round(this.canvWidth / 2 * 0.7)\n      const lineWidth = this.lineWidth\n      const lineSpace = this.lineSpace\n      const arcStep = Math.ceil(lineWidth + lineSpace)\n      const frqBits = this.analyser.frequencyBinCount\n      const data = new Uint8Array(frqBits)\n      const step = ((lineWidth + lineSpace) / data.length) * (2 * Math.PI)\n      const barLen = this.barLength > 0\n        ? this.barLength\n        : (this.canvWidth / 2) - r\n      let angle = Math.PI * this._rotate() // start from top\n\n      this._setCanvas()\n      this.analyser.getByteFrequencyData(data)\n\n      // contour outline\n      if (this.outlineWidth > 0) {\n        this._drawOutline(r, cx, cy)\n      }\n\n      // draw play progress meter\n      if (this.progress) {\n        this._drawProgress(r, cx, cy)\n      }\n\n      // draw played time\n      if (this.playtime) {\n        this._drawPlaytime(cx, cy)\n      }\n\n      // circle bar lines\n      this.ctx.lineWidth = this.barWidth\n      this.ctx.strokeStyle = this._setBarColor(cx, cy)\n\n      data.forEach((_, index) => {\n        angle += step\n        if (index % arcStep) {\n          return\n        }\n        const bits = Math.round(data.slice(index, index + arcStep)\n          .reduce((v, t) => t + v, 0) / arcStep)\n\n        const blen = r + (bits / 255.0 * barLen)\n        this.ctx.beginPath()\n        this.ctx.moveTo(r * Math.cos(angle) + cx, r * Math.sin(angle) + cy)\n        this.ctx.lineTo(blen * Math.cos(angle) + cx, blen * Math.sin(angle) + cy)\n        this.ctx.stroke()\n      })\n\n      this.animId = requestAnimationFrame(this.mainLoop)\n    },\n    /**\n     * Canvas clear background fill\n     * @private\n     */\n    _setCanvas: function () {\n      this.ctx.clearRect(0, 0, this.canvWidth, this.canvHeight)\n\n      if (!this.canvFillColor) return\n\n      this.ctx.fillStyle = Array.isArray(this.canvFillColor)\n        ? this.fillGradient(this.canvFillColor)\n        : this.canvFillColor\n      this.ctx.fillRect(0, 0, this.canvWidth, this.canvHeight)\n    },\n    /**\n     * Draw play progress meter\n     */\n    _drawProgress: function (r, cx, cy) {\n      const elapsed = this.audio.currentTime / this.audio.duration * 2 * Math.PI\n      const angleEnd = Math.PI * 1.5 + elapsed\n\n      if (!elapsed) return\n\n      this.ctx.lineWidth = this.progressWidth\n      this.ctx.strokeStyle = this.progressColor\n\n      this.ctx.beginPath()\n      this.ctx.arc(cx, cy, r - this.outlineWidth - this.outlineMeterSpace,\n        1.5 * Math.PI, angleEnd, this.progressClockwise)\n      this.ctx.stroke()\n    },\n    /**\n     * Draw outline circle\n     */\n    _drawOutline: function (r, cx, cy) {\n      this.ctx.beginPath()\n      this.ctx.strokeStyle = this.outlineColor\n      this.ctx.lineWidth = this.outlineWidth\n      this.ctx.arc(cx, cy, r, 0, 2 * Math.PI)\n      this.ctx.stroke()\n    },\n    /**\n     * Draw played time\n     */\n    _drawPlaytime: function (cx, cy) {\n      const m = Math.floor(this.audio.currentTime / 60)\n      const sec = Math.floor(this.audio.currentTime) % 60\n      const s = sec < 10 ? `0${sec}` : `${sec}`\n      const text = `${m}:${s}`\n      const tsizew = Math.ceil(this.ctx.measureText(text).width)\n\n      this.ctx.font = this.playtimeFont\n      this.ctx.fillStyle = this.playtimeColor\n      this.ctx.fillText(text, cx - Math.round(tsizew / 2), cy + 0.25 * parseInt(this.playtimeFont))\n    },\n    /**\n     * If rotate is enabled will return rotated angle\n     */\n    _rotate: function () {\n      if (this.rotateGraph) {\n        this.rotate = this.rotate === 3.5 ? 1.5 : this.rotate + this.rotateSpeed\n      } else {\n        this.rotate = 1.5\n      }\n      return this.rotate\n    },\n    /**\n     * Set bars color.\n     */\n    _setBarColor: function (cx, cy) {\n      if (!Array.isArray(this.barColor)) {\n        return this.barColor\n      }\n      const gradient = this.ctx.createRadialGradient(cx, cy, this.canvWidth / 2, cx, cy, 0)\n      let offset = 0\n\n      this.barColor.forEach(color => {\n        gradient.addColorStop(offset, color)\n        offset += (1 / this.barColor.length)\n      })\n      return gradient\n    }\n  }\n}\n\nexport default AvCircle\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}