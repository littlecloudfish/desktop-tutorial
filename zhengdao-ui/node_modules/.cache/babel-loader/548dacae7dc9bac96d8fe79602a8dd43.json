{"ast":null,"code":"import { renderSlot as _renderSlot, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"data-active\", \"onDragenter\", \"onDragover\", \"onDragleave\", \"onDrop\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    \"data-active\": $setup.active,\n    onDragenter: _withModifiers($setup.setActive, [\"prevent\"]),\n    onDragover: _withModifiers($setup.setActive, [\"prevent\"]),\n    onDragleave: _withModifiers($setup.setInactive, [\"prevent\"]),\n    onDrop: _withModifiers($setup.onDrop, [\"prevent\"])\n  }, [_renderSlot(_ctx.$slots, \"default\", {\n    dropZoneActive: $setup.active\n  })], 40\n  /* PROPS, HYDRATE_EVENTS */\n  , _hoisted_1);\n}","map":{"version":3,"mappings":";;;uBACCA,oBAEM,KAFN,EAEM;IAFA,eAAaC,aAEb;IAFsBC,WAAS,iBAAUD,gBAAV,EAAmB,WAAnB,CAE/B;IAFqDE,UAAQ,iBAAUF,gBAAV,EAAmB,WAAnB,CAE7D;IAFmFG,WAAS,iBAAUH,kBAAV,EAAqB,WAArB,CAE5F;IAFoHI,MAAI,iBAAUJ,aAAV,EAAgB,WAAhB;EAExH,CAFN,GACCK,YAAsCC,WAAtC,EAAsC,SAAtC,EAAsC;IAA/BC,cAAc,EAAEP;EAAe,CAAtC,EADD;;EAAA","names":["_createElementBlock","$setup","onDragenter","onDragover","onDragleave","onDrop","_renderSlot","_ctx","dropZoneActive"],"sourceRoot":"","sources":["/home/little/Documents/music_web/startproj/zhengdao-ui/src/components/function/DropZone.vue"],"sourcesContent":["<template>\n\t<div :data-active=\"active\" @dragenter.prevent=\"setActive\" @dragover.prevent=\"setActive\" @dragleave.prevent=\"setInactive\" @drop.prevent=\"onDrop\">\n\t\t<slot :dropZoneActive=\"active\"></slot>\n\t</div>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue'\nconst emit = defineEmits(['files-dropped'])\n\nlet active = ref(true)\nlet inActiveTimeout = null\n\n// setActive and setInactive use timeouts, so that when you drag an item over a child element,\n// the dragleave event that is fired won't cause a flicker. A few ms should be plenty of\n// time to wait for the next dragenter event to clear the timeout and set it back to active.\nfunction setActive() {\n\tactive.value = true\n\tclearTimeout(inActiveTimeout)\n}\nfunction setInactive() {\n\tinActiveTimeout = setTimeout(() => {\n\t\tactive.value = false\n\t}, 50)\n}\n\nfunction onDrop(e) {\n\tsetInactive()\n\temit('files-dropped', [...e.dataTransfer.files])\n}\n\nfunction preventDefaults(e) {\n\te.preventDefault()\n}\n\nconst events = ['dragenter', 'dragover', 'dragleave', 'drop']\n\nonMounted(() => {\n\tevents.forEach((eventName) => {\n\t\tdocument.body.addEventListener(eventName, preventDefaults)\n\t})\n})\n\nonUnmounted(() => {\n\tevents.forEach((eventName) => {\n\t\tdocument.body.removeEventListener(eventName, preventDefaults)\n\t})\n})\n</script>"]},"metadata":{},"sourceType":"module"}