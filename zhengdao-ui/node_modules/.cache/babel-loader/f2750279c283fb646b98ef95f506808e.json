{"ast":null,"code":"import \"core-js/modules/es.reflect.apply.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.reflect.to-string-tag.js\";\nimport normalizeWheel from 'normalize-wheel-es';\n\nvar mousewheel = function mousewheel(element, callback) {\n  if (element && element.addEventListener) {\n    var fn = function fn(event) {\n      var normalized = normalizeWheel(event);\n      callback && Reflect.apply(callback, this, [event, normalized]);\n    };\n\n    element.addEventListener(\"wheel\", fn, {\n      passive: true\n    });\n  }\n};\n\nvar Mousewheel = {\n  beforeMount: function beforeMount(el, binding) {\n    mousewheel(el, binding.value);\n  }\n};\nexport { Mousewheel as default };","map":{"version":3,"mappings":";;;;;AACA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAASC,OAAT,EAAkBC,QAAlB,EAA4B;EAC7C,IAAID,OAAO,IAAIA,OAAO,CAACE,gBAAvB,EAAyC;IACvC,IAAMC,EAAE,GAAG,SAALA,EAAK,CAASC,KAAT,EAAgB;MACzB,IAAMC,UAAU,GAAGC,cAAc,CAACF,KAAD,CAAjC;MACAH,QAAQ,IAAIM,OAAO,CAACC,KAAR,CAAcP,QAAd,EAAwB,IAAxB,EAA8B,CAACG,KAAD,EAAQC,UAAR,CAA9B,CAAZ;IACD,CAHD;;IAIAL,OAAO,CAACE,gBAAR,CAAyB,OAAzB,EAAkCC,EAAlC,EAAsC;MAAEM,OAAO,EAAE;IAAX,CAAtC;EACD;AACF,CARD;;AASK,IAACC,UAAU,GAAG;EACjBC,WADiB,uBACLC,EADK,EACDC,OADC,EACQ;IACvBd,UAAU,CAACa,EAAD,EAAKC,OAAO,CAACC,KAAb,CAAV;EACD;AAHgB,CAAd","names":["mousewheel","element","callback","addEventListener","fn","event","normalized","normalizeWheel","Reflect","apply","passive","Mousewheel","beforeMount","el","binding","value"],"sources":["../../../../../packages/directives/mousewheel/index.ts"],"sourcesContent":["import normalizeWheel from 'normalize-wheel-es'\n\nimport type { DirectiveBinding, ObjectDirective } from 'vue'\nimport type { NormalizedWheelEvent } from 'normalize-wheel-es'\n\nconst mousewheel = function (\n  element: HTMLElement,\n  callback: (e: WheelEvent, normalized: NormalizedWheelEvent) => void\n) {\n  if (element && element.addEventListener) {\n    const fn = function (this: HTMLElement, event: WheelEvent) {\n      const normalized = normalizeWheel(event)\n      callback && Reflect.apply(callback, this, [event, normalized])\n    }\n    element.addEventListener('wheel', fn, { passive: true })\n  }\n}\n\nconst Mousewheel: ObjectDirective = {\n  beforeMount(el: HTMLElement, binding: DirectiveBinding) {\n    mousewheel(el, binding.value)\n  },\n}\n\nexport default Mousewheel\n"]},"metadata":{},"sourceType":"module"}