{"ast":null,"code":"import _objectSpread from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport { ref, getCurrentInstance, computed, unref, watch } from 'vue';\nimport { getRowIdentity, walkTreeNode } from '../util.mjs';\n\nfunction useTree(watcherData) {\n  var expandRowKeys = ref([]);\n  var treeData = ref({});\n  var indent = ref(16);\n  var lazy = ref(false);\n  var lazyTreeNodeMap = ref({});\n  var lazyColumnIdentifier = ref(\"hasChildren\");\n  var childrenColumnName = ref(\"children\");\n  var instance = getCurrentInstance();\n  var normalizedData = computed(function () {\n    if (!watcherData.rowKey.value) return {};\n    var data = watcherData.data.value || [];\n    return normalize(data);\n  });\n  var normalizedLazyNode = computed(function () {\n    var rowKey = watcherData.rowKey.value;\n    var keys = Object.keys(lazyTreeNodeMap.value);\n    var res = {};\n    if (!keys.length) return res;\n    keys.forEach(function (key) {\n      if (lazyTreeNodeMap.value[key].length) {\n        var item = {\n          children: []\n        };\n        lazyTreeNodeMap.value[key].forEach(function (row) {\n          var currentRowKey = getRowIdentity(row, rowKey);\n          item.children.push(currentRowKey);\n\n          if (row[lazyColumnIdentifier.value] && !res[currentRowKey]) {\n            res[currentRowKey] = {\n              children: []\n            };\n          }\n        });\n        res[key] = item;\n      }\n    });\n    return res;\n  });\n\n  var normalize = function normalize(data) {\n    var rowKey = watcherData.rowKey.value;\n    var res = {};\n    walkTreeNode(data, function (parent, children, level) {\n      var parentId = getRowIdentity(parent, rowKey);\n\n      if (Array.isArray(children)) {\n        res[parentId] = {\n          children: children.map(function (row) {\n            return getRowIdentity(row, rowKey);\n          }),\n          level: level\n        };\n      } else if (lazy.value) {\n        res[parentId] = {\n          children: [],\n          lazy: true,\n          level: level\n        };\n      }\n    }, childrenColumnName.value, lazyColumnIdentifier.value);\n    return res;\n  };\n\n  var updateTreeData = function updateTreeData() {\n    var ifChangeExpandRowKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    var ifExpandAll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (_a) {\n      return (_a = instance.store) == null ? void 0 : _a.states.defaultExpandAll.value;\n    }();\n\n    var _a2;\n\n    var nested = normalizedData.value;\n    var normalizedLazyNode_ = normalizedLazyNode.value;\n    var keys = Object.keys(nested);\n    var newTreeData = {};\n\n    if (keys.length) {\n      var oldTreeData = unref(treeData);\n      var rootLazyRowKeys = [];\n\n      var getExpanded = function getExpanded(oldValue, key) {\n        if (ifChangeExpandRowKeys) {\n          if (expandRowKeys.value) {\n            return ifExpandAll || expandRowKeys.value.includes(key);\n          } else {\n            return !!(ifExpandAll || (oldValue == null ? void 0 : oldValue.expanded));\n          }\n        } else {\n          var included = ifExpandAll || expandRowKeys.value && expandRowKeys.value.includes(key);\n          return !!((oldValue == null ? void 0 : oldValue.expanded) || included);\n        }\n      };\n\n      keys.forEach(function (key) {\n        var oldValue = oldTreeData[key];\n\n        var newValue = _objectSpread({}, nested[key]);\n\n        newValue.expanded = getExpanded(oldValue, key);\n\n        if (newValue.lazy) {\n          var _ref = oldValue || {},\n              _ref$loaded = _ref.loaded,\n              loaded = _ref$loaded === void 0 ? false : _ref$loaded,\n              _ref$loading = _ref.loading,\n              loading = _ref$loading === void 0 ? false : _ref$loading;\n\n          newValue.loaded = !!loaded;\n          newValue.loading = !!loading;\n          rootLazyRowKeys.push(key);\n        }\n\n        newTreeData[key] = newValue;\n      });\n      var lazyKeys = Object.keys(normalizedLazyNode_);\n\n      if (lazy.value && lazyKeys.length && rootLazyRowKeys.length) {\n        lazyKeys.forEach(function (key) {\n          var oldValue = oldTreeData[key];\n          var lazyNodeChildren = normalizedLazyNode_[key].children;\n\n          if (rootLazyRowKeys.includes(key)) {\n            if (newTreeData[key].children.length !== 0) {\n              throw new Error(\"[ElTable]children must be an empty array.\");\n            }\n\n            newTreeData[key].children = lazyNodeChildren;\n          } else {\n            var _ref2 = oldValue || {},\n                _ref2$loaded = _ref2.loaded,\n                loaded = _ref2$loaded === void 0 ? false : _ref2$loaded,\n                _ref2$loading = _ref2.loading,\n                loading = _ref2$loading === void 0 ? false : _ref2$loading;\n\n            newTreeData[key] = {\n              lazy: true,\n              loaded: !!loaded,\n              loading: !!loading,\n              expanded: getExpanded(oldValue, key),\n              children: lazyNodeChildren,\n              level: \"\"\n            };\n          }\n        });\n      }\n    }\n\n    treeData.value = newTreeData;\n    (_a2 = instance.store) == null ? void 0 : _a2.updateTableScrollY();\n  };\n\n  watch(function () {\n    return expandRowKeys.value;\n  }, function () {\n    updateTreeData(true);\n  });\n  watch(function () {\n    return normalizedData.value;\n  }, function () {\n    updateTreeData();\n  });\n  watch(function () {\n    return normalizedLazyNode.value;\n  }, function () {\n    updateTreeData();\n  });\n\n  var updateTreeExpandKeys = function updateTreeExpandKeys(value) {\n    expandRowKeys.value = value;\n    updateTreeData();\n  };\n\n  var toggleTreeExpansion = function toggleTreeExpansion(row, expanded) {\n    instance.store.assertRowKey();\n    var rowKey = watcherData.rowKey.value;\n    var id = getRowIdentity(row, rowKey);\n    var data = id && treeData.value[id];\n\n    if (id && data && \"expanded\" in data) {\n      var oldExpanded = data.expanded;\n      expanded = typeof expanded === \"undefined\" ? !data.expanded : expanded;\n      treeData.value[id].expanded = expanded;\n\n      if (oldExpanded !== expanded) {\n        instance.emit(\"expand-change\", row, expanded);\n      }\n\n      instance.store.updateTableScrollY();\n    }\n  };\n\n  var loadOrToggle = function loadOrToggle(row) {\n    instance.store.assertRowKey();\n    var rowKey = watcherData.rowKey.value;\n    var id = getRowIdentity(row, rowKey);\n    var data = treeData.value[id];\n\n    if (lazy.value && data && \"loaded\" in data && !data.loaded) {\n      loadData(row, id, data);\n    } else {\n      toggleTreeExpansion(row, void 0);\n    }\n  };\n\n  var loadData = function loadData(row, key, treeNode) {\n    var load = instance.props.load;\n\n    if (load && !treeData.value[key].loaded) {\n      treeData.value[key].loading = true;\n      load(row, treeNode, function (data) {\n        if (!Array.isArray(data)) {\n          throw new TypeError(\"[ElTable] data must be an array\");\n        }\n\n        treeData.value[key].loading = false;\n        treeData.value[key].loaded = true;\n        treeData.value[key].expanded = true;\n\n        if (data.length) {\n          lazyTreeNodeMap.value[key] = data;\n        }\n\n        instance.emit(\"expand-change\", row, true);\n      });\n    }\n  };\n\n  return {\n    loadData: loadData,\n    loadOrToggle: loadOrToggle,\n    toggleTreeExpansion: toggleTreeExpansion,\n    updateTreeExpandKeys: updateTreeExpandKeys,\n    updateTreeData: updateTreeData,\n    normalize: normalize,\n    states: {\n      expandRowKeys: expandRowKeys,\n      treeData: treeData,\n      indent: indent,\n      lazy: lazy,\n      lazyTreeNodeMap: lazyTreeNodeMap,\n      lazyColumnIdentifier: lazyColumnIdentifier,\n      childrenColumnName: childrenColumnName\n    }\n  };\n}\n\nexport { useTree as default };","map":{"version":3,"mappings":"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","names":["useTree","watcherData","expandRowKeys","ref","treeData","indent","lazy","lazyTreeNodeMap","lazyColumnIdentifier","childrenColumnName","instance","getCurrentInstance","normalizedData","computed","rowKey","value","data","normalize","normalizedLazyNode","keys","Object","res","length","forEach","key","item","children","row","currentRowKey","getRowIdentity","push","walkTreeNode","parent","level","parentId","Array","isArray","map","updateTreeData","ifChangeExpandRowKeys","ifExpandAll","_a","store","states","defaultExpandAll","_a2","nested","normalizedLazyNode_","newTreeData","oldTreeData","unref","rootLazyRowKeys","getExpanded","oldValue","includes","expanded","included","newValue","loaded","loading","lazyKeys","lazyNodeChildren","Error","updateTableScrollY","watch","updateTreeExpandKeys","toggleTreeExpansion","assertRowKey","id","oldExpanded","emit","loadOrToggle","loadData","treeNode","load","props","TypeError"],"sources":["../../../../../../../packages/components/table/src/store/tree.ts"],"sourcesContent":["// @ts-nocheck\nimport { computed, getCurrentInstance, ref, unref, watch } from 'vue'\nimport { getRowIdentity, walkTreeNode } from '../util'\n\nimport type { WatcherPropsData } from '.'\nimport type { Table, TableProps } from '../table/defaults'\n\nfunction useTree<T>(watcherData: WatcherPropsData<T>) {\n  const expandRowKeys = ref<string[]>([])\n  const treeData = ref<unknown>({})\n  const indent = ref(16)\n  const lazy = ref(false)\n  const lazyTreeNodeMap = ref({})\n  const lazyColumnIdentifier = ref('hasChildren')\n  const childrenColumnName = ref('children')\n  const instance = getCurrentInstance() as Table<T>\n  const normalizedData = computed(() => {\n    if (!watcherData.rowKey.value) return {}\n    const data = watcherData.data.value || []\n    return normalize(data)\n  })\n  const normalizedLazyNode = computed(() => {\n    const rowKey = watcherData.rowKey.value\n    const keys = Object.keys(lazyTreeNodeMap.value)\n    const res = {}\n    if (!keys.length) return res\n    keys.forEach((key) => {\n      if (lazyTreeNodeMap.value[key].length) {\n        const item = { children: [] }\n        lazyTreeNodeMap.value[key].forEach((row) => {\n          const currentRowKey = getRowIdentity(row, rowKey)\n          item.children.push(currentRowKey)\n          if (row[lazyColumnIdentifier.value] && !res[currentRowKey]) {\n            res[currentRowKey] = { children: [] }\n          }\n        })\n        res[key] = item\n      }\n    })\n    return res\n  })\n\n  const normalize = (data) => {\n    const rowKey = watcherData.rowKey.value\n    const res = {}\n    walkTreeNode(\n      data,\n      (parent, children, level) => {\n        const parentId = getRowIdentity(parent, rowKey)\n        if (Array.isArray(children)) {\n          res[parentId] = {\n            children: children.map((row) => getRowIdentity(row, rowKey)),\n            level,\n          }\n        } else if (lazy.value) {\n          // 当 children 不存在且 lazy 为 true，该节点即为懒加载的节点\n          res[parentId] = {\n            children: [],\n            lazy: true,\n            level,\n          }\n        }\n      },\n      childrenColumnName.value,\n      lazyColumnIdentifier.value\n    )\n    return res\n  }\n\n  const updateTreeData = (\n    ifChangeExpandRowKeys = false,\n    ifExpandAll = instance.store?.states.defaultExpandAll.value\n  ) => {\n    const nested = normalizedData.value\n    const normalizedLazyNode_ = normalizedLazyNode.value\n    const keys = Object.keys(nested)\n    const newTreeData = {}\n    if (keys.length) {\n      const oldTreeData = unref(treeData)\n      const rootLazyRowKeys = []\n      const getExpanded = (oldValue, key) => {\n        if (ifChangeExpandRowKeys) {\n          if (expandRowKeys.value) {\n            return ifExpandAll || expandRowKeys.value.includes(key)\n          } else {\n            return !!(ifExpandAll || oldValue?.expanded)\n          }\n        } else {\n          const included =\n            ifExpandAll ||\n            (expandRowKeys.value && expandRowKeys.value.includes(key))\n          return !!(oldValue?.expanded || included)\n        }\n      }\n      // 合并 expanded 与 display，确保数据刷新后，状态不变\n      keys.forEach((key) => {\n        const oldValue = oldTreeData[key]\n        const newValue = { ...nested[key] }\n        newValue.expanded = getExpanded(oldValue, key)\n        if (newValue.lazy) {\n          const { loaded = false, loading = false } = oldValue || {}\n          newValue.loaded = !!loaded\n          newValue.loading = !!loading\n          rootLazyRowKeys.push(key)\n        }\n        newTreeData[key] = newValue\n      })\n      // 根据懒加载数据更新 treeData\n      const lazyKeys = Object.keys(normalizedLazyNode_)\n      if (lazy.value && lazyKeys.length && rootLazyRowKeys.length) {\n        lazyKeys.forEach((key) => {\n          const oldValue = oldTreeData[key]\n          const lazyNodeChildren = normalizedLazyNode_[key].children\n          if (rootLazyRowKeys.includes(key)) {\n            // 懒加载的 root 节点，更新一下原有的数据，原来的 children 一定是空数组\n            if (newTreeData[key].children.length !== 0) {\n              throw new Error('[ElTable]children must be an empty array.')\n            }\n            newTreeData[key].children = lazyNodeChildren\n          } else {\n            const { loaded = false, loading = false } = oldValue || {}\n            newTreeData[key] = {\n              lazy: true,\n              loaded: !!loaded,\n              loading: !!loading,\n              expanded: getExpanded(oldValue, key),\n              children: lazyNodeChildren,\n              level: '',\n            }\n          }\n        })\n      }\n    }\n    treeData.value = newTreeData\n    instance.store?.updateTableScrollY()\n  }\n\n  watch(\n    () => expandRowKeys.value,\n    () => {\n      updateTreeData(true)\n    }\n  )\n\n  watch(\n    () => normalizedData.value,\n    () => {\n      updateTreeData()\n    }\n  )\n  watch(\n    () => normalizedLazyNode.value,\n    () => {\n      updateTreeData()\n    }\n  )\n\n  const updateTreeExpandKeys = (value: string[]) => {\n    expandRowKeys.value = value\n    updateTreeData()\n  }\n\n  const toggleTreeExpansion = (row: T, expanded?: boolean) => {\n    instance.store.assertRowKey()\n\n    const rowKey = watcherData.rowKey.value\n    const id = getRowIdentity(row, rowKey)\n    const data = id && treeData.value[id]\n    if (id && data && 'expanded' in data) {\n      const oldExpanded = data.expanded\n      expanded = typeof expanded === 'undefined' ? !data.expanded : expanded\n      treeData.value[id].expanded = expanded\n      if (oldExpanded !== expanded) {\n        instance.emit('expand-change', row, expanded)\n      }\n      instance.store.updateTableScrollY()\n    }\n  }\n\n  const loadOrToggle = (row) => {\n    instance.store.assertRowKey()\n    const rowKey = watcherData.rowKey.value\n    const id = getRowIdentity(row, rowKey)\n    const data = treeData.value[id]\n    if (lazy.value && data && 'loaded' in data && !data.loaded) {\n      loadData(row, id, data)\n    } else {\n      toggleTreeExpansion(row, undefined)\n    }\n  }\n\n  const loadData = (row: T, key: string, treeNode) => {\n    const { load } = instance.props as unknown as TableProps<T>\n    if (load && !treeData.value[key].loaded) {\n      treeData.value[key].loading = true\n      load(row, treeNode, (data) => {\n        if (!Array.isArray(data)) {\n          throw new TypeError('[ElTable] data must be an array')\n        }\n        treeData.value[key].loading = false\n        treeData.value[key].loaded = true\n        treeData.value[key].expanded = true\n        if (data.length) {\n          lazyTreeNodeMap.value[key] = data\n        }\n        instance.emit('expand-change', row, true)\n      })\n    }\n  }\n\n  return {\n    loadData,\n    loadOrToggle,\n    toggleTreeExpansion,\n    updateTreeExpandKeys,\n    updateTreeData,\n    normalize,\n    states: {\n      expandRowKeys,\n      treeData,\n      indent,\n      lazy,\n      lazyTreeNodeMap,\n      lazyColumnIdentifier,\n      childrenColumnName,\n    },\n  }\n}\n\nexport default useTree\n"]},"metadata":{},"sourceType":"module"}