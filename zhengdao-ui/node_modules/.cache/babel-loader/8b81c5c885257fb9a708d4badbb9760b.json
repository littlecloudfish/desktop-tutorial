{"ast":null,"code":"import _objectSpread from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { defineComponent, useSlots, computed, openBlock, createElementBlock, normalizeClass, unref, withDirectives, isRef, vModelCheckbox, normalizeStyle, renderSlot, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport '../../../hooks/index.mjs';\nimport { checkboxProps, checkboxEmits, useCheckbox, useCheckboxGroup } from './checkbox.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar _hoisted_1 = [\"name\", \"tabindex\", \"disabled\", \"true-value\", \"false-value\"];\nvar _hoisted_2 = [\"name\", \"tabindex\", \"disabled\", \"value\"];\nvar __default__ = {\n  name: \"ElCheckboxButton\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: checkboxProps,\n  emits: checkboxEmits,\n  setup: function setup(__props) {\n    var props = __props;\n    var slots = useSlots();\n\n    var _useCheckbox = useCheckbox(props, slots),\n        focus = _useCheckbox.focus,\n        isChecked = _useCheckbox.isChecked,\n        isDisabled = _useCheckbox.isDisabled,\n        size = _useCheckbox.size,\n        model = _useCheckbox.model,\n        handleChange = _useCheckbox.handleChange;\n\n    var _useCheckboxGroup = useCheckboxGroup(),\n        checkboxGroup = _useCheckboxGroup.checkboxGroup;\n\n    var ns = useNamespace(\"checkbox\");\n    var activeStyle = computed(function () {\n      var _a, _b, _c, _d;\n\n      var fillValue = (_b = (_a = checkboxGroup == null ? void 0 : checkboxGroup.fill) == null ? void 0 : _a.value) != null ? _b : \"\";\n      return {\n        backgroundColor: fillValue,\n        borderColor: fillValue,\n        color: (_d = (_c = checkboxGroup == null ? void 0 : checkboxGroup.textColor) == null ? void 0 : _c.value) != null ? _d : \"\",\n        boxShadow: fillValue ? \"-1px 0 0 0 \".concat(fillValue) : void 0\n      };\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"label\", {\n        \"class\": normalizeClass([unref(ns).b(\"button\"), unref(ns).bm(\"button\", unref(size)), unref(ns).is(\"disabled\", unref(isDisabled)), unref(ns).is(\"checked\", unref(isChecked)), unref(ns).is(\"focus\", unref(focus))])\n      }, [_ctx.trueLabel || _ctx.falseLabel ? withDirectives((openBlock(), createElementBlock(\"input\", {\n        key: 0,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n          return isRef(model) ? model.value = $event : null;\n        }),\n        \"class\": normalizeClass(unref(ns).be(\"button\", \"original\")),\n        type: \"checkbox\",\n        name: _ctx.name,\n        tabindex: _ctx.tabindex,\n        disabled: unref(isDisabled),\n        \"true-value\": _ctx.trueLabel,\n        \"false-value\": _ctx.falseLabel,\n        onChange: _cache[1] || (_cache[1] = function () {\n          return unref(handleChange) && unref(handleChange).apply(void 0, arguments);\n        }),\n        onFocus: _cache[2] || (_cache[2] = function ($event) {\n          return focus.value = true;\n        }),\n        onBlur: _cache[3] || (_cache[3] = function ($event) {\n          return focus.value = false;\n        })\n      }, null, 42, _hoisted_1)), [[vModelCheckbox, unref(model)]]) : withDirectives((openBlock(), createElementBlock(\"input\", {\n        key: 1,\n        \"onUpdate:modelValue\": _cache[4] || (_cache[4] = function ($event) {\n          return isRef(model) ? model.value = $event : null;\n        }),\n        \"class\": normalizeClass(unref(ns).be(\"button\", \"original\")),\n        type: \"checkbox\",\n        name: _ctx.name,\n        tabindex: _ctx.tabindex,\n        disabled: unref(isDisabled),\n        value: _ctx.label,\n        onChange: _cache[5] || (_cache[5] = function () {\n          return unref(handleChange) && unref(handleChange).apply(void 0, arguments);\n        }),\n        onFocus: _cache[6] || (_cache[6] = function ($event) {\n          return focus.value = true;\n        }),\n        onBlur: _cache[7] || (_cache[7] = function ($event) {\n          return focus.value = false;\n        })\n      }, null, 42, _hoisted_2)), [[vModelCheckbox, unref(model)]]), _ctx.$slots[\"default\"] || _ctx.label ? (openBlock(), createElementBlock(\"span\", {\n        key: 2,\n        \"class\": normalizeClass(unref(ns).be(\"button\", \"inner\")),\n        style: normalizeStyle(unref(isChecked) ? unref(activeStyle) : void 0)\n      }, [renderSlot(_ctx.$slots, \"default\", {}, function () {\n        return [createTextVNode(toDisplayString(_ctx.label), 1)];\n      })], 6)) : createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n}));\n\nvar CheckboxButton = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/checkbox/src/checkbox-button.vue\"]]);\n\nexport { CheckboxButton as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;IAiEA;;IAEA,8BACA,QACAA,KADA,CADA;IAAA;IAAA;IAAA;IAAA;IAAA;IAAA;;IAIA;IAAA;;IACA;IAEA;MACA;;MACA;MAAA,OACA;QACAC,0BADA;QAEAC,sBAFA;QAGAC,2HAHA;QAIAC;MAJA,CADA;KAFA","names":["slots","backgroundColor","borderColor","color","boxShadow"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-button.vue"],"sourcesContent":["<template>\n  <label\n    :class=\"[\n      ns.b('button'),\n      ns.bm('button', size),\n      ns.is('disabled', isDisabled),\n      ns.is('checked', isChecked),\n      ns.is('focus', focus),\n    ]\"\n  >\n    <input\n      v-if=\"trueLabel || falseLabel\"\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :true-value=\"trueLabel\"\n      :false-value=\"falseLabel\"\n      @change=\"handleChange\"\n      @focus=\"focus = true\"\n      @blur=\"focus = false\"\n    />\n    <input\n      v-else\n      v-model=\"model\"\n      :class=\"ns.be('button', 'original')\"\n      type=\"checkbox\"\n      :name=\"name\"\n      :tabindex=\"tabindex\"\n      :disabled=\"isDisabled\"\n      :value=\"label\"\n      @change=\"handleChange\"\n      @focus=\"focus = true\"\n      @blur=\"focus = false\"\n    />\n\n    <span\n      v-if=\"$slots.default || label\"\n      :class=\"ns.be('button', 'inner')\"\n      :style=\"isChecked ? activeStyle : undefined\"\n    >\n      <slot>{{ label }}</slot>\n    </span>\n  </label>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, useSlots } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport {\n  checkboxEmits,\n  checkboxProps,\n  useCheckbox,\n  useCheckboxGroup,\n} from './checkbox'\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElCheckboxButton',\n})\n\nconst props = defineProps(checkboxProps)\ndefineEmits(checkboxEmits)\nconst slots = useSlots()\n\nconst { focus, isChecked, isDisabled, size, model, handleChange } = useCheckbox(\n  props,\n  slots\n)\nconst { checkboxGroup } = useCheckboxGroup()\nconst ns = useNamespace('checkbox')\n\nconst activeStyle = computed<CSSProperties>(() => {\n  const fillValue = checkboxGroup?.fill?.value ?? ''\n  return {\n    backgroundColor: fillValue,\n    borderColor: fillValue,\n    color: checkboxGroup?.textColor?.value ?? '',\n    boxShadow: fillValue ? `-1px 0 0 0 ${fillValue}` : undefined,\n  }\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}