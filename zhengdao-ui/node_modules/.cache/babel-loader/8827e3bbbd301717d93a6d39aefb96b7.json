{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.last-index-of.js\";\nimport \"core-js/modules/es.string.substr.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\n\n/*! Copyright (c) 2016 Naufal Rabbani (http://github.com/BosNaufal)\n* Licensed Under MIT (http://opensource.org/licenses/MIT)\n*\n* Vue Image Compressor @ Version 0.0.1\n*\n* refs:\n* https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n* https://davidwalsh.name/convert-canvas-image\n* https://beta.webcomponents.org/element/3mp3ri0r/cpol-image\n*\n*/\nimport base64toblob from 'base64toblob';\nexport default {\n  props: {\n    // Image Scale Percentage (1 - 100)\n    scale: {\n      type: Number,\n      \"default\": 100\n    },\n    // Image Scale Percentage (1 - 100)\n    quality: {\n      type: Number,\n      \"default\": 100\n    },\n    // Pass the files info when it's done\n    done: {\n      type: Function,\n      \"default\": function _default() {}\n    }\n  },\n  data: function data() {\n    return {\n      file: {},\n      result: {},\n      reader: {},\n      imgSrc: \"\"\n    };\n  },\n  watch: {\n    // When Scale and Quality properties has changed, do Redraw\n    scale: function scale() {\n      return this.redraw();\n    },\n    quality: function quality() {\n      return this.redraw();\n    }\n  },\n  methods: {\n    /*\n      When Input File has changed\n    */\n    onChange: function onChange(e) {\n      // If There's no file choosen\n      var file = e.target.files[0];\n      if (!file) return false; // get the file\n\n      this.file = e.target.files[0]; // Validation\n\n      var type = this.file.type;\n      var valid = type.indexOf(\"image\") !== -1;\n      if (!valid) throw \"File Type Is Not Supported. Upload an image instead\"; // Make new FileReader\n\n      this.reader = new FileReader(); // Convert the file to base64 text\n\n      this.reader.readAsDataURL(this.file); // on reader load somthing...\n\n      this.reader.onload = this.fileOnLoad;\n    },\n\n    /*\n      Draw And Compress The Image\n      @params {String} imgUrl\n    */\n    drawImage: function drawImage(imgUrl) {\n      // Recreate Canvas Element\n      var canvas = document.createElement('canvas');\n      this.canvas = canvas; // Set Canvas Context\n\n      var ctx = this.canvas.getContext('2d'); // Create New Image\n\n      var img = new Image();\n      img.src = imgUrl; // Image Size After Scaling\n\n      var scale = this.scale / 100;\n      var width = img.width * scale;\n      var height = img.height * scale; // Set Canvas Height And Width According to Image Size And Scale\n\n      this.canvas.setAttribute('width', width);\n      this.canvas.setAttribute('height', height);\n      ctx.drawImage(img, 0, 0, width, height); // Quality Of Image\n\n      var quality = this.quality ? this.quality / 100 : 1; // If all files have been proceed\n\n      var base64 = this.canvas.toDataURL('image/jpeg', quality);\n      var fileName = this.result.file.name;\n      var lastDot = fileName.lastIndexOf(\".\");\n      fileName = fileName.substr(0, lastDot) + '.jpeg';\n      var objToPass = {\n        canvas: this.canvas,\n        original: this.result,\n        compressed: {\n          blob: this.toBlob(base64),\n          base64: base64,\n          name: fileName,\n          file: this.buildFile(base64, fileName)\n        }\n      };\n      objToPass.compressed.size = Math.round(objToPass.compressed.file.size / 1000) + ' kB';\n      objToPass.compressed.type = \"image/jpeg\";\n      this.done(objToPass);\n    },\n\n    /*\n      Redraw the canvas\n    */\n    redraw: function redraw() {\n      if (this.result.base64) {\n        this.drawImage(this.result.base64);\n      }\n    },\n\n    /*\n      When The File in loaded\n    */\n    fileOnLoad: function fileOnLoad() {\n      // The File\n      var file = this.file; // Make a fileInfo Object\n\n      var fileInfo = {\n        name: file.name,\n        type: file.type,\n        size: Math.round(file.size / 1000) + ' kB',\n        base64: this.reader.result,\n        file: file\n      }; // Push it to the state\n\n      this.result = fileInfo; // DrawImage\n\n      this.drawImage(this.result.base64);\n    },\n    // Convert Base64 to Blob\n    toBlob: function toBlob(imgUrl) {\n      var blob = base64toblob(imgUrl.split(',')[1], \"image/jpeg\");\n      var url = window.URL.createObjectURL(blob);\n      return url;\n    },\n    // Convert Blob To File\n    buildFile: function buildFile(blob, name) {\n      return new File([blob], name);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;AAQE;;;;;;;;;;;AAYA,OAAOA,YAAP,MAAyB,cAAzB;AAEA,eAAe;EAEbC,KAAK,EAAE;IACL;IACAC,KAAK,EAAE;MACLC,IAAI,EAAEC,MADD;MAEL,WAAS;IAFJ,CAFF;IAOL;IACAC,OAAO,EAAE;MACPF,IAAI,EAAEC,MADC;MAEP,WAAS;IAFF,CARJ;IAaL;IACAE,IAAI,EAAE;MACJH,IAAI,EAAEI,QADF;MAEJ,WAAS,oBAAM,CAAC;IAFZ;EAdD,CAFM;EAsBbC,IAtBa,kBAsBL;IACN,OAAQ;MACNC,IAAI,EAAE,EADA;MAENC,MAAM,EAAE,EAFF;MAGNC,MAAM,EAAE,EAHF;MAINC,MAAM,EAAE;IAJF,CAAR;EAMD,CA7BY;EA+BbC,KAAK,EAAE;IACL;IACAX,KAFK,mBAEG;MAAE,OAAO,KAAKY,MAAL,EAAP;IAAsB,CAF3B;IAGLT,OAHK,qBAGK;MAAE,OAAO,KAAKS,MAAL,EAAP;IAAsB;EAH7B,CA/BM;EAqCbC,OAAO,EAAE;IAEP;;;IAGAC,QALO,oBAKEC,CALF,EAKI;MACT;MACA,IAAIR,IAAG,GAAIQ,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAX;MACA,IAAG,CAACV,IAAJ,EAAU,OAAO,KAAP,CAHD,CAKT;;MACA,KAAKA,IAAL,GAAYQ,CAAC,CAACC,MAAF,CAASC,KAAT,CAAe,CAAf,CAAZ,CANS,CAQT;;MACA,IAAIhB,IAAG,GAAI,KAAKM,IAAL,CAAUN,IAArB;MACA,IAAIiB,KAAI,GAAIjB,IAAI,CAACkB,OAAL,CAAa,OAAb,MAA0B,CAAC,CAAvC;MAEA,IAAG,CAACD,KAAJ,EAAW,MAAM,qDAAN,CAZF,CAcT;;MACA,KAAKT,MAAL,GAAc,IAAIW,UAAJ,EAAd,CAfS,CAiBT;;MACA,KAAKX,MAAL,CAAYY,aAAZ,CAA0B,KAAKd,IAA/B,EAlBS,CAoBT;;MACA,KAAKE,MAAL,CAAYa,MAAZ,GAAqB,KAAKC,UAA1B;IAED,CA5BM;;IA+BP;;;;IAIAC,SAnCO,qBAmCGC,MAnCH,EAmCW;MAChB;MACA,IAAIC,MAAK,GAAIC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;MACA,KAAKF,MAAL,GAAcA,MAAd,CAHgB,CAKhB;;MACA,IAAIG,GAAE,GAAI,KAAKH,MAAL,CAAYI,UAAZ,CAAuB,IAAvB,CAAV,CANgB,CAQhB;;MACA,IAAIC,GAAE,GAAI,IAAIC,KAAJ,EAAV;MACAD,GAAG,CAACE,GAAJ,GAAUR,MAAV,CAVgB,CAYhB;;MACA,IAAIzB,KAAI,GAAI,KAAKA,KAAL,GAAa,GAAzB;MACA,IAAIkC,KAAI,GAAIH,GAAG,CAACG,KAAJ,GAAYlC,KAAxB;MACA,IAAImC,MAAK,GAAIJ,GAAG,CAACI,MAAJ,GAAanC,KAA1B,CAfgB,CAiBhB;;MACA,KAAK0B,MAAL,CAAYU,YAAZ,CAAyB,OAAzB,EAAkCF,KAAlC;MACA,KAAKR,MAAL,CAAYU,YAAZ,CAAyB,QAAzB,EAAmCD,MAAnC;MAEAN,GAAG,CAACL,SAAJ,CAAcO,GAAd,EAAmB,CAAnB,EAAsB,CAAtB,EAAyBG,KAAzB,EAAgCC,MAAhC,EArBgB,CAuBhB;;MACA,IAAIhC,OAAM,GAAI,KAAKA,OAAL,GAAgB,KAAKA,OAAL,GAAe,GAA/B,GAAsC,CAApD,CAxBgB,CA0BhB;;MACA,IAAIkC,MAAK,GAAI,KAAKX,MAAL,CAAYY,SAAZ,CAAsB,YAAtB,EAAoCnC,OAApC,CAAb;MACA,IAAIoC,QAAO,GAAI,KAAK/B,MAAL,CAAYD,IAAZ,CAAiBiC,IAAhC;MACA,IAAIC,OAAM,GAAIF,QAAQ,CAACG,WAAT,CAAqB,GAArB,CAAd;MACAH,QAAO,GAAIA,QAAQ,CAACI,MAAT,CAAgB,CAAhB,EAAkBF,OAAlB,IAA6B,OAAxC;MAEA,IAAIG,SAAQ,GAAI;QACdlB,MAAM,EAAE,KAAKA,MADC;QAEdmB,QAAQ,EAAE,KAAKrC,MAFD;QAGdsC,UAAU,EAAE;UACVC,IAAI,EAAE,KAAKC,MAAL,CAAYX,MAAZ,CADI;UAEVA,MAAM,EAAEA,MAFE;UAGVG,IAAI,EAAED,QAHI;UAIVhC,IAAI,EAAE,KAAK0C,SAAL,CAAeZ,MAAf,EAAuBE,QAAvB;QAJI;MAHE,CAAhB;MAWAK,SAAS,CAACE,UAAV,CAAqBI,IAArB,GAA4BC,IAAI,CAACC,KAAL,CAAWR,SAAS,CAACE,UAAV,CAAqBvC,IAArB,CAA0B2C,IAA1B,GAAiC,IAA5C,IAAkD,KAA9E;MACAN,SAAS,CAACE,UAAV,CAAqB7C,IAArB,GAA4B,YAA5B;MAEA,KAAKG,IAAL,CAAUwC,SAAV;IAED,CAnFM;;IAsFP;;;IAGAhC,MAzFO,oBAyFE;MACP,IAAG,KAAKJ,MAAL,CAAY6B,MAAf,EAAuB;QACrB,KAAKb,SAAL,CAAe,KAAKhB,MAAL,CAAY6B,MAA3B;MACF;IACD,CA7FM;;IAgGP;;;IAGAd,UAnGO,wBAmGM;MACX;MACA,IAAMhB,IAAN,GAAe,IAAf,CAAMA,IAAN,CAFW,CAIX;;MACA,IAAI8C,QAAO,GAAI;QACbb,IAAI,EAAEjC,IAAI,CAACiC,IADE;QAEbvC,IAAI,EAAEM,IAAI,CAACN,IAFE;QAGbiD,IAAI,EAAEC,IAAI,CAACC,KAAL,CAAW7C,IAAI,CAAC2C,IAAL,GAAY,IAAvB,IAA6B,KAHtB;QAIbb,MAAM,EAAE,KAAK5B,MAAL,CAAYD,MAJP;QAKbD,IAAI,EAAEA;MALO,CAAf,CALW,CAaX;;MACA,KAAKC,MAAL,GAAc6C,QAAd,CAdW,CAgBX;;MACA,KAAK7B,SAAL,CAAe,KAAKhB,MAAL,CAAY6B,MAA3B;IACD,CArHM;IAuHP;IACAW,MAxHO,kBAwHCvB,MAxHD,EAwHS;MACd,IAAIsB,IAAG,GAAIjD,YAAY,CAAC2B,MAAM,CAAC6B,KAAP,CAAa,GAAb,EAAkB,CAAlB,CAAD,EAAuB,YAAvB,CAAvB;MACA,IAAIC,GAAE,GAAIC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2BX,IAA3B,CAAV;MACA,OAAOQ,GAAP;IACD,CA5HM;IA8HP;IACAN,SA/HO,qBA+HIF,IA/HJ,EA+HUP,IA/HV,EA+HgB;MACrB,OAAO,IAAImB,IAAJ,CAAS,CAACZ,IAAD,CAAT,EAAiBP,IAAjB,CAAP;IACF;EAjIO;AArCI,CAAf","names":["base64toblob","props","scale","type","Number","quality","done","Function","data","file","result","reader","imgSrc","watch","redraw","methods","onChange","e","target","files","valid","indexOf","FileReader","readAsDataURL","onload","fileOnLoad","drawImage","imgUrl","canvas","document","createElement","ctx","getContext","img","Image","src","width","height","setAttribute","base64","toDataURL","fileName","name","lastDot","lastIndexOf","substr","objToPass","original","compressed","blob","toBlob","buildFile","size","Math","round","fileInfo","split","url","window","URL","createObjectURL","File"],"sourceRoot":"","sources":["/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/vue-image-compressor/src/js/components/vue-image-compressor.vue"],"sourcesContent":["\n<template>\n  <input type=\"file\" @change=\"onChange\" />\n</template>\n\n\n<script>\n\n  /*! Copyright (c) 2016 Naufal Rabbani (http://github.com/BosNaufal)\n  * Licensed Under MIT (http://opensource.org/licenses/MIT)\n  *\n  * Vue Image Compressor @ Version 0.0.1\n  *\n  * refs:\n  * https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n  * https://davidwalsh.name/convert-canvas-image\n  * https://beta.webcomponents.org/element/3mp3ri0r/cpol-image\n  *\n  */\n\n  import base64toblob from 'base64toblob';\n\n  export default {\n\n    props: {\n      // Image Scale Percentage (1 - 100)\n      scale: {\n        type: Number,\n        default: 100\n      },\n\n      // Image Scale Percentage (1 - 100)\n      quality: {\n        type: Number,\n        default: 100\n      },\n\n      // Pass the files info when it's done\n      done: {\n        type: Function,\n        default: () => {}\n      }\n    },\n\n    data () {\n      return  {\n        file: {},\n        result: {},\n        reader: {},\n        imgSrc: \"\"\n      }\n    },\n\n    watch: {\n      // When Scale and Quality properties has changed, do Redraw\n      scale() { return this.redraw() },\n      quality() { return this.redraw() },\n    },\n\n    methods: {\n\n      /*\n        When Input File has changed\n      */\n      onChange(e){\n        // If There's no file choosen\n        let file = e.target.files[0]\n        if(!file) return false\n\n        // get the file\n        this.file = e.target.files[0];\n\n        // Validation\n        let type = this.file.type\n        let valid = type.indexOf(\"image\") !== -1\n\n        if(!valid) throw \"File Type Is Not Supported. Upload an image instead\"\n\n        // Make new FileReader\n        this.reader = new FileReader()\n\n        // Convert the file to base64 text\n        this.reader.readAsDataURL(this.file)\n\n        // on reader load somthing...\n        this.reader.onload = this.fileOnLoad\n\n      },\n\n\n      /*\n        Draw And Compress The Image\n        @params {String} imgUrl\n      */\n      drawImage(imgUrl) {\n        // Recreate Canvas Element\n        let canvas = document.createElement('canvas')\n        this.canvas = canvas\n\n        // Set Canvas Context\n        let ctx = this.canvas.getContext('2d')\n\n        // Create New Image\n        let img = new Image()\n        img.src = imgUrl\n\n        // Image Size After Scaling\n        let scale = this.scale / 100\n        let width = img.width * scale\n        let height = img.height * scale\n\n        // Set Canvas Height And Width According to Image Size And Scale\n        this.canvas.setAttribute('width', width)\n        this.canvas.setAttribute('height', height)\n\n        ctx.drawImage(img, 0, 0, width, height)\n\n        // Quality Of Image\n        let quality = this.quality ? (this.quality / 100) : 1\n\n        // If all files have been proceed\n        let base64 = this.canvas.toDataURL('image/jpeg', quality)\n        let fileName = this.result.file.name\n        let lastDot = fileName.lastIndexOf(\".\")\n        fileName = fileName.substr(0,lastDot) + '.jpeg'\n\n        let objToPass = {\n          canvas: this.canvas,\n          original: this.result,\n          compressed: {\n            blob: this.toBlob(base64),\n            base64: base64,\n            name: fileName,\n            file: this.buildFile(base64, fileName)\n          },\n        }\n\n        objToPass.compressed.size = Math.round(objToPass.compressed.file.size / 1000)+' kB'\n        objToPass.compressed.type = \"image/jpeg\"\n\n        this.done(objToPass)\n\n      },\n\n\n      /*\n        Redraw the canvas\n      */\n      redraw() {\n        if(this.result.base64) {\n          this.drawImage(this.result.base64)\n        }\n      },\n\n\n      /*\n        When The File in loaded\n      */\n      fileOnLoad() {\n        // The File\n        let { file } = this\n\n        // Make a fileInfo Object\n        let fileInfo = {\n          name: file.name,\n          type: file.type,\n          size: Math.round(file.size / 1000)+' kB',\n          base64: this.reader.result,\n          file: file\n        }\n\n        // Push it to the state\n        this.result = fileInfo\n\n        // DrawImage\n        this.drawImage(this.result.base64)\n      },\n\n      // Convert Base64 to Blob\n      toBlob (imgUrl) {\n        let blob = base64toblob(imgUrl.split(',')[1], \"image/jpeg\")\n        let url = window.URL.createObjectURL(blob)\n        return url\n      },\n\n      // Convert Blob To File\n      buildFile (blob, name) {\n        return new File([blob], name)\n      }\n\n    }\n  };\n\n</script>\n"]},"metadata":{},"sourceType":"module"}