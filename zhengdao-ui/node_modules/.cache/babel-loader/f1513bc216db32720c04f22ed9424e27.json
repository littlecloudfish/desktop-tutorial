{"ast":null,"code":"import _objectSpread from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.number.is-nan.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.number.parse-float.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.number.is-finite.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { defineComponent, ref, reactive, computed, watch, onMounted, onUpdated, openBlock, createElementBlock, normalizeClass, unref, withModifiers, withDirectives, withKeys, createVNode, withCtx, createBlock, createCommentVNode } from 'vue';\nimport { isNil } from 'lodash-unified';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ArrowDown, Minus, ArrowUp, Plus } from '@element-plus/icons-vue';\nimport { inputNumberProps, inputNumberEmits } from './input-number.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { isNumber } from '@vueuse/core';\nimport { isUndefined } from '../../../utils/types.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { isString } from '@vue/shared';\nimport RepeatClick from '../../../directives/repeat-click/index.mjs';\nvar _hoisted_1 = [\"aria-label\", \"onKeydown\"];\nvar _hoisted_2 = [\"aria-label\", \"onKeydown\"];\nvar __default__ = {\n  name: \"ElInputNumber\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: inputNumberProps,\n  emits: inputNumberEmits,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose,\n        emit = _ref.emit;\n    var props = __props;\n\n    var _useLocale = useLocale(),\n        t = _useLocale.t;\n\n    var ns = useNamespace(\"input-number\");\n    var input = ref();\n    var data = reactive({\n      currentValue: props.modelValue,\n      userInput: null\n    });\n\n    var _useFormItem = useFormItem(),\n        formItem = _useFormItem.formItem;\n\n    var minDisabled = computed(function () {\n      return isNumber(props.modelValue) && ensurePrecision(props.modelValue, -1) < props.min;\n    });\n    var maxDisabled = computed(function () {\n      return isNumber(props.modelValue) && ensurePrecision(props.modelValue) > props.max;\n    });\n    var numPrecision = computed(function () {\n      var stepPrecision = getPrecision(props.step);\n\n      if (!isUndefined(props.precision)) {\n        if (stepPrecision > props.precision) {\n          debugWarn(\"InputNumber\", \"precision should not be less than the decimal places of step\");\n        }\n\n        return props.precision;\n      } else {\n        return Math.max(getPrecision(props.modelValue), stepPrecision);\n      }\n    });\n    var controlsAtRight = computed(function () {\n      return props.controls && props.controlsPosition === \"right\";\n    });\n    var inputNumberSize = useSize();\n    var inputNumberDisabled = useDisabled();\n    var displayValue = computed(function () {\n      if (data.userInput !== null) {\n        return data.userInput;\n      }\n\n      var currentValue = data.currentValue;\n      if (isNil(currentValue)) return \"\";\n\n      if (isNumber(currentValue)) {\n        if (Number.isNaN(currentValue)) return \"\";\n\n        if (!isUndefined(props.precision)) {\n          currentValue = currentValue.toFixed(props.precision);\n        }\n      }\n\n      return currentValue;\n    });\n\n    var toPrecision = function toPrecision(num, pre) {\n      if (isUndefined(pre)) pre = numPrecision.value;\n      if (pre === 0) return Math.round(num);\n      var snum = String(num);\n      var pointPos = snum.indexOf(\".\");\n      if (pointPos === -1) return num;\n      var nums = snum.replace(\".\", \"\").split(\"\");\n      var datum = nums[pointPos + pre];\n      if (!datum) return num;\n      var length = snum.length;\n\n      if (snum.charAt(length - 1) === \"5\") {\n        snum = \"\".concat(snum.slice(0, Math.max(0, length - 1)), \"6\");\n      }\n\n      return Number.parseFloat(Number(snum).toFixed(pre));\n    };\n\n    var getPrecision = function getPrecision(value) {\n      if (isNil(value)) return 0;\n      var valueString = value.toString();\n      var dotPosition = valueString.indexOf(\".\");\n      var precision = 0;\n\n      if (dotPosition !== -1) {\n        precision = valueString.length - dotPosition - 1;\n      }\n\n      return precision;\n    };\n\n    var ensurePrecision = function ensurePrecision(val) {\n      var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      if (!isNumber(val)) return data.currentValue;\n      return toPrecision(val + props.step * coefficient);\n    };\n\n    var increase = function increase() {\n      if (inputNumberDisabled.value || maxDisabled.value) return;\n      var value = props.modelValue || 0;\n      var newVal = ensurePrecision(value);\n      setCurrentValue(newVal);\n    };\n\n    var decrease = function decrease() {\n      if (inputNumberDisabled.value || minDisabled.value) return;\n      var value = props.modelValue || 0;\n      var newVal = ensurePrecision(value, -1);\n      setCurrentValue(newVal);\n    };\n\n    var verifyValue = function verifyValue(value, update) {\n      var max = props.max,\n          min = props.min,\n          step = props.step,\n          precision = props.precision,\n          stepStrictly = props.stepStrictly,\n          valueOnClear = props.valueOnClear;\n      var newVal = Number(value);\n\n      if (isNil(value) || Number.isNaN(newVal)) {\n        return null;\n      }\n\n      if (value === \"\") {\n        if (valueOnClear === null) {\n          return null;\n        }\n\n        newVal = isString(valueOnClear) ? {\n          min: min,\n          max: max\n        }[valueOnClear] : valueOnClear;\n      }\n\n      if (stepStrictly) {\n        newVal = toPrecision(Math.round(newVal / step) * step, precision);\n      }\n\n      if (!isUndefined(precision)) {\n        newVal = toPrecision(newVal, precision);\n      }\n\n      if (newVal > max || newVal < min) {\n        newVal = newVal > max ? max : min;\n        update && emit(\"update:modelValue\", newVal);\n      }\n\n      return newVal;\n    };\n\n    var setCurrentValue = function setCurrentValue(value) {\n      var _a;\n\n      var oldVal = data.currentValue;\n      var newVal = verifyValue(value);\n      if (oldVal === newVal) return;\n      data.userInput = null;\n      emit(\"update:modelValue\", newVal);\n      emit(\"input\", newVal);\n      emit(\"change\", newVal, oldVal);\n\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\")[\"catch\"](function (err) {\n          return debugWarn(err);\n        });\n      }\n\n      data.currentValue = newVal;\n    };\n\n    var handleInput = function handleInput(value) {\n      return data.userInput = value;\n    };\n\n    var handleInputChange = function handleInputChange(value) {\n      var newVal = value !== \"\" ? Number(value) : \"\";\n\n      if (isNumber(newVal) && !Number.isNaN(newVal) || value === \"\") {\n        setCurrentValue(newVal);\n      }\n\n      data.userInput = null;\n    };\n\n    var focus = function focus() {\n      var _a, _b;\n\n      (_b = (_a = input.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n\n    var blur = function blur() {\n      var _a, _b;\n\n      (_b = (_a = input.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n\n    var handleFocus = function handleFocus(event) {\n      emit(\"focus\", event);\n    };\n\n    var handleBlur = function handleBlur(event) {\n      var _a;\n\n      emit(\"blur\", event);\n\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\")[\"catch\"](function (err) {\n          return debugWarn(err);\n        });\n      }\n    };\n\n    watch(function () {\n      return props.modelValue;\n    }, function (value) {\n      data.currentValue = verifyValue(value, true);\n      data.userInput = null;\n    }, {\n      immediate: true\n    });\n    onMounted(function () {\n      var _a;\n\n      var min = props.min,\n          max = props.max,\n          modelValue = props.modelValue;\n      var innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput.setAttribute(\"role\", \"spinbutton\");\n\n      if (Number.isFinite(max)) {\n        innerInput.setAttribute(\"aria-valuemax\", String(max));\n      } else {\n        innerInput.removeAttribute(\"aria-valuemax\");\n      }\n\n      if (Number.isFinite(min)) {\n        innerInput.setAttribute(\"aria-valuemin\", String(min));\n      } else {\n        innerInput.removeAttribute(\"aria-valuemin\");\n      }\n\n      innerInput.setAttribute(\"aria-valuenow\", String(data.currentValue));\n      innerInput.setAttribute(\"aria-disabled\", String(inputNumberDisabled.value));\n\n      if (!isNumber(modelValue) && modelValue != null) {\n        var val = Number(modelValue);\n\n        if (Number.isNaN(val)) {\n          val = null;\n        }\n\n        emit(\"update:modelValue\", val);\n      }\n    });\n    onUpdated(function () {\n      var _a;\n\n      var innerInput = (_a = input.value) == null ? void 0 : _a.input;\n      innerInput == null ? void 0 : innerInput.setAttribute(\"aria-valuenow\", \"\".concat(data.currentValue));\n    });\n    expose({\n      focus: focus,\n      blur: blur\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        \"class\": normalizeClass([unref(ns).b(), unref(ns).m(unref(inputNumberSize)), unref(ns).is(\"disabled\", unref(inputNumberDisabled)), unref(ns).is(\"without-controls\", !_ctx.controls), unref(ns).is(\"controls-right\", unref(controlsAtRight))]),\n        onDragstart: _cache[0] || (_cache[0] = withModifiers(function () {}, [\"prevent\"]))\n      }, [_ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n        key: 0,\n        role: \"button\",\n        \"aria-label\": unref(t)(\"el.inputNumber.decrease\"),\n        \"class\": normalizeClass([unref(ns).e(\"decrease\"), unref(ns).is(\"disabled\", unref(minDisabled))]),\n        onKeydown: withKeys(decrease, [\"enter\"])\n      }, [createVNode(unref(ElIcon), null, {\n        \"default\": withCtx(function () {\n          return [unref(controlsAtRight) ? (openBlock(), createBlock(unref(ArrowDown), {\n            key: 0\n          })) : (openBlock(), createBlock(unref(Minus), {\n            key: 1\n          }))];\n        }),\n        _: 1\n      })], 42, _hoisted_1)), [[unref(RepeatClick), decrease]]) : createCommentVNode(\"v-if\", true), _ctx.controls ? withDirectives((openBlock(), createElementBlock(\"span\", {\n        key: 1,\n        role: \"button\",\n        \"aria-label\": unref(t)(\"el.inputNumber.increase\"),\n        \"class\": normalizeClass([unref(ns).e(\"increase\"), unref(ns).is(\"disabled\", unref(maxDisabled))]),\n        onKeydown: withKeys(increase, [\"enter\"])\n      }, [createVNode(unref(ElIcon), null, {\n        \"default\": withCtx(function () {\n          return [unref(controlsAtRight) ? (openBlock(), createBlock(unref(ArrowUp), {\n            key: 0\n          })) : (openBlock(), createBlock(unref(Plus), {\n            key: 1\n          }))];\n        }),\n        _: 1\n      })], 42, _hoisted_2)), [[unref(RepeatClick), increase]]) : createCommentVNode(\"v-if\", true), createVNode(unref(ElInput), {\n        id: _ctx.id,\n        ref_key: \"input\",\n        ref: input,\n        type: \"number\",\n        step: _ctx.step,\n        \"model-value\": unref(displayValue),\n        placeholder: _ctx.placeholder,\n        disabled: unref(inputNumberDisabled),\n        size: unref(inputNumberSize),\n        max: _ctx.max,\n        min: _ctx.min,\n        name: _ctx.name,\n        label: _ctx.label,\n        \"validate-event\": false,\n        onKeydown: [withKeys(withModifiers(increase, [\"prevent\"]), [\"up\"]), withKeys(withModifiers(decrease, [\"prevent\"]), [\"down\"])],\n        onBlur: handleBlur,\n        onFocus: handleFocus,\n        onInput: handleInput,\n        onChange: handleInputChange\n      }, null, 8, [\"id\", \"step\", \"model-value\", \"placeholder\", \"disabled\", \"size\", \"max\", \"min\", \"name\", \"label\", \"onKeydown\"])], 34);\n    };\n  }\n}));\n\nvar InputNumber = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/input-number/src/input-number.vue\"]]);\n\nexport { InputNumber as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAqFA;IAAA;;IACA;IACA;IAMA;MACAA,8BADA;MAEAC;IAFA;;IAKA;IAAA;;IAEA,2BACA;MAAA,OACAC,8BACAC,iDAFA;IAAA,CADA;IAKA,2BACA;MAAA,OACAD,2EADA;IAAA,CADA;IAKA;MACA;;MACA;QACA;UACAE,UACA,aADA,EAEA,8DAFA;QAIA;;QACA;MACA,CARA,MAQA;QACA;MACA;IACA,CAbA;IAcA;MACA;IACA,CAFA;IAIA;IACA;IAEA;MACA;QACA;MACA;;MACA;MACA;;MACA;QACA;;QACA;UACAJ;QACA;MACA;;MACA;IACA,CAbA;;IAcA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MACA;QACAK;MACA;;MACA;IACA,CAdA;;IAeA;MACA;MACA;MACA;MACA;;MACA;QACAC;MACA;;MACA;IACA,CATA;;IAUA;MAAA;MACA;MAEA;IACA,CAJA;;IAKA;MACA;MACA;MACA;MACAC;IACA,CALA;;IAMA;MACA;MACA;MACA;MACAA;IACA,CALA;;IAMA,uCACAC,KADA,EAEAC,MAFA,EAGA;MACA;MAAA;MAAA;MAAA;MAAA;MAAA;MACA;;MACA;QACA;MACA;;MACA;QACA;UACA;QACA;;QACAC;UAAAC;UAAAC;QAAA;MACA;;MACA;QACAF;MACA;;MACA;QACAA;MACA;;MACA;QACAA;QACAD;MACA;;MACA;IACA,CA1BA;;IA2BA;MACA;;MACA;MACA;MAAA,uBACA;MACAI;MACAC;MACAA;MACAA;;MACA;QACA;UAAA;QAAA;MACA;;MACAD;IACA,CAbA;;IAcA;MACA;IACA,CAFA;;IAGA;MACA;;MACA;QACAN;MACA;;MACAM;IAEA,CAPA;;IAQA;MACA;;MAEA;IACA,CAJA;;IAKA;MAEA;;MACA;IACA,CAJA;;IAMA;MACAC;IACA,CAFA;;IAGA;MACA;;MACAA;;MAEA,IACAC,mBADA,EAEA;QACA;UAAA;QAAA;MACA;IAEA,CAVA;;IAYAC;MAAA;IAAA;MACAH;MACAA;IACA,CAHA,EAGA;MAAAI;IAAA,CAHA;IAIAC;MACA;;MACA;MAAA;MAAA;MACA;MACAC;;MACA;QACAA;MACA,CAFA,MAEA;QACAA;MACA;;MACA;QACAA;MACA,CAFA,MAEA;QACAA;MACA;;MACAA;MACAA;;MACA;QACA;;QACA;UACAC;QACA;;QACAN;MACA;IACA,CAxBA;IA0BAO;MAEA;;MACA;;KAHA","names":["currentValue","userInput","isNumber","ensurePrecision","debugWarn","snum","precision","setCurrentValue","value","update","newVal","min","max","data","emit","props","watch","immediate","onMounted","innerInput","val","onUpdated"],"sources":["../../../../../../packages/components/input-number/src/input-number.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[\n      ns.b(),\n      ns.m(inputNumberSize),\n      ns.is('disabled', inputNumberDisabled),\n      ns.is('without-controls', !controls),\n      ns.is('controls-right', controlsAtRight),\n    ]\"\n    @dragstart.prevent\n  >\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"decrease\"\n      role=\"button\"\n      :aria-label=\"t('el.inputNumber.decrease')\"\n      :class=\"[ns.e('decrease'), ns.is('disabled', minDisabled)]\"\n      @keydown.enter=\"decrease\"\n    >\n      <el-icon>\n        <arrow-down v-if=\"controlsAtRight\" />\n        <minus v-else />\n      </el-icon>\n    </span>\n    <span\n      v-if=\"controls\"\n      v-repeat-click=\"increase\"\n      role=\"button\"\n      :aria-label=\"t('el.inputNumber.increase')\"\n      :class=\"[ns.e('increase'), ns.is('disabled', maxDisabled)]\"\n      @keydown.enter=\"increase\"\n    >\n      <el-icon>\n        <arrow-up v-if=\"controlsAtRight\" />\n        <plus v-else />\n      </el-icon>\n    </span>\n    <el-input\n      :id=\"id\"\n      ref=\"input\"\n      type=\"number\"\n      :step=\"step\"\n      :model-value=\"displayValue\"\n      :placeholder=\"placeholder\"\n      :disabled=\"inputNumberDisabled\"\n      :size=\"inputNumberSize\"\n      :max=\"max\"\n      :min=\"min\"\n      :name=\"name\"\n      :label=\"label\"\n      :validate-event=\"false\"\n      @keydown.up.prevent=\"increase\"\n      @keydown.down.prevent=\"decrease\"\n      @blur=\"handleBlur\"\n      @focus=\"handleFocus\"\n      @input=\"handleInput\"\n      @change=\"handleInputChange\"\n    />\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, onMounted, onUpdated, reactive, ref, watch } from 'vue'\nimport { isNil } from 'lodash-unified'\nimport { ElInput } from '@element-plus/components/input'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { RepeatClick as vRepeatClick } from '@element-plus/directives'\nimport {\n  useDisabled,\n  useFormItem,\n  useLocale,\n  useNamespace,\n  useSize,\n} from '@element-plus/hooks'\nimport { debugWarn, isNumber, isString, isUndefined } from '@element-plus/utils'\nimport { ArrowDown, ArrowUp, Minus, Plus } from '@element-plus/icons-vue'\nimport { inputNumberEmits, inputNumberProps } from './input-number'\nimport type { InputInstance } from '@element-plus/components/input'\n\ndefineOptions({\n  name: 'ElInputNumber',\n})\n\nconst props = defineProps(inputNumberProps)\nconst emit = defineEmits(inputNumberEmits)\n\nconst { t } = useLocale()\nconst ns = useNamespace('input-number')\nconst input = ref<InputInstance>()\n\ninterface Data {\n  currentValue: number | null | undefined\n  userInput: null | number | string\n}\nconst data = reactive<Data>({\n  currentValue: props.modelValue,\n  userInput: null,\n})\n\nconst { formItem } = useFormItem()\n\nconst minDisabled = computed(\n  () =>\n    isNumber(props.modelValue) &&\n    ensurePrecision(props.modelValue, -1)! < props.min\n)\nconst maxDisabled = computed(\n  () =>\n    isNumber(props.modelValue) && ensurePrecision(props.modelValue)! > props.max\n)\n\nconst numPrecision = computed(() => {\n  const stepPrecision = getPrecision(props.step)\n  if (!isUndefined(props.precision)) {\n    if (stepPrecision > props.precision) {\n      debugWarn(\n        'InputNumber',\n        'precision should not be less than the decimal places of step'\n      )\n    }\n    return props.precision\n  } else {\n    return Math.max(getPrecision(props.modelValue), stepPrecision)\n  }\n})\nconst controlsAtRight = computed(() => {\n  return props.controls && props.controlsPosition === 'right'\n})\n\nconst inputNumberSize = useSize()\nconst inputNumberDisabled = useDisabled()\n\nconst displayValue = computed(() => {\n  if (data.userInput !== null) {\n    return data.userInput\n  }\n  let currentValue: number | string | undefined | null = data.currentValue\n  if (isNil(currentValue)) return ''\n  if (isNumber(currentValue)) {\n    if (Number.isNaN(currentValue)) return ''\n    if (!isUndefined(props.precision)) {\n      currentValue = currentValue.toFixed(props.precision)\n    }\n  }\n  return currentValue\n})\nconst toPrecision = (num: number, pre?: number) => {\n  if (isUndefined(pre)) pre = numPrecision.value\n  if (pre === 0) return Math.round(num)\n  let snum = String(num)\n  const pointPos = snum.indexOf('.')\n  if (pointPos === -1) return num\n  const nums = snum.replace('.', '').split('')\n  const datum = nums[pointPos + pre]\n  if (!datum) return num\n  const length = snum.length\n  if (snum.charAt(length - 1) === '5') {\n    snum = `${snum.slice(0, Math.max(0, length - 1))}6`\n  }\n  return Number.parseFloat(Number(snum).toFixed(pre))\n}\nconst getPrecision = (value: number | null | undefined) => {\n  if (isNil(value)) return 0\n  const valueString = value.toString()\n  const dotPosition = valueString.indexOf('.')\n  let precision = 0\n  if (dotPosition !== -1) {\n    precision = valueString.length - dotPosition - 1\n  }\n  return precision\n}\nconst ensurePrecision = (val: number, coefficient: 1 | -1 = 1) => {\n  if (!isNumber(val)) return data.currentValue\n  // Solve the accuracy problem of JS decimal calculation by converting the value to integer.\n  return toPrecision(val + props.step * coefficient)\n}\nconst increase = () => {\n  if (inputNumberDisabled.value || maxDisabled.value) return\n  const value = props.modelValue || 0\n  const newVal = ensurePrecision(value)\n  setCurrentValue(newVal)\n}\nconst decrease = () => {\n  if (inputNumberDisabled.value || minDisabled.value) return\n  const value = props.modelValue || 0\n  const newVal = ensurePrecision(value, -1)\n  setCurrentValue(newVal)\n}\nconst verifyValue = (\n  value: number | string | null | undefined,\n  update?: boolean\n): number | null | undefined => {\n  const { max, min, step, precision, stepStrictly, valueOnClear } = props\n  let newVal = Number(value)\n  if (isNil(value) || Number.isNaN(newVal)) {\n    return null\n  }\n  if (value === '') {\n    if (valueOnClear === null) {\n      return null\n    }\n    newVal = isString(valueOnClear) ? { min, max }[valueOnClear] : valueOnClear\n  }\n  if (stepStrictly) {\n    newVal = toPrecision(Math.round(newVal / step) * step, precision)\n  }\n  if (!isUndefined(precision)) {\n    newVal = toPrecision(newVal, precision)\n  }\n  if (newVal > max || newVal < min) {\n    newVal = newVal > max ? max : min\n    update && emit('update:modelValue', newVal)\n  }\n  return newVal\n}\nconst setCurrentValue = (value: number | string | null | undefined) => {\n  const oldVal = data.currentValue\n  const newVal = verifyValue(value)\n  if (oldVal === newVal) return\n  data.userInput = null\n  emit('update:modelValue', newVal!)\n  emit('input', newVal)\n  emit('change', newVal!, oldVal!)\n  if (props.validateEvent) {\n    formItem?.validate?.('change').catch((err) => debugWarn(err))\n  }\n  data.currentValue = newVal\n}\nconst handleInput = (value: string) => {\n  return (data.userInput = value)\n}\nconst handleInputChange = (value: string) => {\n  const newVal = value !== '' ? Number(value) : ''\n  if ((isNumber(newVal) && !Number.isNaN(newVal)) || value === '') {\n    setCurrentValue(newVal)\n  }\n  data.userInput = null\n}\n\nconst focus = () => {\n  input.value?.focus?.()\n}\n\nconst blur = () => {\n  input.value?.blur?.()\n}\n\nconst handleFocus = (event: MouseEvent | FocusEvent) => {\n  emit('focus', event)\n}\n\nconst handleBlur = (event: MouseEvent | FocusEvent) => {\n  emit('blur', event)\n  if (props.validateEvent) {\n    formItem?.validate?.('blur').catch((err) => debugWarn(err))\n  }\n}\n\nwatch(\n  () => props.modelValue,\n  (value) => {\n    data.currentValue = verifyValue(value, true)\n    data.userInput = null\n  },\n  { immediate: true }\n)\nonMounted(() => {\n  const { min, max, modelValue } = props\n  const innerInput = input.value?.input as HTMLInputElement\n  innerInput.setAttribute('role', 'spinbutton')\n  if (Number.isFinite(max)) {\n    innerInput.setAttribute('aria-valuemax', String(max))\n  } else {\n    innerInput.removeAttribute('aria-valuemax')\n  }\n  if (Number.isFinite(min)) {\n    innerInput.setAttribute('aria-valuemin', String(min))\n  } else {\n    innerInput.removeAttribute('aria-valuemin')\n  }\n  innerInput.setAttribute('aria-valuenow', String(data.currentValue))\n  innerInput.setAttribute('aria-disabled', String(inputNumberDisabled.value))\n  if (!isNumber(modelValue) && modelValue != null) {\n    let val: number | null = Number(modelValue)\n    if (Number.isNaN(val)) {\n      val = null\n    }\n    emit('update:modelValue', val!)\n  }\n})\nonUpdated(() => {\n  const innerInput = input.value?.input\n  innerInput?.setAttribute('aria-valuenow', `${data.currentValue}`)\n})\ndefineExpose({\n  /** @description get focus the input component */\n  focus,\n  /** @description remove focus the input component */\n  blur,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}