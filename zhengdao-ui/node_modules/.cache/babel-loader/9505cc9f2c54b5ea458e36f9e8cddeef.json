{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"upload-example\"\n};\nconst _hoisted_2 = {\n  class: \"button-wrapper\"\n};\n\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\" Load image \");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_cropper = _resolveComponent(\"cropper\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_cropper, {\n    ref: \"cropper\",\n    class: \"upload-example-cropper\",\n    src: $data.image.src,\n    \"stencil-component\": _ctx.$options.components.CircleStencil\n  }, null, 8\n  /* PROPS */\n  , [\"src\", \"stencil-component\"]), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    class: \"button\",\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.$refs.file.click())\n  }, [_createElementVNode(\"input\", {\n    type: \"file\",\n    ref: \"file\",\n    onChange: _cache[0] || (_cache[0] = $event => $options.loadImage($event)),\n    accept: \"image/*\"\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), _hoisted_3]), _createElementVNode(\"button\", {\n    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.anything && _ctx.anything(...args))\n  }, \" show result\")])]);\n}","map":{"version":3,"mappings":";;EACSA,KAAK,EAAC;;;EAORA,KAAK,EAAC;;;iDAEkE;;;;;uBAT3EC,oBAcG,KAdH,cAcG,CAbLC,aAKEC,kBALF,EAKE;IAJDC,GAAG,EAAC,SAIH;IAHDJ,KAAK,EAAC,wBAGL;IAFAK,GAAG,EAAEC,YAAMD,GAEX;IADS,qBAAmBE,cAASC,UAAT,CAAoBC;EAChD,CALF;;EAAA,+BAaK,EAPLC,oBAMM,KANN,cAMM,CALLA,oBAGS,QAHT,EAGS;IAHDV,KAAK,EAAC,QAGL;IAHeW,OAAK,sCAAEJ,WAAMK,IAAN,CAAWC,KAAX,EAAF;EAGpB,CAHT,GACCH,oBAA2E,OAA3E,EAA2E;IAApEI,IAAI,EAAC,MAA+D;IAAxDV,GAAG,EAAC,MAAoD;IAA5CW,QAAM,sCAAEC,mBAAUC,MAAV,CAAF,CAAsC;IAAjBC,MAAM,EAAC;EAAU,CAA3E;;EAAA,cADD,CAKK,EADIR,oBAA+C,QAA/C,EAA+C;IAAtCC,OAAK,yCAAEJ,uCAAF;EAAiC,CAA/C,EAA0B,cAA1B,CACJ,CANN,CAOK,CAdH","names":["class","_createElementBlock","_createVNode","_component_cropper","ref","src","$data","_ctx","components","CircleStencil","_createElementVNode","onClick","file","click","type","onChange","$options","$event","accept"],"sourceRoot":"","sources":["/home/little/Documents/music_web/startproj/zhengdao-ui/src/views/Music/MusicSearch.vue"],"sourcesContent":["<template>\n    <div class=\"upload-example\">\n\t\t<cropper\n\t\t\tref=\"cropper\"\n\t\t\tclass=\"upload-example-cropper\"\n\t\t\t:src=\"image.src\"\n            :stencil-component=\"$options.components.CircleStencil\"\n\t\t/>\n\t\t<div class=\"button-wrapper\">\n\t\t\t<button class=\"button\" @click=\"$refs.file.click()\">\n\t\t\t\t<input type=\"file\" ref=\"file\" @change=\"loadImage($event)\" accept=\"image/*\">\n\t\t\t\tLoad image\n\t\t\t</button>\n            <button @click=\"anything\"> show result</button>\n\t\t</div>\n\t</div>\n\n</template>\n\n<script>\nimport { CircleStencil, Cropper } from 'vue-advanced-cropper';\nimport 'vue-advanced-cropper/dist/style.css';\n\n// This function is used to detect the actual image type, \nfunction getMimeType(file, fallback = null) {\n\tconst byteArray = (new Uint8Array(file)).subarray(0, 4);\n    let header = '';\n    for (let i = 0; i < byteArray.length; i++) {\n       header += byteArray[i].toString(16);\n    }\n\tswitch (header) {\n        case \"89504e47\":\n            return \"image/png\";\n        case \"47494638\":\n            return \"image/gif\";\n        case \"ffd8ffe0\":\n        case \"ffd8ffe1\":\n        case \"ffd8ffe2\":\n        case \"ffd8ffe3\":\n        case \"ffd8ffe8\":\n            return \"image/jpeg\";\n        default:\n            return fallback;\n    }\n}\n\nexport default {\n\tcomponents: {\n\t\tCropper,\n        CircleStencil\n\t},\n\tdata() {\n\t\treturn {\n\t\t\timage: {\n\t\t\t\tsrc: null,\n\t\t\t\ttype: null\n\t\t\t}\n\t\t};\n\t},\n\tmethods: {\n\t\tcrop() {\n\t\t\tconst { canvas } = this.$refs.cropper.getResult();\n\t\t\tcanvas.toBlob((blob) => {\n\t\t\t\t// Do something with blob: upload to a server, download and etc.\n\t\t\t}, this.image.type);\n\t\t},\n\t\treset() {\n\t\t\tthis.image = {\n\t\t\t\tsrc: null,\n\t\t\t\ttype: null\n\t\t\t}\n\t\t},\n\t\tloadImage(event) {\n\t\t\t// Reference to the DOM input element\n\t\t\tconst { files } = event.target;\n\t\t\t// Ensure that you have a file before attempting to read it\n\t\t\tif (files && files[0]) {\n\t\t\t\t// 1. Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n\t\t\t\tif (this.image.src) {\n\t\t\t\t\tURL.revokeObjectURL(this.image.src)\n\t\t\t\t}\n\t\t\t\t// 2. Create the blob link to the file to optimize performance:\n\t\t\t\tconst blob = URL.createObjectURL(files[0]);\n\t\t\t\t\n\t\t\t\t// 3. The steps below are designated to determine a file mime type to use it during the \n\t\t\t\t// getting of a cropped image from the canvas. You can replace it them by the following string, \n\t\t\t\t// but the type will be derived from the extension and it can lead to an incorrect result:\n\t\t\t\t//\n\t\t\t\t// this.image = {\n\t\t\t\t//    src: blob;\n\t\t\t\t//    type: files[0].type\n\t\t\t\t// }\n\t\t\t\t\n\t\t\t\t// Create a new FileReader to read this image binary data\n\t\t\t\tconst reader = new FileReader();\n\t\t\t\t// Define a callback function to run, when FileReader finishes its job\n\t\t\t\treader.onload = (e) => {\n\t\t\t\t\t// Note: arrow function used here, so that \"this.image\" refers to the image of Vue component\n\t\t\t\t\tthis.image = {\n\t\t\t\t\t\t// Set the image source (it will look like blob:http://example.com/2c5270a5-18b5-406e-a4fb-07427f5e7b94)\n\t\t\t\t\t\tsrc: blob,\n\t\t\t\t\t\t// Determine the image type to preserve it during the extracting the image from canvas:\n\t\t\t\t\t\ttype: getMimeType(e.target.result, files[0].type),\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t// Start the reader job - read file as a data url (base64 format)\n\t\t\t\treader.readAsArrayBuffer(files[0]);\n\t\t\t}\n\t\t},\n\t\n\tdestroyed() {\n\t\t// Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n\t\tif (this.image.src) {\n\t\t\tURL.revokeObjectURL(this.image.src)\n\t\t}\n\t},\n    uploadImage(event) {\n\t\t\t// const { canvas } = this.$refs.cropper.getResult();\n\t\t\t// if (canvas) {\n\t\t\t// \tconst form = new FormData();\n\t\t\t// \tcanvas.toBlob(blob => {\n\t\t\t// \t\tform.append('file', blob);\n\t\t\t// \t\t// You can use axios, superagent and other libraries instead here\n\t\t\t// \t\tfetch('http://example.com/upload/', {\n\t\t\t// \t\t\tmethod: 'POST',\n\t\t\t// \t\t\tbody: form,\n\t\t\t// \t\t});\n\t\t\t// \t\t// Perhaps you should add the setting appropriate file format here\n\t\t\t// \t}, 'image/jpeg');\n\t\t\t// }\n            // console.log(canvas)\n            console.log('hello')\n            alert('hello')\n\t},\n}\n};\n</script>"]},"metadata":{},"sourceType":"module"}