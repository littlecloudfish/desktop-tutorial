{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { inject, computed } from 'vue';\nimport { TABLE_INJECTION_KEY } from '../tokens.mjs';\n\nvar getAllColumns = function getAllColumns(columns) {\n  var result = [];\n  columns.forEach(function (column) {\n    if (column.children) {\n      result.push(column);\n      result.push.apply(result, getAllColumns(column.children));\n    } else {\n      result.push(column);\n    }\n  });\n  return result;\n};\n\nvar convertToRows = function convertToRows(originColumns) {\n  var maxLevel = 1;\n\n  var traverse = function traverse(column, parent) {\n    if (parent) {\n      column.level = parent.level + 1;\n\n      if (maxLevel < column.level) {\n        maxLevel = column.level;\n      }\n    }\n\n    if (column.children) {\n      var colSpan = 0;\n      column.children.forEach(function (subColumn) {\n        traverse(subColumn, column);\n        colSpan += subColumn.colSpan;\n      });\n      column.colSpan = colSpan;\n    } else {\n      column.colSpan = 1;\n    }\n  };\n\n  originColumns.forEach(function (column) {\n    column.level = 1;\n    traverse(column, void 0);\n  });\n  var rows = [];\n\n  for (var i = 0; i < maxLevel; i++) {\n    rows.push([]);\n  }\n\n  var allColumns = getAllColumns(originColumns);\n  allColumns.forEach(function (column) {\n    if (!column.children) {\n      column.rowSpan = maxLevel - column.level + 1;\n    } else {\n      column.rowSpan = 1;\n      column.children.forEach(function (col) {\n        return col.isSubColumn = true;\n      });\n    }\n\n    rows[column.level - 1].push(column);\n  });\n  return rows;\n};\n\nfunction useUtils(props) {\n  var parent = inject(TABLE_INJECTION_KEY);\n  var columnRows = computed(function () {\n    return convertToRows(props.store.states.originColumns.value);\n  });\n  var isGroup = computed(function () {\n    var result = columnRows.value.length > 1;\n\n    if (result && parent) {\n      parent.state.isGroup.value = true;\n    }\n\n    return result;\n  });\n\n  var toggleAllSelection = function toggleAllSelection(event) {\n    event.stopPropagation();\n    parent == null ? void 0 : parent.store.commit(\"toggleAllSelection\");\n  };\n\n  return {\n    isGroup: isGroup,\n    toggleAllSelection: toggleAllSelection,\n    columnRows: columnRows\n  };\n}\n\nexport { useUtils as default };","map":{"version":3,"mappings":"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","names":["getAllColumns","columns","result","forEach","column","children","push","apply","convertToRows","originColumns","maxLevel","traverse","parent","level","colSpan","subColumn","rows","i","allColumns","rowSpan","col","isSubColumn","useUtils","props","inject","TABLE_INJECTION_KEY","columnRows","computed","store","states","value","isGroup","length","state","toggleAllSelection","event","stopPropagation","commit"],"sources":["../../../../../../../packages/components/table/src/table-header/utils-helper.ts"],"sourcesContent":["// @ts-nocheck\nimport { computed, inject } from 'vue'\nimport { TABLE_INJECTION_KEY } from '../tokens'\nimport type { TableColumnCtx } from '../table-column/defaults'\nimport type { TableHeaderProps } from '.'\n\nconst getAllColumns = <T>(\n  columns: TableColumnCtx<T>[]\n): TableColumnCtx<T>[] => {\n  const result: TableColumnCtx<T>[] = []\n  columns.forEach((column) => {\n    if (column.children) {\n      result.push(column)\n      // eslint-disable-next-line prefer-spread\n      result.push.apply(result, getAllColumns(column.children))\n    } else {\n      result.push(column)\n    }\n  })\n  return result\n}\n\nconst convertToRows = <T>(\n  originColumns: TableColumnCtx<T>[]\n): TableColumnCtx<T>[] => {\n  let maxLevel = 1\n  const traverse = (column: TableColumnCtx<T>, parent: TableColumnCtx<T>) => {\n    if (parent) {\n      column.level = parent.level + 1\n      if (maxLevel < column.level) {\n        maxLevel = column.level\n      }\n    }\n    if (column.children) {\n      let colSpan = 0\n      column.children.forEach((subColumn) => {\n        traverse(subColumn, column)\n        colSpan += subColumn.colSpan\n      })\n      column.colSpan = colSpan\n    } else {\n      column.colSpan = 1\n    }\n  }\n\n  originColumns.forEach((column) => {\n    column.level = 1\n    traverse(column, undefined)\n  })\n\n  const rows = []\n  for (let i = 0; i < maxLevel; i++) {\n    rows.push([])\n  }\n\n  const allColumns: TableColumnCtx<T>[] = getAllColumns(originColumns)\n\n  allColumns.forEach((column) => {\n    if (!column.children) {\n      column.rowSpan = maxLevel - column.level + 1\n    } else {\n      column.rowSpan = 1\n      column.children.forEach((col) => (col.isSubColumn = true))\n    }\n    rows[column.level - 1].push(column)\n  })\n\n  return rows\n}\n\nfunction useUtils<T>(props: TableHeaderProps<T>) {\n  const parent = inject(TABLE_INJECTION_KEY)\n  const columnRows = computed(() => {\n    return convertToRows(props.store.states.originColumns.value)\n  })\n  const isGroup = computed(() => {\n    const result = columnRows.value.length > 1\n    if (result && parent) {\n      parent.state.isGroup.value = true\n    }\n    return result\n  })\n  const toggleAllSelection = (event: Event) => {\n    event.stopPropagation()\n    parent?.store.commit('toggleAllSelection')\n  }\n  return {\n    isGroup,\n    toggleAllSelection,\n    columnRows,\n  }\n}\n\nexport default useUtils\n"]},"metadata":{},"sourceType":"module"}