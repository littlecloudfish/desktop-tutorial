{"ast":null,"code":"import _defineProperty from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport { defineComponent, ref, computed, watch, provide, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, createElementVNode, toDisplayString, createCommentVNode, withDirectives, vShow } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../tokens/index.mjs';\nimport TreeStore from './model/tree-store.mjs';\nimport { getNodeKey } from './model/util.mjs';\nimport ElTreeNode from './tree-node.mjs';\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast.mjs';\nimport { useDragNodeHandler } from './model/useDragNode.mjs';\nimport { useKeydown } from './model/useKeydown.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { formItemContextKey } from '../../../tokens/form.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElTree\",\n  components: {\n    ElTreeNode: ElTreeNode\n  },\n  props: {\n    data: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    emptyText: {\n      type: String\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      \"default\": true\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      \"default\": true\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      \"default\": false\n    },\n    autoExpandParent: {\n      type: Boolean,\n      \"default\": true\n    },\n    defaultCheckedKeys: Array,\n    defaultExpandedKeys: Array,\n    currentNodeKey: [String, Number],\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      \"default\": false\n    },\n    draggable: {\n      type: Boolean,\n      \"default\": false\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object,\n      \"default\": function _default() {\n        return {\n          children: \"children\",\n          label: \"label\",\n          disabled: \"disabled\"\n        };\n      }\n    },\n    lazy: {\n      type: Boolean,\n      \"default\": false\n    },\n    highlightCurrent: Boolean,\n    load: Function,\n    filterNodeMethod: Function,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      \"default\": 18\n    },\n    icon: [String, Object]\n  },\n  emits: [\"check-change\", \"current-change\", \"node-click\", \"node-contextmenu\", \"node-collapse\", \"node-expand\", \"check\", \"node-drag-start\", \"node-drag-end\", \"node-drop\", \"node-drag-leave\", \"node-drag-enter\", \"node-drag-over\"],\n  setup: function setup(props, ctx) {\n    var _useLocale = useLocale(),\n        t = _useLocale.t;\n\n    var ns = useNamespace(\"tree\");\n    var store = ref(new TreeStore({\n      key: props.nodeKey,\n      data: props.data,\n      lazy: props.lazy,\n      props: props.props,\n      load: props.load,\n      currentNodeKey: props.currentNodeKey,\n      checkStrictly: props.checkStrictly,\n      checkDescendants: props.checkDescendants,\n      defaultCheckedKeys: props.defaultCheckedKeys,\n      defaultExpandedKeys: props.defaultExpandedKeys,\n      autoExpandParent: props.autoExpandParent,\n      defaultExpandAll: props.defaultExpandAll,\n      filterNodeMethod: props.filterNodeMethod\n    }));\n    store.value.initialize();\n    var root = ref(store.value.root);\n    var currentNode = ref(null);\n    var el$ = ref(null);\n    var dropIndicator$ = ref(null);\n\n    var _useNodeExpandEventBr = useNodeExpandEventBroadcast(props),\n        broadcastExpanded = _useNodeExpandEventBr.broadcastExpanded;\n\n    var _useDragNodeHandler = useDragNodeHandler({\n      props: props,\n      ctx: ctx,\n      el$: el$,\n      dropIndicator$: dropIndicator$,\n      store: store\n    }),\n        dragState = _useDragNodeHandler.dragState;\n\n    useKeydown({\n      el$: el$\n    }, store);\n    var isEmpty = computed(function () {\n      var childNodes = root.value.childNodes;\n      return !childNodes || childNodes.length === 0 || childNodes.every(function (_ref) {\n        var visible = _ref.visible;\n        return !visible;\n      });\n    });\n    watch(function () {\n      return props.defaultCheckedKeys;\n    }, function (newVal) {\n      store.value.setDefaultCheckedKey(newVal);\n    });\n    watch(function () {\n      return props.defaultExpandedKeys;\n    }, function (newVal) {\n      store.value.setDefaultExpandedKeys(newVal);\n    });\n    watch(function () {\n      return props.data;\n    }, function (newVal) {\n      store.value.setData(newVal);\n    }, {\n      deep: true\n    });\n    watch(function () {\n      return props.checkStrictly;\n    }, function (newVal) {\n      store.value.checkStrictly = newVal;\n    });\n\n    var filter = function filter(value) {\n      if (!props.filterNodeMethod) throw new Error(\"[Tree] filterNodeMethod is required when filter\");\n      store.value.filter(value);\n    };\n\n    var getNodeKey$1 = function getNodeKey$1(node) {\n      return getNodeKey(props.nodeKey, node.data);\n    };\n\n    var getNodePath = function getNodePath(data) {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getNodePath\");\n      var node = store.value.getNode(data);\n      if (!node) return [];\n      var path = [node.data];\n      var parent = node.parent;\n\n      while (parent && parent !== root.value) {\n        path.push(parent.data);\n        parent = parent.parent;\n      }\n\n      return path.reverse();\n    };\n\n    var getCheckedNodes = function getCheckedNodes(leafOnly, includeHalfChecked) {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked);\n    };\n\n    var getCheckedKeys = function getCheckedKeys(leafOnly) {\n      return store.value.getCheckedKeys(leafOnly);\n    };\n\n    var getCurrentNode = function getCurrentNode() {\n      var currentNode2 = store.value.getCurrentNode();\n      return currentNode2 ? currentNode2.data : null;\n    };\n\n    var getCurrentKey = function getCurrentKey() {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getCurrentKey\");\n      var currentNode2 = getCurrentNode();\n      return currentNode2 ? currentNode2[props.nodeKey] : null;\n    };\n\n    var setCheckedNodes = function setCheckedNodes(nodes, leafOnly) {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedNodes\");\n      store.value.setCheckedNodes(nodes, leafOnly);\n    };\n\n    var setCheckedKeys = function setCheckedKeys(keys, leafOnly) {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedKeys\");\n      store.value.setCheckedKeys(keys, leafOnly);\n    };\n\n    var setChecked = function setChecked(data, checked, deep) {\n      store.value.setChecked(data, checked, deep);\n    };\n\n    var getHalfCheckedNodes = function getHalfCheckedNodes() {\n      return store.value.getHalfCheckedNodes();\n    };\n\n    var getHalfCheckedKeys = function getHalfCheckedKeys() {\n      return store.value.getHalfCheckedKeys();\n    };\n\n    var setCurrentNode = function setCurrentNode(node) {\n      var shouldAutoExpandParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentNode\");\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent);\n    };\n\n    var setCurrentKey = function setCurrentKey(key) {\n      var shouldAutoExpandParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentKey\");\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent);\n    };\n\n    var getNode = function getNode(data) {\n      return store.value.getNode(data);\n    };\n\n    var remove = function remove(data) {\n      store.value.remove(data);\n    };\n\n    var append = function append(data, parentNode) {\n      store.value.append(data, parentNode);\n    };\n\n    var insertBefore = function insertBefore(data, refNode) {\n      store.value.insertBefore(data, refNode);\n    };\n\n    var insertAfter = function insertAfter(data, refNode) {\n      store.value.insertAfter(data, refNode);\n    };\n\n    var handleNodeExpand = function handleNodeExpand(nodeData, node, instance) {\n      broadcastExpanded(node);\n      ctx.emit(\"node-expand\", nodeData, node, instance);\n    };\n\n    var updateKeyChildren = function updateKeyChildren(key, data) {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in updateKeyChild\");\n      store.value.updateChildren(key, data);\n    };\n\n    provide(\"RootTree\", {\n      ctx: ctx,\n      props: props,\n      store: store,\n      root: root,\n      currentNode: currentNode,\n      instance: getCurrentInstance()\n    });\n    provide(formItemContextKey, void 0);\n    return {\n      ns: ns,\n      store: store,\n      root: root,\n      currentNode: currentNode,\n      dragState: dragState,\n      el$: el$,\n      dropIndicator$: dropIndicator$,\n      isEmpty: isEmpty,\n      filter: filter,\n      getNodeKey: getNodeKey$1,\n      getNodePath: getNodePath,\n      getCheckedNodes: getCheckedNodes,\n      getCheckedKeys: getCheckedKeys,\n      getCurrentNode: getCurrentNode,\n      getCurrentKey: getCurrentKey,\n      setCheckedNodes: setCheckedNodes,\n      setCheckedKeys: setCheckedKeys,\n      setChecked: setChecked,\n      getHalfCheckedNodes: getHalfCheckedNodes,\n      getHalfCheckedKeys: getHalfCheckedKeys,\n      setCurrentNode: setCurrentNode,\n      setCurrentKey: setCurrentKey,\n      t: t,\n      getNode: getNode,\n      remove: remove,\n      append: append,\n      insertBefore: insertBefore,\n      insertAfter: insertAfter,\n      handleNodeExpand: handleNodeExpand,\n      updateKeyChildren: updateKeyChildren\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n\n  var _component_el_tree_node = resolveComponent(\"el-tree-node\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"el$\",\n    \"class\": normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"dragging\", !!_ctx.dragState.draggingNode), _ctx.ns.is(\"drop-not-allow\", !_ctx.dragState.allowDrop), _ctx.ns.is(\"drop-inner\", _ctx.dragState.dropType === \"inner\"), _defineProperty({}, _ctx.ns.m(\"highlight-current\"), _ctx.highlightCurrent)]),\n    role: \"tree\"\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.root.childNodes, function (child) {\n    return openBlock(), createBlock(_component_el_tree_node, {\n      key: _ctx.getNodeKey(child),\n      node: child,\n      props: _ctx.props,\n      accordion: _ctx.accordion,\n      \"render-after-expand\": _ctx.renderAfterExpand,\n      \"show-checkbox\": _ctx.showCheckbox,\n      \"render-content\": _ctx.renderContent,\n      onNodeExpand: _ctx.handleNodeExpand\n    }, null, 8, [\"node\", \"props\", \"accordion\", \"render-after-expand\", \"show-checkbox\", \"render-content\", \"onNodeExpand\"]);\n  }), 128)), _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    \"class\": normalizeClass(_ctx.ns.e(\"empty-block\"))\n  }, [createElementVNode(\"span\", {\n    \"class\": normalizeClass(_ctx.ns.e(\"empty-text\"))\n  }, toDisplayString((_a = _ctx.emptyText) != null ? _a : _ctx.t(\"el.tree.emptyText\")), 3)], 2)) : createCommentVNode(\"v-if\", true), withDirectives(createElementVNode(\"div\", {\n    ref: \"dropIndicator$\",\n    \"class\": normalizeClass(_ctx.ns.e(\"drop-indicator\"))\n  }, null, 2), [[vShow, _ctx.dragState.showDropIndicator]])], 2);\n}\n\nvar Tree = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/tree/src/tree.vue\"]]);\n\nexport { Tree as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElTreeNode","props","data","type","emptyText","renderAfterExpand","nodeKey","checkStrictly","defaultExpandAll","expandOnClickNode","checkOnClickNode","checkDescendants","autoExpandParent","defaultCheckedKeys","defaultExpandedKeys","currentNodeKey","String","Number","renderContent","showCheckbox","draggable","allowDrag","allowDrop","children","label","disabled","lazy","highlightCurrent","load","filterNodeMethod","accordion","indent","icon","Object","emits","setup","ctx","useLocale","t","useNamespace","ref","TreeStore","key","store","value","initialize","root","useNodeExpandEventBroadcast","broadcastExpanded","useDragNodeHandler","el$","dropIndicator$","dragState","useKeydown","computed","childNodes","length","visible","watch","newVal","setDefaultCheckedKey","setDefaultExpandedKeys","setData","deep","filter","Error","getNodeKey","node","getNodeKeyUtil","getNodePath","getNode","parent","path","reverse","getCheckedNodes","leafOnly","includeHalfChecked","getCheckedKeys","getCurrentNode","currentNode2","getCurrentKey","setCheckedNodes","nodes","setCheckedKeys","keys","setChecked","checked","getHalfCheckedNodes","getHalfCheckedKeys","setCurrentNode","shouldAutoExpandParent","setUserCurrentNode","setCurrentKey","setCurrentNodeKey","remove","append","parentNode","insertBefore","refNode","insertAfter","handleNodeExpand","nodeData","instance","emit","updateKeyChildren","updateChildren","provide","currentNode","getCurrentInstance","formItemContextKey","ns","isEmpty","_openBlock","_ctx","b","is","dropType","role","onNodeExpand","_createElementVNode","_toDisplayString","_withDirectives"],"sources":["../../../../../../packages/components/tree/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"el$\"\n    :class=\"[\n      ns.b(),\n      ns.is('dragging', !!dragState.draggingNode),\n      ns.is('drop-not-allow', !dragState.allowDrop),\n      ns.is('drop-inner', dragState.dropType === 'inner'),\n      { [ns.m('highlight-current')]: highlightCurrent },\n    ]\"\n    role=\"tree\"\n  >\n    <el-tree-node\n      v-for=\"child in root.childNodes\"\n      :key=\"getNodeKey(child)\"\n      :node=\"child\"\n      :props=\"props\"\n      :accordion=\"accordion\"\n      :render-after-expand=\"renderAfterExpand\"\n      :show-checkbox=\"showCheckbox\"\n      :render-content=\"renderContent\"\n      @node-expand=\"handleNodeExpand\"\n    />\n    <div v-if=\"isEmpty\" :class=\"ns.e('empty-block')\">\n      <span :class=\"ns.e('empty-text')\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n    <div\n      v-show=\"dragState.showDropIndicator\"\n      ref=\"dropIndicator$\"\n      :class=\"ns.e('drop-indicator')\"\n    />\n  </div>\n</template>\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  provide,\n  ref,\n  watch,\n} from 'vue'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { formItemContextKey } from '@element-plus/tokens'\nimport TreeStore from './model/tree-store'\nimport { getNodeKey as getNodeKeyUtil } from './model/util'\nimport ElTreeNode from './tree-node.vue'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { useDragNodeHandler } from './model/useDragNode'\nimport { useKeydown } from './model/useKeydown'\nimport type Node from './model/node'\n\nimport type { Component, ComponentInternalInstance, PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  TreeComponentProps,\n  TreeData,\n  TreeKey,\n  TreeNodeData,\n} from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTree',\n  components: { ElTreeNode },\n  props: {\n    data: {\n      type: Array,\n      default: () => [],\n    },\n    emptyText: {\n      type: String,\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true,\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true,\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false,\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true,\n    },\n    defaultCheckedKeys: Array as PropType<\n      TreeComponentProps['defaultCheckedKeys']\n    >,\n    defaultExpandedKeys: Array as PropType<\n      TreeComponentProps['defaultExpandedKeys']\n    >,\n    currentNodeKey: [String, Number] as PropType<string | number>,\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object as PropType<TreeComponentProps['props']>,\n      default: () => ({\n        children: 'children',\n        label: 'label',\n        disabled: 'disabled',\n      }),\n    },\n    lazy: {\n      type: Boolean,\n      default: false,\n    },\n    highlightCurrent: Boolean,\n    load: Function as PropType<TreeComponentProps['load']>,\n    filterNodeMethod: Function as PropType<\n      TreeComponentProps['filterNodeMethod']\n    >,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18,\n    },\n    icon: [String, Object] as PropType<string | Component>,\n  },\n  emits: [\n    'check-change',\n    'current-change',\n    'node-click',\n    'node-contextmenu',\n    'node-collapse',\n    'node-expand',\n    'check',\n    'node-drag-start',\n    'node-drag-end',\n    'node-drop',\n    'node-drag-leave',\n    'node-drag-enter',\n    'node-drag-over',\n  ],\n  setup(props, ctx) {\n    const { t } = useLocale()\n    const ns = useNamespace('tree')\n\n    const store = ref<TreeStore>(\n      new TreeStore({\n        key: props.nodeKey,\n        data: props.data,\n        lazy: props.lazy,\n        props: props.props,\n        load: props.load,\n        currentNodeKey: props.currentNodeKey,\n        checkStrictly: props.checkStrictly,\n        checkDescendants: props.checkDescendants,\n        defaultCheckedKeys: props.defaultCheckedKeys,\n        defaultExpandedKeys: props.defaultExpandedKeys,\n        autoExpandParent: props.autoExpandParent,\n        defaultExpandAll: props.defaultExpandAll,\n        filterNodeMethod: props.filterNodeMethod,\n      })\n    )\n\n    store.value.initialize()\n\n    const root = ref<Node>(store.value.root)\n    const currentNode = ref<Node>(null)\n    const el$ = ref<Nullable<HTMLElement>>(null)\n    const dropIndicator$ = ref<Nullable<HTMLElement>>(null)\n\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n\n    const { dragState } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store,\n    })\n\n    useKeydown({ el$ }, store)\n\n    const isEmpty = computed(() => {\n      const { childNodes } = root.value\n      return (\n        !childNodes ||\n        childNodes.length === 0 ||\n        childNodes.every(({ visible }) => !visible)\n      )\n    })\n\n    watch(\n      () => props.defaultCheckedKeys,\n      (newVal) => {\n        store.value.setDefaultCheckedKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultExpandedKeys,\n      (newVal) => {\n        store.value.setDefaultExpandedKeys(newVal)\n      }\n    )\n\n    watch(\n      () => props.data,\n      (newVal) => {\n        store.value.setData(newVal)\n      },\n      { deep: true }\n    )\n\n    watch(\n      () => props.checkStrictly,\n      (newVal) => {\n        store.value.checkStrictly = newVal\n      }\n    )\n\n    const filter = (value) => {\n      if (!props.filterNodeMethod)\n        throw new Error('[Tree] filterNodeMethod is required when filter')\n      store.value.filter(value)\n    }\n\n    const getNodeKey = (node: Node) => {\n      return getNodeKeyUtil(props.nodeKey, node.data)\n    }\n\n    const getNodePath = (data: TreeKey | TreeNodeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getNodePath')\n      const node = store.value.getNode(data)\n      if (!node) return []\n      const path = [node.data]\n      let parent = node.parent\n      while (parent && parent !== root.value) {\n        path.push(parent.data)\n        parent = parent.parent\n      }\n      return path.reverse()\n    }\n\n    const getCheckedNodes = (\n      leafOnly?: boolean,\n      includeHalfChecked?: boolean\n    ): TreeNodeData[] => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked)\n    }\n\n    const getCheckedKeys = (leafOnly?: boolean): TreeKey[] => {\n      return store.value.getCheckedKeys(leafOnly)\n    }\n\n    const getCurrentNode = (): TreeNodeData => {\n      const currentNode = store.value.getCurrentNode()\n      return currentNode ? currentNode.data : null\n    }\n\n    const getCurrentKey = (): any => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getCurrentKey')\n      const currentNode = getCurrentNode()\n      return currentNode ? currentNode[props.nodeKey] : null\n    }\n\n    const setCheckedNodes = (nodes: Node[], leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedNodes')\n      store.value.setCheckedNodes(nodes, leafOnly)\n    }\n\n    const setCheckedKeys = (keys, leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedKeys')\n      store.value.setCheckedKeys(keys, leafOnly)\n    }\n\n    const setChecked = (\n      data: TreeKey | TreeNodeData,\n      checked: boolean,\n      deep: boolean\n    ) => {\n      store.value.setChecked(data, checked, deep)\n    }\n\n    const getHalfCheckedNodes = (): TreeNodeData[] => {\n      return store.value.getHalfCheckedNodes()\n    }\n\n    const getHalfCheckedKeys = (): TreeKey[] => {\n      return store.value.getHalfCheckedKeys()\n    }\n\n    const setCurrentNode = (node: Node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentNode')\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent)\n    }\n\n    const setCurrentKey = (key: TreeKey, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentKey')\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent)\n    }\n\n    const getNode = (data: TreeKey | TreeNodeData): Node => {\n      return store.value.getNode(data)\n    }\n\n    const remove = (data: TreeNodeData | Node) => {\n      store.value.remove(data)\n    }\n\n    const append = (\n      data: TreeNodeData,\n      parentNode: TreeNodeData | TreeKey | Node\n    ) => {\n      store.value.append(data, parentNode)\n    }\n\n    const insertBefore = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertBefore(data, refNode)\n    }\n\n    const insertAfter = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertAfter(data, refNode)\n    }\n\n    const handleNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const updateKeyChildren = (key: TreeKey, data: TreeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in updateKeyChild')\n      store.value.updateChildren(key, data)\n    }\n\n    provide('RootTree', {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance(),\n    } as any)\n\n    provide(formItemContextKey, undefined)\n\n    return {\n      ns,\n      // ref\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n\n      // computed\n      isEmpty,\n\n      // methods\n      filter,\n      getNodeKey,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}