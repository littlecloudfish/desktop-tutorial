{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { defineComponent, getCurrentInstance, inject, ref, computed, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, createElementBlock, Fragment, renderList, createVNode, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { Loading } from '@element-plus/icons-vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport ElCascaderNode from './node2.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { generateId } from '../../../utils/rand.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElCascaderMenu\",\n  components: {\n    Loading: Loading,\n    ElIcon: ElIcon,\n    ElScrollbar: ElScrollbar,\n    ElCascaderNode: ElCascaderNode\n  },\n  props: {\n    nodes: {\n      type: Array,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: true\n    }\n  },\n  setup: function setup(props) {\n    var instance = getCurrentInstance();\n    var ns = useNamespace(\"cascader-menu\");\n\n    var _useLocale = useLocale(),\n        t = _useLocale.t;\n\n    var id = generateId();\n    var activeNode = null;\n    var hoverTimer = null;\n    var panel = inject(CASCADER_PANEL_INJECTION_KEY);\n    var hoverZone = ref(null);\n    var isEmpty = computed(function () {\n      return !props.nodes.length;\n    });\n    var isLoading = computed(function () {\n      return !panel.initialLoaded;\n    });\n    var menuId = computed(function () {\n      return \"cascader-menu-\".concat(id, \"-\").concat(props.index);\n    });\n\n    var handleExpand = function handleExpand(e) {\n      activeNode = e.target;\n    };\n\n    var handleMouseMove = function handleMouseMove(e) {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return;\n\n      if (activeNode.contains(e.target)) {\n        clearHoverTimer();\n        var el = instance.vnode.el;\n\n        var _el$getBoundingClient = el.getBoundingClientRect(),\n            left = _el$getBoundingClient.left;\n\n        var offsetWidth = el.offsetWidth,\n            offsetHeight = el.offsetHeight;\n        var startX = e.clientX - left;\n        var top = activeNode.offsetTop;\n        var bottom = top + activeNode.offsetHeight;\n        hoverZone.value.innerHTML = \"\\n          <path style=\\\"pointer-events: auto;\\\" fill=\\\"transparent\\\" d=\\\"M\".concat(startX, \" \").concat(top, \" L\").concat(offsetWidth, \" 0 V\").concat(top, \" Z\\\" />\\n          <path style=\\\"pointer-events: auto;\\\" fill=\\\"transparent\\\" d=\\\"M\").concat(startX, \" \").concat(bottom, \" L\").concat(offsetWidth, \" \").concat(offsetHeight, \" V\").concat(bottom, \" Z\\\" />\\n        \");\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);\n      }\n    };\n\n    var clearHoverTimer = function clearHoverTimer() {\n      if (!hoverTimer) return;\n      clearTimeout(hoverTimer);\n      hoverTimer = null;\n    };\n\n    var clearHoverZone = function clearHoverZone() {\n      if (!hoverZone.value) return;\n      hoverZone.value.innerHTML = \"\";\n      clearHoverTimer();\n    };\n\n    return {\n      ns: ns,\n      panel: panel,\n      hoverZone: hoverZone,\n      isEmpty: isEmpty,\n      isLoading: isLoading,\n      menuId: menuId,\n      t: t,\n      handleExpand: handleExpand,\n      handleMouseMove: handleMouseMove,\n      clearHoverZone: clearHoverZone\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_cascader_node = resolveComponent(\"el-cascader-node\");\n\n  var _component_loading = resolveComponent(\"loading\");\n\n  var _component_el_icon = resolveComponent(\"el-icon\");\n\n  var _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n\n  return openBlock(), createBlock(_component_el_scrollbar, {\n    key: _ctx.menuId,\n    tag: \"ul\",\n    role: \"menu\",\n    \"class\": normalizeClass(_ctx.ns.b()),\n    \"wrap-class\": _ctx.ns.e(\"wrap\"),\n    \"view-class\": [_ctx.ns.e(\"list\"), _ctx.ns.is(\"empty\", _ctx.isEmpty)],\n    onMousemove: _ctx.handleMouseMove,\n    onMouseleave: _ctx.clearHoverZone\n  }, {\n    \"default\": withCtx(function () {\n      var _a;\n\n      return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.nodes, function (node) {\n        return openBlock(), createBlock(_component_el_cascader_node, {\n          key: node.uid,\n          node: node,\n          \"menu-id\": _ctx.menuId,\n          onExpand: _ctx.handleExpand\n        }, null, 8, [\"node\", \"menu-id\", \"onExpand\"]);\n      }), 128)), _ctx.isLoading ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        \"class\": normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, [createVNode(_component_el_icon, {\n        size: \"14\",\n        \"class\": normalizeClass(_ctx.ns.is(\"loading\"))\n      }, {\n        \"default\": withCtx(function () {\n          return [createVNode(_component_loading)];\n        }),\n        _: 1\n      }, 8, [\"class\"]), createTextVNode(\" \" + toDisplayString(_ctx.t(\"el.cascader.loading\")), 1)], 2)) : _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", {\n        key: 1,\n        \"class\": normalizeClass(_ctx.ns.e(\"empty-text\"))\n      }, toDisplayString(_ctx.t(\"el.cascader.noData\")), 3)) : ((_a = _ctx.panel) == null ? void 0 : _a.isHoverMenu) ? (openBlock(), createElementBlock(\"svg\", {\n        key: 2,\n        ref: \"hoverZone\",\n        \"class\": normalizeClass(_ctx.ns.e(\"hover-zone\"))\n      }, null, 2)) : createCommentVNode(\"v-if\", true)];\n    }),\n    _: 1\n  }, 8, [\"class\", \"wrap-class\", \"view-class\", \"onMousemove\", \"onMouseleave\"]);\n}\n\nvar ElCascaderMenu = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/cascader-panel/src/menu.vue\"]]);\n\nexport { ElCascaderMenu as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","Loading","ElIcon","ElScrollbar","ElCascaderNode","props","nodes","type","required","index","setup","instance","getCurrentInstance","useNamespace","useLocale","t","id","generateId","activeNode","hoverTimer","inject","CASCADER_PANEL_INJECTION_KEY","ref","isEmpty","computed","length","isLoading","panel","initialLoaded","menuId","handleExpand","e","handleMouseMove","hoverZone","clearHoverTimer","vnode","el","getBoundingClientRect","left","offsetWidth","offsetHeight","clientX","top","value","innerHTML","startX","bottom","window","clearHoverZone","config","hoverThreshold","clearTimeout","ns","_createBlock","key","tag","role","_normalizeClass","b","_ctx","is","onMousemove","onMouseleave","_openBlock","_createElementBlock","node","_createVNode","size","_","_createTextVNode","_toDisplayString"],"sources":["../../../../../../packages/components/cascader-panel/src/menu.vue"],"sourcesContent":["<template>\n  <el-scrollbar\n    :key=\"menuId\"\n    tag=\"ul\"\n    role=\"menu\"\n    :class=\"ns.b()\"\n    :wrap-class=\"ns.e('wrap')\"\n    :view-class=\"[ns.e('list'), ns.is('empty', isEmpty)]\"\n    @mousemove=\"handleMouseMove\"\n    @mouseleave=\"clearHoverZone\"\n  >\n    <el-cascader-node\n      v-for=\"node in nodes\"\n      :key=\"node.uid\"\n      :node=\"node\"\n      :menu-id=\"menuId\"\n      @expand=\"handleExpand\"\n    />\n    <div v-if=\"isLoading\" :class=\"ns.e('empty-text')\">\n      <el-icon size=\"14\" :class=\"ns.is('loading')\">\n        <loading />\n      </el-icon>\n      {{ t('el.cascader.loading') }}\n    </div>\n    <div v-else-if=\"isEmpty\" :class=\"ns.e('empty-text')\">\n      {{ t('el.cascader.noData') }}\n    </div>\n    <svg\n      v-else-if=\"panel?.isHoverMenu\"\n      ref=\"hoverZone\"\n      :class=\"ns.e('hover-zone')\"\n    />\n  </el-scrollbar>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, inject, ref } from 'vue'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { generateId } from '@element-plus/utils'\nimport { Loading } from '@element-plus/icons-vue'\nimport ElIcon from '@element-plus/components/icon'\nimport ElCascaderNode from './node.vue'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type { default as CascaderNode } from './node'\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\n\nexport default defineComponent({\n  name: 'ElCascaderMenu',\n\n  components: {\n    Loading,\n    ElIcon,\n    ElScrollbar,\n    ElCascaderNode,\n  },\n\n  props: {\n    nodes: {\n      type: Array as PropType<CascaderNode[]>,\n      required: true,\n    },\n    index: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const ns = useNamespace('cascader-menu')\n\n    const { t } = useLocale()\n    const id = generateId()\n    let activeNode: Nullable<HTMLElement> = null\n    let hoverTimer: Nullable<number> = null\n\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\n    const hoverZone = ref<null | SVGSVGElement>(null)\n\n    const isEmpty = computed(() => !props.nodes.length)\n    const isLoading = computed(() => !panel.initialLoaded)\n    const menuId = computed(() => `cascader-menu-${id}-${props.index}`)\n\n    const handleExpand = (e: MouseEvent) => {\n      activeNode = e.target as HTMLElement\n    }\n\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return\n\n      if (activeNode.contains(e.target as HTMLElement)) {\n        clearHoverTimer()\n\n        const el = instance.vnode.el as HTMLElement\n        const { left } = el.getBoundingClientRect()\n        const { offsetWidth, offsetHeight } = el\n        const startX = e.clientX - left\n        const top = activeNode.offsetTop\n        const bottom = top + activeNode.offsetHeight\n\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(\n          clearHoverZone,\n          panel.config.hoverThreshold\n        )\n      }\n    }\n\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return\n      clearTimeout(hoverTimer)\n      hoverTimer = null\n    }\n\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return\n      hoverZone.value.innerHTML = ''\n      clearHoverTimer()\n    }\n    return {\n      ns,\n      panel,\n      hoverZone,\n      isEmpty,\n      isLoading,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}