{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport { CircleStencil, Cropper } from 'vue-advanced-cropper';\nimport 'vue-advanced-cropper/dist/style.css';\n\nfunction getMimeType(file, fallback = null) {\n  const byteArray = new Uint8Array(file).subarray(0, 4);\n  let header = '';\n\n  for (let i = 0; i < byteArray.length; i++) {\n    header += byteArray[i].toString(16);\n  }\n\n  switch (header) {\n    case \"89504e47\":\n      return \"image/png\";\n\n    case \"47494638\":\n      return \"image/gif\";\n\n    case \"ffd8ffe0\":\n    case \"ffd8ffe1\":\n    case \"ffd8ffe2\":\n    case \"ffd8ffe3\":\n    case \"ffd8ffe8\":\n      return \"image/jpeg\";\n\n    default:\n      return fallback;\n  }\n}\n\nexport default {\n  components: {\n    Cropper,\n    CircleStencil\n  },\n\n  data() {\n    return {\n      // img: 'https://images.pexels.com/photos/4323307/pexels-photo-4323307.jpeg',\n      img: {\n        src: null,\n        type: null\n      }\n    };\n  },\n\n  methods: {\n    change({\n      coordinates,\n      canvas\n    }) {\n      console.log(coordinates, canvas);\n    },\n\n    crop() {\n      const {\n        canvas\n      } = this.$refs.cropper.getResult();\n      canvas.toBlob(blob => {// Do something with blob: upload to a server, download and etc.\n      }, this.image.type);\n    },\n\n    reset() {\n      this.image = {\n        src: null,\n        type: null\n      };\n    },\n\n    loadImage(event) {\n      // Reference to the DOM input element\n      const {\n        files\n      } = event.target; // Ensure that you have a file before attempting to read it\n\n      if (files && files[0]) {\n        // 1. Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n        if (this.image.src) {\n          URL.revokeObjectURL(this.image.src);\n        } // 2. Create the blob link to the file to optimize performance:\n\n\n        const blob = URL.createObjectURL(files[0]); // 3. The steps below are designated to determine a file mime type to use it during the \n        // getting of a cropped image from the canvas. You can replace it them by the following string, \n        // but the type will be derived from the extension and it can lead to an incorrect result:\n        //\n        // this.image = {\n        //    src: blob;\n        //    type: files[0].type\n        // }\n        // Create a new FileReader to read this image binary data\n\n        const reader = new FileReader(); // Define a callback function to run, when FileReader finishes its job\n\n        reader.onload = e => {\n          // Note: arrow function used here, so that \"this.image\" refers to the image of Vue component\n          this.image = {\n            // Set the image source (it will look like blob:http://example.com/2c5270a5-18b5-406e-a4fb-07427f5e7b94)\n            src: blob,\n            // Determine the image type to preserve it during the extracting the image from canvas:\n            type: getMimeType(e.target.result, files[0].type)\n          };\n        }; // Start the reader job - read file as a data url (base64 format)\n\n\n        reader.readAsArrayBuffer(files[0]);\n      }\n    }\n\n  },\n\n  destroyed() {\n    // Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n    if (this.image.src) {\n      URL.revokeObjectURL(this.image.src);\n    }\n  }\n\n};","map":{"version":3,"mappings":"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","names":["CircleStencil","Cropper","getMimeType","file","fallback","byteArray","Uint8Array","subarray","header","i","length","toString","components","data","img","src","type","methods","change","coordinates","canvas","console","log","crop","$refs","cropper","getResult","toBlob","blob","image","reset","loadImage","event","files","target","URL","revokeObjectURL","createObjectURL","reader","FileReader","onload","e","result","readAsArrayBuffer","destroyed"],"sourceRoot":"","sources":["/home/little/Documents/music_web/startproj/zhengdao-ui/src/views/Music/MusicSearch.vue"],"sourcesContent":["<template>\n\n<div class = \"upload-example\">\n<cropper\n:src = \"img.src\"\n:stencil-component=\"$options.components.CircleStencil\"\n/>\n</div>\n<div class = \"button-wrapper\">\n    <button class = \"button\" @click = \"$refs.file.click()\">\n        <input type=\"file\" ref=\"file\" @change = \"loadImage($event)\" accept=\"image/*\"/>\n    </button>\n    Load Image\n</div>\n\n</template>\n\n<script>\nimport { CircleStencil, Cropper } from 'vue-advanced-cropper';\nimport 'vue-advanced-cropper/dist/style.css';\n\nfunction getMimeType(file, fallback = null) {\n\tconst byteArray = (new Uint8Array(file)).subarray(0, 4);\n    let header = '';\n    for (let i = 0; i < byteArray.length; i++) {\n       header += byteArray[i].toString(16);\n    }\n\tswitch (header) {\n        case \"89504e47\":\n            return \"image/png\";\n        case \"47494638\":\n            return \"image/gif\";\n        case \"ffd8ffe0\":\n        case \"ffd8ffe1\":\n        case \"ffd8ffe2\":\n        case \"ffd8ffe3\":\n        case \"ffd8ffe8\":\n            return \"image/jpeg\";\n        default:\n            return fallback;\n    }\n}\n\nexport default {\ncomponents: {\nCropper,CircleStencil\n},\ndata() {\nreturn {\n// img: 'https://images.pexels.com/photos/4323307/pexels-photo-4323307.jpeg',\n    img:{\n        src: null,\n        type:null\n    }\n};\n},\nmethods: {\n    change({ coordinates, canvas }) {\n    console.log(coordinates, canvas);\n    },\n    crop() {\n                const { canvas } = this.$refs.cropper.getResult();\n                canvas.toBlob((blob) => {\n                    // Do something with blob: upload to a server, download and etc.\n                }, this.image.type);\n            },\n    reset() {\n        this.image = {\n            src: null,\n            type: null\n        }\n    },\n    loadImage(event) {\n        // Reference to the DOM input element\n        const { files } = event.target;\n        // Ensure that you have a file before attempting to read it\n        if (files && files[0]) {\n            // 1. Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n            if (this.image.src) {\n                URL.revokeObjectURL(this.image.src)\n            }\n            // 2. Create the blob link to the file to optimize performance:\n            const blob = URL.createObjectURL(files[0]);\n            \n            // 3. The steps below are designated to determine a file mime type to use it during the \n            // getting of a cropped image from the canvas. You can replace it them by the following string, \n            // but the type will be derived from the extension and it can lead to an incorrect result:\n            //\n            // this.image = {\n            //    src: blob;\n            //    type: files[0].type\n            // }\n            \n            // Create a new FileReader to read this image binary data\n            const reader = new FileReader();\n            // Define a callback function to run, when FileReader finishes its job\n            reader.onload = (e) => {\n                // Note: arrow function used here, so that \"this.image\" refers to the image of Vue component\n                this.image = {\n                    // Set the image source (it will look like blob:http://example.com/2c5270a5-18b5-406e-a4fb-07427f5e7b94)\n                    src: blob,\n                    // Determine the image type to preserve it during the extracting the image from canvas:\n                    type: getMimeType(e.target.result, files[0].type),\n                };\n            };\n            // Start the reader job - read file as a data url (base64 format)\n            reader.readAsArrayBuffer(files[0]);\n        }\n    },\n},\n    destroyed() {\n        // Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n        if (this.image.src) {\n            URL.revokeObjectURL(this.image.src)\n        }\n    }\n\n\n\n\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}