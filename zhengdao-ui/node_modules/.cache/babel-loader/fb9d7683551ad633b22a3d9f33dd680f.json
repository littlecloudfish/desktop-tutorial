{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport BaseMixin from './AvBase';\n/**\n * Component props\n */\n\nconst props = {\n  /**\n   * prop: 'line-width'\n   * Draw line width in px\n   */\n  lineWidth: {\n    type: Number,\n    default: 2\n  },\n\n  /**\n   * prop: 'line-color'\n   * Draw line color or gradient array\n   */\n  lineColor: {\n    type: [String, Array],\n    default: '#9F9'\n  },\n\n  /**\n   * prop: 'fft-size'\n   * Represents the window size in samples that is used when performing\n   * a Fast Fourier Transform (FFT) to get frequency domain data.\n   * Must be power of 2 between 2^5 and 2^15\n   * Default: 128\n   */\n  fftSize: {\n    type: Number,\n    default: 128\n  }\n};\n/**\n * Component AvLine\n */\n\nconst AvLine = {\n  name: 'av-line',\n  mixins: [BaseMixin],\n  props,\n\n  data() {\n    return {\n      animId: null,\n      audio: null,\n      analyser: null,\n      ctx: null,\n      audioCtx: null\n    };\n  },\n\n  methods: {\n    /**\n     * Main loop. Draws visualization.\n     */\n    mainLoop: function () {\n      const frqBits = this.analyser.frequencyBinCount;\n      const step = this.canvWidth / 2.0 / frqBits;\n      const data = new Uint8Array(frqBits);\n      let x = 0;\n\n      this._setCanvas();\n\n      this.analyser.getByteFrequencyData(data);\n      this.ctx.lineWidth = this.lineWidth;\n      this.ctx.strokeStyle = Array.isArray(this.lineColor) ? this.fillGradient(this.lineColor) : this.lineColor;\n      this.ctx.beginPath();\n      data.reverse();\n      this.ctx.moveTo(x, this.canvHeight / 2);\n      x = this._drawLine(data, x, step);\n      data.reverse();\n      x = this._drawLine(data, x, step);\n      this.ctx.lineTo(this.canvWidth, this.canvHeight / 2);\n      this.ctx.stroke();\n      this.animId = requestAnimationFrame(this.mainLoop);\n    },\n\n    /**\n     * Canvas clear background fill\n     * @private\n     */\n    _setCanvas: function () {\n      const w = this.canvWidth;\n      const h = this.canvHeight;\n      const canvColor = this.canvFillColor;\n      const gradient = this.ctx.createLinearGradient(w / 2, 0, w / 2, h);\n      let offset = 0;\n      this.ctx.clearRect(0, 0, w, h);\n      if (!canvColor) return;\n\n      if (Array.isArray(canvColor)) {\n        canvColor.forEach(color => {\n          gradient.addColorStop(offset, color);\n          offset += 1 / canvColor.length;\n        });\n        this.ctx.fillStyle = gradient;\n      } else {\n        this.ctx.fillStyle = canvColor;\n      }\n\n      this.ctx.fillRect(0, 0, w, h);\n    },\n\n    /**\n     * Draw line and return last X\n     * @private\n     */\n    _drawLine: function (data, x, step) {\n      const h = this.canvHeight;\n      let y = 0;\n      data.forEach((v, i) => {\n        // (h / 2) - v / 255 * (h / 2)\n        y = h * (255 - v) / 510;\n        if (i % 2) y = h - y;\n        this.ctx.lineTo(x, y);\n        x += step;\n      });\n      return x;\n    }\n  }\n};\nexport default AvLine;","map":{"version":3,"names":["BaseMixin","props","lineWidth","type","Number","default","lineColor","String","Array","fftSize","AvLine","name","mixins","data","animId","audio","analyser","ctx","audioCtx","methods","mainLoop","frqBits","frequencyBinCount","step","canvWidth","Uint8Array","x","_setCanvas","getByteFrequencyData","strokeStyle","isArray","fillGradient","beginPath","reverse","moveTo","canvHeight","_drawLine","lineTo","stroke","requestAnimationFrame","w","h","canvColor","canvFillColor","gradient","createLinearGradient","offset","clearRect","forEach","color","addColorStop","length","fillStyle","fillRect","y","v","i"],"sources":["/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/vue-audio-visual/src/components/AvLine.js"],"sourcesContent":["import BaseMixin from './AvBase'\n\n/**\n * Component props\n */\nconst props = {\n  /**\n   * prop: 'line-width'\n   * Draw line width in px\n   */\n  lineWidth: {\n    type: Number,\n    default: 2\n  },\n  /**\n   * prop: 'line-color'\n   * Draw line color or gradient array\n   */\n  lineColor: {\n    type: [String, Array],\n    default: '#9F9'\n  },\n  /**\n   * prop: 'fft-size'\n   * Represents the window size in samples that is used when performing\n   * a Fast Fourier Transform (FFT) to get frequency domain data.\n   * Must be power of 2 between 2^5 and 2^15\n   * Default: 128\n   */\n  fftSize: {\n    type: Number,\n    default: 128\n  }\n}\n\n/**\n * Component AvLine\n */\nconst AvLine = {\n  name: 'av-line',\n  mixins: [ BaseMixin ],\n  props,\n  data () {\n    return {\n      animId: null,\n      audio: null,\n      analyser: null,\n      ctx: null,\n      audioCtx: null\n    }\n  },\n  methods: {\n    /**\n     * Main loop. Draws visualization.\n     */\n    mainLoop: function () {\n      const frqBits = this.analyser.frequencyBinCount\n      const step = (this.canvWidth / 2.0) / frqBits\n      const data = new Uint8Array(frqBits)\n      let x = 0\n\n      this._setCanvas()\n      this.analyser.getByteFrequencyData(data)\n\n      this.ctx.lineWidth = this.lineWidth\n      this.ctx.strokeStyle = Array.isArray(this.lineColor)\n        ? this.fillGradient(this.lineColor)\n        : this.lineColor\n      this.ctx.beginPath()\n\n      data.reverse()\n      this.ctx.moveTo(x, this.canvHeight / 2)\n      x = this._drawLine(data, x, step)\n      data.reverse()\n      x = this._drawLine(data, x, step)\n      this.ctx.lineTo(this.canvWidth, this.canvHeight / 2)\n      this.ctx.stroke()\n\n      this.animId = requestAnimationFrame(this.mainLoop)\n    },\n    /**\n     * Canvas clear background fill\n     * @private\n     */\n    _setCanvas: function () {\n      const w = this.canvWidth\n      const h = this.canvHeight\n      const canvColor = this.canvFillColor\n      const gradient = this.ctx.createLinearGradient(w / 2, 0, w / 2, h)\n      let offset = 0\n      this.ctx.clearRect(0, 0, w, h)\n\n      if (!canvColor) return\n\n      if (Array.isArray(canvColor)) {\n        canvColor.forEach(color => {\n          gradient.addColorStop(offset, color)\n          offset += (1 / canvColor.length)\n        })\n        this.ctx.fillStyle = gradient\n      } else {\n        this.ctx.fillStyle = canvColor\n      }\n      this.ctx.fillRect(0, 0, w, h)\n    },\n    /**\n     * Draw line and return last X\n     * @private\n     */\n    _drawLine: function (data, x, step) {\n      const h = this.canvHeight\n      let y = 0\n      data.forEach((v, i) => {\n        // (h / 2) - v / 255 * (h / 2)\n        y = h * (255 - v) / 510\n        if (i % 2) y = h - y\n        this.ctx.lineTo(x, y)\n        x += step\n      })\n      return x\n    }\n  }\n}\n\nexport default AvLine\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}