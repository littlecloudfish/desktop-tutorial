{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"upload-example\"\n};\nexport function render(_ctx, _cache) {\n  const _component_cropper = _resolveComponent(\"cropper\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_cropper, {\n    src: \"https://images.pexels.com/photos/1254140/pexels-photo-1254140.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\",\n    \"stencil-component\": _ctx.$options.components.CircleStencil\n  }, null, 8\n  /* PROPS */\n  , [\"stencil-component\"])]);\n}","map":{"version":3,"mappings":";;EAEKA,KAAK,EAAG;;;;;uBAAbC,oBAKM,KALN,cAKM,CAJNC,aAGEC,kBAHF,EAGE;IAFFC,GAAG,EAAC,gHAEF;IADD,qBAAmBC,cAASC,UAAT,CAAoBC;EACtC,CAHF;;EAAA,wBAIM,CALN","names":["class","_createElementBlock","_createVNode","_component_cropper","src","_ctx","components","CircleStencil"],"sourceRoot":"","sources":["/home/little/Documents/music_web/startproj/zhengdao-ui/src/views/Music/MusicSearch.vue"],"sourcesContent":["<template>\n\n<div class = \"upload-example\">\n<cropper\nsrc=\"https://images.pexels.com/photos/1254140/pexels-photo-1254140.jpeg?auto=compress&cs=tinysrgb&dpr=2&h=650&w=940\"\n:stencil-component=\"$options.components.CircleStencil\"\n/>\n</div>\n\n\n</template>\n\n<script>\nimport { CircleStencil, Cropper } from 'vue-advanced-cropper';\nimport 'vue-advanced-cropper/dist/style.css';\n\nfunction getMimeType(file, fallback = null) {\n\tconst byteArray = (new Uint8Array(file)).subarray(0, 4);\n    let header = '';\n    for (let i = 0; i < byteArray.length; i++) {\n       header += byteArray[i].toString(16);\n    }\n\tswitch (header) {\n        case \"89504e47\":\n            return \"image/png\";\n        case \"47494638\":\n            return \"image/gif\";\n        case \"ffd8ffe0\":\n        case \"ffd8ffe1\":\n        case \"ffd8ffe2\":\n        case \"ffd8ffe3\":\n        case \"ffd8ffe8\":\n            return \"image/jpeg\";\n        default:\n            return fallback;\n    }\n}\n\nexport default {\ncomponents: {\nCropper,CircleStencil\n},\ndata() {\nreturn {\n// img: 'https://images.pexels.com/photos/4323307/pexels-photo-4323307.jpeg',\n    img:{\n        src: null,\n        type:null\n    }\n};\n},\nmethods: {\nchange({ coordinates, canvas }) {\nconsole.log(coordinates, canvas);\n},\ncrop() {\n\t\t\tconst { canvas } = this.$refs.cropper.getResult();\n\t\t\tcanvas.toBlob((blob) => {\n\t\t\t\t// Do something with blob: upload to a server, download and etc.\n\t\t\t}, this.image.type);\n\t\t},\n\t\treset() {\n\t\t\tthis.image = {\n\t\t\t\tsrc: null,\n\t\t\t\ttype: null\n\t\t\t}\n\t\t},\n\t\tloadImage(event) {\n\t\t\t// Reference to the DOM input element\n\t\t\tconst { files } = event.target;\n\t\t\t// Ensure that you have a file before attempting to read it\n\t\t\tif (files && files[0]) {\n\t\t\t\t// 1. Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n\t\t\t\tif (this.image.src) {\n\t\t\t\t\tURL.revokeObjectURL(this.image.src)\n\t\t\t\t}\n\t\t\t\t// 2. Create the blob link to the file to optimize performance:\n\t\t\t\tconst blob = URL.createObjectURL(files[0]);\n\t\t\t\t\n\t\t\t\t// 3. The steps below are designated to determine a file mime type to use it during the \n\t\t\t\t// getting of a cropped image from the canvas. You can replace it them by the following string, \n\t\t\t\t// but the type will be derived from the extension and it can lead to an incorrect result:\n\t\t\t\t//\n\t\t\t\t// this.image = {\n\t\t\t\t//    src: blob;\n\t\t\t\t//    type: files[0].type\n\t\t\t\t// }\n\t\t\t\t\n\t\t\t\t// Create a new FileReader to read this image binary data\n\t\t\t\tconst reader = new FileReader();\n\t\t\t\t// Define a callback function to run, when FileReader finishes its job\n\t\t\t\treader.onload = (e) => {\n\t\t\t\t\t// Note: arrow function used here, so that \"this.image\" refers to the image of Vue component\n\t\t\t\t\tthis.image = {\n\t\t\t\t\t\t// Set the image source (it will look like blob:http://example.com/2c5270a5-18b5-406e-a4fb-07427f5e7b94)\n\t\t\t\t\t\tsrc: blob,\n\t\t\t\t\t\t// Determine the image type to preserve it during the extracting the image from canvas:\n\t\t\t\t\t\ttype: getMimeType(e.target.result, files[0].type),\n\t\t\t\t\t};\n\t\t\t\t};\n\t\t\t\t// Start the reader job - read file as a data url (base64 format)\n\t\t\t\treader.readAsArrayBuffer(files[0]);\n\t\t\t}\n\t\t},\n\t},\n\tdestroyed() {\n\t\t// Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n\t\tif (this.image.src) {\n\t\t\tURL.revokeObjectURL(this.image.src)\n\t\t}\n\t}\n\n\n\n\n\n},\n\n\n\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}