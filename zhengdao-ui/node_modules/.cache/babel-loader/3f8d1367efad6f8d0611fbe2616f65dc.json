{"ast":null,"code":"import _regeneratorRuntime from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectWithoutProperties from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _toConsumableArray from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"trigger\"];\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { defineComponent, useSlots, inject, ref, computed, nextTick, watch, reactive, toRefs, provide, onMounted, onBeforeUnmount, openBlock, createElementBlock, normalizeClass, unref, createVNode, withCtx, createBlock, resolveDynamicComponent, normalizeStyle, renderSlot, createTextVNode, toDisplayString, createCommentVNode, createElementVNode, Transition } from 'vue';\nimport AsyncValidator from 'async-validator';\nimport { castArray, isEqual, clone } from 'lodash-unified';\nimport { refDebounced, isBoolean } from '@vueuse/core';\nimport '../../../utils/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { formItemProps } from './form-item.mjs';\nimport FormLabelWrap from './form-label-wrap.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { formContextKey, formItemContextKey } from '../../../tokens/form.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nimport { isString, isFunction } from '@vue/shared';\nimport { getProp } from '../../../utils/objects.mjs';\nvar _hoisted_1 = [\"role\", \"aria-labelledby\"];\nvar __default__ = {\n  name: \"ElFormItem\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: formItemProps,\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n    var slots = useSlots();\n    var formContext = inject(formContextKey, void 0);\n    var parentFormItemContext = inject(formItemContextKey, void 0);\n\n    var _size = useSize(void 0, {\n      formItem: false\n    });\n\n    var ns = useNamespace(\"form-item\");\n    var labelId = useId().value;\n    var inputIds = ref([]);\n    var validateState = ref(\"\");\n    var validateStateDebounced = refDebounced(validateState, 100);\n    var validateMessage = ref(\"\");\n    var formItemRef = ref();\n    var initialValue = void 0;\n    var isResettingField = false;\n    var labelStyle = computed(function () {\n      if ((formContext == null ? void 0 : formContext.labelPosition) === \"top\") {\n        return {};\n      }\n\n      var labelWidth = addUnit(props.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || \"\");\n      if (labelWidth) return {\n        width: labelWidth\n      };\n      return {};\n    });\n    var contentStyle = computed(function () {\n      if ((formContext == null ? void 0 : formContext.labelPosition) === \"top\" || (formContext == null ? void 0 : formContext.inline)) {\n        return {};\n      }\n\n      if (!props.label && !props.labelWidth && isNested) {\n        return {};\n      }\n\n      var labelWidth = addUnit(props.labelWidth || (formContext == null ? void 0 : formContext.labelWidth) || \"\");\n\n      if (!props.label && !slots.label) {\n        return {\n          marginLeft: labelWidth\n        };\n      }\n\n      return {};\n    });\n    var formItemClasses = computed(function () {\n      return [ns.b(), ns.m(_size.value), ns.is(\"error\", validateState.value === \"error\"), ns.is(\"validating\", validateState.value === \"validating\"), ns.is(\"success\", validateState.value === \"success\"), ns.is(\"required\", isRequired.value || props.required), ns.is(\"no-asterisk\", formContext == null ? void 0 : formContext.hideRequiredAsterisk), _defineProperty({}, ns.m(\"feedback\"), formContext == null ? void 0 : formContext.statusIcon)];\n    });\n\n    var _inlineMessage = computed(function () {\n      return isBoolean(props.inlineMessage) ? props.inlineMessage : (formContext == null ? void 0 : formContext.inlineMessage) || false;\n    });\n\n    var validateClasses = computed(function () {\n      return [ns.e(\"error\"), _defineProperty({}, ns.em(\"error\", \"inline\"), _inlineMessage.value)];\n    });\n    var propString = computed(function () {\n      if (!props.prop) return \"\";\n      return isString(props.prop) ? props.prop : props.prop.join(\".\");\n    });\n    var hasLabel = computed(function () {\n      return !!(props.label || slots.label);\n    });\n    var labelFor = computed(function () {\n      return props[\"for\"] || inputIds.value.length === 1 ? inputIds.value[0] : void 0;\n    });\n    var isGroup = computed(function () {\n      return !labelFor.value && hasLabel.value;\n    });\n    var isNested = !!parentFormItemContext;\n    var fieldValue = computed(function () {\n      var model = formContext == null ? void 0 : formContext.model;\n\n      if (!model || !props.prop) {\n        return;\n      }\n\n      return getProp(model, props.prop).value;\n    });\n\n    var _rules = computed(function () {\n      var rules = props.rules ? castArray(props.rules) : [];\n      var formRules = formContext == null ? void 0 : formContext.rules;\n\n      if (formRules && props.prop) {\n        var _rules2 = getProp(formRules, props.prop).value;\n\n        if (_rules2) {\n          rules.push.apply(rules, _toConsumableArray(castArray(_rules2)));\n        }\n      }\n\n      if (props.required !== void 0) {\n        rules.push({\n          required: !!props.required\n        });\n      }\n\n      return rules;\n    });\n\n    var validateEnabled = computed(function () {\n      return _rules.value.length > 0;\n    });\n\n    var getFilteredRule = function getFilteredRule(trigger) {\n      var rules = _rules.value;\n      return rules.filter(function (rule) {\n        if (!rule.trigger || !trigger) return true;\n\n        if (Array.isArray(rule.trigger)) {\n          return rule.trigger.includes(trigger);\n        } else {\n          return rule.trigger === trigger;\n        }\n      }).map(function (_ref4) {\n        var trigger2 = _ref4.trigger,\n            rule = _objectWithoutProperties(_ref4, _excluded);\n\n        return rule;\n      });\n    };\n\n    var isRequired = computed(function () {\n      return _rules.value.some(function (rule) {\n        return rule.required === true;\n      });\n    });\n    var shouldShowError = computed(function () {\n      var _a;\n\n      return validateStateDebounced.value === \"error\" && props.showMessage && ((_a = formContext == null ? void 0 : formContext.showMessage) != null ? _a : true);\n    });\n    var currentLabel = computed(function () {\n      return \"\".concat(props.label || \"\").concat((formContext == null ? void 0 : formContext.labelSuffix) || \"\");\n    });\n\n    var setValidationState = function setValidationState(state) {\n      validateState.value = state;\n    };\n\n    var onValidationFailed = function onValidationFailed(error) {\n      var _a, _b;\n\n      var errors = error.errors,\n          fields = error.fields;\n\n      if (!errors || !fields) {\n        console.error(error);\n      }\n\n      setValidationState(\"error\");\n      validateMessage.value = errors ? (_b = (_a = errors == null ? void 0 : errors[0]) == null ? void 0 : _a.message) != null ? _b : \"\".concat(props.prop, \" is required\") : \"\";\n      formContext == null ? void 0 : formContext.emit(\"validate\", props.prop, false, validateMessage.value);\n    };\n\n    var onValidationSucceeded = function onValidationSucceeded() {\n      setValidationState(\"success\");\n      formContext == null ? void 0 : formContext.emit(\"validate\", props.prop, true, \"\");\n    };\n\n    var doValidate = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(rules) {\n        var modelName, validator;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                modelName = propString.value;\n                validator = new AsyncValidator(_defineProperty({}, modelName, rules));\n                return _context.abrupt(\"return\", validator.validate(_defineProperty({}, modelName, fieldValue.value), {\n                  firstFields: true\n                }).then(function () {\n                  onValidationSucceeded();\n                  return true;\n                })[\"catch\"](function (err) {\n                  onValidationFailed(err);\n                  return Promise.reject(err);\n                }));\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function doValidate(_x) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n\n    var validate = /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(trigger, callback) {\n        var hasCallback, rules;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!isResettingField) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                isResettingField = false;\n                return _context2.abrupt(\"return\", false);\n\n              case 3:\n                hasCallback = isFunction(callback);\n\n                if (validateEnabled.value) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                callback == null ? void 0 : callback(false);\n                return _context2.abrupt(\"return\", false);\n\n              case 7:\n                rules = getFilteredRule(trigger);\n\n                if (!(rules.length === 0)) {\n                  _context2.next = 11;\n                  break;\n                }\n\n                callback == null ? void 0 : callback(true);\n                return _context2.abrupt(\"return\", true);\n\n              case 11:\n                setValidationState(\"validating\");\n                return _context2.abrupt(\"return\", doValidate(rules).then(function () {\n                  callback == null ? void 0 : callback(true);\n                  return true;\n                })[\"catch\"](function (err) {\n                  var fields = err.fields;\n                  callback == null ? void 0 : callback(false, fields);\n                  return hasCallback ? false : Promise.reject(fields);\n                }));\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function validate(_x2, _x3) {\n        return _ref6.apply(this, arguments);\n      };\n    }();\n\n    var clearValidate = function clearValidate() {\n      setValidationState(\"\");\n      validateMessage.value = \"\";\n    };\n\n    var resetField = /*#__PURE__*/function () {\n      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var model, computedValue;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                model = formContext == null ? void 0 : formContext.model;\n\n                if (!(!model || !props.prop)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 3:\n                computedValue = getProp(model, props.prop);\n\n                if (!isEqual(computedValue.value, initialValue)) {\n                  isResettingField = true;\n                  computedValue.value = clone(initialValue);\n                }\n\n                _context3.next = 7;\n                return nextTick();\n\n              case 7:\n                clearValidate();\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function resetField() {\n        return _ref7.apply(this, arguments);\n      };\n    }();\n\n    var addInputId = function addInputId(id) {\n      if (!inputIds.value.includes(id)) {\n        inputIds.value.push(id);\n      }\n    };\n\n    var removeInputId = function removeInputId(id) {\n      inputIds.value = inputIds.value.filter(function (listId) {\n        return listId !== id;\n      });\n    };\n\n    watch(function () {\n      return props.error;\n    }, function (val) {\n      validateMessage.value = val || \"\";\n      setValidationState(val ? \"error\" : \"\");\n    }, {\n      immediate: true\n    });\n    watch(function () {\n      return props.validateStatus;\n    }, function (val) {\n      return setValidationState(val || \"\");\n    });\n    var context = reactive(_objectSpread(_objectSpread({}, toRefs(props)), {}, {\n      $el: formItemRef,\n      size: _size,\n      validateState: validateState,\n      labelId: labelId,\n      inputIds: inputIds,\n      isGroup: isGroup,\n      addInputId: addInputId,\n      removeInputId: removeInputId,\n      resetField: resetField,\n      clearValidate: clearValidate,\n      validate: validate\n    }));\n    provide(formItemContextKey, context);\n    onMounted(function () {\n      if (props.prop) {\n        formContext == null ? void 0 : formContext.addField(context);\n        initialValue = clone(fieldValue.value);\n      }\n    });\n    onBeforeUnmount(function () {\n      formContext == null ? void 0 : formContext.removeField(context);\n    });\n    expose({\n      size: _size,\n      validateMessage: validateMessage,\n      validateState: validateState,\n      validate: validate,\n      clearValidate: clearValidate,\n      resetField: resetField\n    });\n    return function (_ctx, _cache) {\n      var _a;\n\n      return openBlock(), createElementBlock(\"div\", {\n        ref_key: \"formItemRef\",\n        ref: formItemRef,\n        \"class\": normalizeClass(unref(formItemClasses)),\n        role: unref(isGroup) ? \"group\" : void 0,\n        \"aria-labelledby\": unref(isGroup) ? unref(labelId) : void 0\n      }, [createVNode(unref(FormLabelWrap), {\n        \"is-auto-width\": unref(labelStyle).width === \"auto\",\n        \"update-all\": ((_a = unref(formContext)) == null ? void 0 : _a.labelWidth) === \"auto\"\n      }, {\n        \"default\": withCtx(function () {\n          return [unref(hasLabel) ? (openBlock(), createBlock(resolveDynamicComponent(unref(labelFor) ? \"label\" : \"div\"), {\n            key: 0,\n            id: unref(labelId),\n            \"for\": unref(labelFor),\n            \"class\": normalizeClass(unref(ns).e(\"label\")),\n            style: normalizeStyle(unref(labelStyle))\n          }, {\n            \"default\": withCtx(function () {\n              return [renderSlot(_ctx.$slots, \"label\", {\n                label: unref(currentLabel)\n              }, function () {\n                return [createTextVNode(toDisplayString(unref(currentLabel)), 1)];\n              })];\n            }),\n            _: 3\n          }, 8, [\"id\", \"for\", \"class\", \"style\"])) : createCommentVNode(\"v-if\", true)];\n        }),\n        _: 3\n      }, 8, [\"is-auto-width\", \"update-all\"]), createElementVNode(\"div\", {\n        \"class\": normalizeClass(unref(ns).e(\"content\")),\n        style: normalizeStyle(unref(contentStyle))\n      }, [renderSlot(_ctx.$slots, \"default\"), createVNode(Transition, {\n        name: \"\".concat(unref(ns).namespace.value, \"-zoom-in-top\")\n      }, {\n        \"default\": withCtx(function () {\n          return [unref(shouldShowError) ? renderSlot(_ctx.$slots, \"error\", {\n            key: 0,\n            error: validateMessage.value\n          }, function () {\n            return [createElementVNode(\"div\", {\n              \"class\": normalizeClass(unref(validateClasses))\n            }, toDisplayString(validateMessage.value), 3)];\n          }) : createCommentVNode(\"v-if\", true)];\n        }),\n        _: 3\n      }, 8, [\"name\"])], 6)], 10, _hoisted_1);\n    };\n  }\n}));\n\nvar FormItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/form/src/form-item.vue\"]]);\n\nexport { FormItem as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAkFA;IAEA;IACA;;IAEA;MAAAA;IAAA;;IACA;IAEA;IACA;IAEA;IACA;IACA;IACA;IAEA;IACA;IAEA;MACA;QACA;MACA;;MAEA;MACA;QAAAC;MAAA;MACA;IACA,CARA;IAUA;MACA;QACA;MACA;;MACA;QACA;MACA;;MACA;;MACA;QACA;UAAAC;QAAA;MACA;;MACA;IACA,CAZA;IAcA;MAAA,QACAC,MADA,EAEAA,iBAFA,EAGAA,+CAHA,EAIAA,yDAJA,EAKAA,mDALA,EAMAA,qDANA,EAOAA,qFAPA,sBAQAA,gBARA,EAQAC,qDARA;IAAA;;IAWA;MAAA,OACAC,iCACAC,mBADA,GAEA,gCACAF,yBADA,KACA,KAJA;IAAA;;IAMA;MAAA,QACAD,aADA,sBAEAA,wBAFA,EAEAI,oBAFA;IAAA;IAKA;MACA;MACA;IACA,CAHA;IAKA;MACA;IACA,CAFA;IAIA;MACA,qDACAC,iBADA,GAEA,MAFA;IAGA,CAJA;IAMA;MACA;IACA,CAFA;IAIA;IAEA;MACA;;MACA;QACA;MACA;;MACA;IACA,CANA;;IAQA;MACA;MAEA;;MACA;QACA,sBACAC,SADA,EAEAH,UAFA,EAGAI,KAHA;;QAIA;UACAC;QACA;MACA;;MAEA;QACAA;UAAAC;QAAA;MACA;;MAEA;IACA,CAnBA;;IAqBA;MAAA;IAAA;;IAEA;MACA;MAEA,aACAC,MADA,CACA;QACA;;QACA;UACA;QACA,CAFA,MAEA;UACA;QACA;MACA,CARA,EAWAC,GAXA,CAWA;QAAA;QAAA;;QAAA;MAAA,CAXA;IAaA,CAhBA;;IAkBA;MAAA,OACAC;QAAA;MAAA,EADA;IAAA;IAIA,8BACA,aACA;MAKA;;MAIA;IACA,CAXA,CADA;IAaA;MAAA;IAAA;;IAEA;MACAC;IACA,CAFA;;IAGA;MACA;;MAEA;MAAA;;MACA;QAIAC;MACA;;MAEAC;MACAC;MACAf;IACA,CAdA;;IAgBA;MACAc;MACAd;IAAA,CAFA;;IAGA,IACAgB;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBACAC,SADA,GAEAC,gBAFA;gBAIAC,SAJA,GAIA,uCACAF,SADA,EACAV,KADA,EAJA;gBAAA,iCAQAY;kBAAAC;gBAAA;kBACAC;kBACA;gBACA,CAHA,WAGA;kBAEAC;kBAEA;gBACA,CARA,CARA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;IAAA,GADA;;IAmBA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAAA,KAEAC,gBAFA;kBAAA;kBAAA;gBAAA;;gBAGAA;gBAHA,kCAIA,KAJA;;cAAA;gBAMAC,WANA,GAMAC,oBANA;;gBAAA,IAQAC,qBARA;kBAAA;kBAAA;gBAAA;;gBASAC;gBATA,kCAUA,KAVA;;cAAA;gBAYApB,KAZA,GAYAqB,wBAZA;;gBAAA,MAcArB,kBAdA;kBAAA;kBAAA;gBAAA;;gBAgBAoB,wBACA,CADA,GACAA,cADA;gBAhBA,kCAkBA,IAlBA;;cAAA;gBAoBAb,kBACA,cADA;gBApBA,kCAsBAE;kBACAW;kBACA;gBACA,CAHA,WAGA;kBACA;kBAEAA;kBACA;gBACA,CARA,CAtBA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;IAAA;;IAiCA;MACAb;MACAC;IAAA,CAFA;;IAIA;MAAA;QAAA;QAAA;UAAA;YAAA;cAAA;gBAEAc,KAFA,GAEA7B,gDAFA;;gBAAA,MAIA,qBAJA;kBAAA;kBAAA;gBAAA;;gBAAA;;cAAA;gBAMA8B,aANA,GAMAC,0BANA;;gBAQA;kBACAR;kBACAO;gBAEA;;gBAZA;gBAAA,OAaAE,UAbA;;cAAA;gBAcAC;;cAdA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;;MAAA;QAAA;MAAA;IAAA;;IAgBA;MAEA;QACA7B;MACA;IAEA,CANA;;IASA;MACAA;QAAA;MAAA;IAEA,CAHA;;IAOA8B;MAAA;IAAA,GACA;MAGAnB;MACAD;IAAA,CALA,EAMA;MAAAqB;IAAA,CANA;IAMAD,KACA;MAAA;IAAA;MAAA;IAAA,EADA;IAEA,uDACAE,aADA;MAEAC,gBAFA;MAGAC,WAHA;MAIA1B,4BAJA;MAKA2B,gBALA;MAMAnC,kBANA;MAOAoC,gBAPA;MAQAC,sBARA;MASAC,4BATA;MAWAC,sBAXA;MAaAV,4BAbA;MAcAW;IAdA;IAgBAC;IACAC;MACA;QAEA9C;QACA+C;MACA;IAEA,CAPA;IAOAC,eAEA;MAEAhD;IAEA,CAJA,CAFA;IAQAiD;MAEAX,WAFA;MAIAvB,gCAJA;MAKAH,4BALA;wBAAA;kCAAA;;IAAA","names":["formItem","width","marginLeft","ns","formContext","isBoolean","props","_inlineMessage","inputIds","formRules","value","rules","required","filter","map","_rules","validateState","console","setValidationState","validateMessage","doValidate","modelName","propString","validator","firstFields","onValidationSucceeded","onValidationFailed","isResettingField","hasCallback","isFunction","validateEnabled","callback","getFilteredRule","model","computedValue","getProp","nextTick","clearValidate","watch","immediate","toRefs","$el","size","labelId","isGroup","addInputId","removeInputId","resetField","validate","provide","onMounted","initialValue","onBeforeUnmount","expose"],"sources":["../../../../../../packages/components/form/src/form-item.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"formItemRef\"\n    :class=\"formItemClasses\"\n    :role=\"isGroup ? 'group' : undefined\"\n    :aria-labelledby=\"isGroup ? labelId : undefined\"\n  >\n    <form-label-wrap\n      :is-auto-width=\"labelStyle.width === 'auto'\"\n      :update-all=\"formContext?.labelWidth === 'auto'\"\n    >\n      <component\n        :is=\"labelFor ? 'label' : 'div'\"\n        v-if=\"hasLabel\"\n        :id=\"labelId\"\n        :for=\"labelFor\"\n        :class=\"ns.e('label')\"\n        :style=\"labelStyle\"\n      >\n        <slot name=\"label\" :label=\"currentLabel\">\n          {{ currentLabel }}\n        </slot>\n      </component>\n    </form-label-wrap>\n\n    <div :class=\"ns.e('content')\" :style=\"contentStyle\">\n      <slot />\n      <transition :name=\"`${ns.namespace.value}-zoom-in-top`\">\n        <slot v-if=\"shouldShowError\" name=\"error\" :error=\"validateMessage\">\n          <div :class=\"validateClasses\">\n            {{ validateMessage }}\n          </div>\n        </slot>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport {\n  computed,\n  inject,\n  nextTick,\n  onBeforeUnmount,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  toRefs,\n  useSlots,\n  watch,\n} from 'vue'\nimport AsyncValidator from 'async-validator'\nimport { clone, isEqual } from 'lodash-unified'\nimport { refDebounced } from '@vueuse/core'\nimport {\n  addUnit,\n  ensureArray,\n  getProp,\n  isBoolean,\n  isFunction,\n  isString,\n} from '@element-plus/utils'\nimport { formContextKey, formItemContextKey } from '@element-plus/tokens'\nimport { useId, useNamespace, useSize } from '@element-plus/hooks'\nimport { formItemProps } from './form-item'\nimport FormLabelWrap from './form-label-wrap'\n\nimport type { CSSProperties } from 'vue'\nimport type { RuleItem } from 'async-validator'\nimport type {\n  FormItemContext,\n  FormItemRule,\n  FormValidateFailure,\n} from '@element-plus/tokens'\nimport type { Arrayable } from '@element-plus/utils'\nimport type { FormItemValidateState } from './form-item'\n\ndefineOptions({\n  name: 'ElFormItem',\n})\nconst props = defineProps(formItemProps)\nconst slots = useSlots()\n\nconst formContext = inject(formContextKey, undefined)\nconst parentFormItemContext = inject(formItemContextKey, undefined)\n\nconst _size = useSize(undefined, { formItem: false })\nconst ns = useNamespace('form-item')\n\nconst labelId = useId().value\nconst inputIds = ref<string[]>([])\n\nconst validateState = ref<FormItemValidateState>('')\nconst validateStateDebounced = refDebounced(validateState, 100)\nconst validateMessage = ref('')\nconst formItemRef = ref<HTMLDivElement>()\n// special inline value.\nlet initialValue: any = undefined\nlet isResettingField = false\n\nconst labelStyle = computed<CSSProperties>(() => {\n  if (formContext?.labelPosition === 'top') {\n    return {}\n  }\n\n  const labelWidth = addUnit(props.labelWidth || formContext?.labelWidth || '')\n  if (labelWidth) return { width: labelWidth }\n  return {}\n})\n\nconst contentStyle = computed<CSSProperties>(() => {\n  if (formContext?.labelPosition === 'top' || formContext?.inline) {\n    return {}\n  }\n  if (!props.label && !props.labelWidth && isNested) {\n    return {}\n  }\n  const labelWidth = addUnit(props.labelWidth || formContext?.labelWidth || '')\n  if (!props.label && !slots.label) {\n    return { marginLeft: labelWidth }\n  }\n  return {}\n})\n\nconst formItemClasses = computed(() => [\n  ns.b(),\n  ns.m(_size.value),\n  ns.is('error', validateState.value === 'error'),\n  ns.is('validating', validateState.value === 'validating'),\n  ns.is('success', validateState.value === 'success'),\n  ns.is('required', isRequired.value || props.required),\n  ns.is('no-asterisk', formContext?.hideRequiredAsterisk),\n  { [ns.m('feedback')]: formContext?.statusIcon },\n])\n\nconst _inlineMessage = computed(() =>\n  isBoolean(props.inlineMessage)\n    ? props.inlineMessage\n    : formContext?.inlineMessage || false\n)\n\nconst validateClasses = computed(() => [\n  ns.e('error'),\n  { [ns.em('error', 'inline')]: _inlineMessage.value },\n])\n\nconst propString = computed(() => {\n  if (!props.prop) return ''\n  return isString(props.prop) ? props.prop : props.prop.join('.')\n})\n\nconst hasLabel = computed<boolean>(() => {\n  return !!(props.label || slots.label)\n})\n\nconst labelFor = computed<string | undefined>(() => {\n  return props.for || inputIds.value.length === 1\n    ? inputIds.value[0]\n    : undefined\n})\n\nconst isGroup = computed<boolean>(() => {\n  return !labelFor.value && hasLabel.value\n})\n\nconst isNested = !!parentFormItemContext\n\nconst fieldValue = computed(() => {\n  const model = formContext?.model\n  if (!model || !props.prop) {\n    return\n  }\n  return getProp(model, props.prop).value\n})\n\nconst _rules = computed(() => {\n  const rules: FormItemRule[] = props.rules ? ensureArray(props.rules) : []\n\n  const formRules = formContext?.rules\n  if (formRules && props.prop) {\n    const _rules = getProp<Arrayable<FormItemRule> | undefined>(\n      formRules,\n      props.prop\n    ).value\n    if (_rules) {\n      rules.push(...ensureArray(_rules))\n    }\n  }\n\n  if (props.required !== undefined) {\n    rules.push({ required: !!props.required })\n  }\n\n  return rules\n})\n\nconst validateEnabled = computed(() => _rules.value.length > 0)\n\nconst getFilteredRule = (trigger: string) => {\n  const rules = _rules.value\n  return (\n    rules\n      .filter((rule) => {\n        if (!rule.trigger || !trigger) return true\n        if (Array.isArray(rule.trigger)) {\n          return rule.trigger.includes(trigger)\n        } else {\n          return rule.trigger === trigger\n        }\n      })\n      // exclude trigger\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      .map(({ trigger, ...rule }): RuleItem => rule)\n  )\n}\n\nconst isRequired = computed(() =>\n  _rules.value.some((rule) => rule.required === true)\n)\n\nconst shouldShowError = computed(\n  () =>\n    validateStateDebounced.value === 'error' &&\n    props.showMessage &&\n    (formContext?.showMessage ?? true)\n)\n\nconst currentLabel = computed(\n  () => `${props.label || ''}${formContext?.labelSuffix || ''}`\n)\n\nconst setValidationState = (state: FormItemValidateState) => {\n  validateState.value = state\n}\n\nconst onValidationFailed = (error: FormValidateFailure) => {\n  const { errors, fields } = error\n  if (!errors || !fields) {\n    console.error(error)\n  }\n\n  setValidationState('error')\n  validateMessage.value = errors\n    ? errors?.[0]?.message ?? `${props.prop} is required`\n    : ''\n\n  formContext?.emit('validate', props.prop!, false, validateMessage.value)\n}\n\nconst onValidationSucceeded = () => {\n  setValidationState('success')\n  formContext?.emit('validate', props.prop!, true, '')\n}\n\nconst doValidate = async (rules: RuleItem[]): Promise<true> => {\n  const modelName = propString.value\n  const validator = new AsyncValidator({\n    [modelName]: rules,\n  })\n  return validator\n    .validate({ [modelName]: fieldValue.value }, { firstFields: true })\n    .then(() => {\n      onValidationSucceeded()\n      return true as const\n    })\n    .catch((err: FormValidateFailure) => {\n      onValidationFailed(err as FormValidateFailure)\n      return Promise.reject(err)\n    })\n}\n\nconst validate: FormItemContext['validate'] = async (trigger, callback) => {\n  // skip validation if its resetting\n  if (isResettingField) {\n    isResettingField = false\n    return false\n  }\n\n  const hasCallback = isFunction(callback)\n  if (!validateEnabled.value) {\n    callback?.(false)\n    return false\n  }\n\n  const rules = getFilteredRule(trigger)\n  if (rules.length === 0) {\n    callback?.(true)\n    return true\n  }\n\n  setValidationState('validating')\n\n  return doValidate(rules)\n    .then(() => {\n      callback?.(true)\n      return true as const\n    })\n    .catch((err: FormValidateFailure) => {\n      const { fields } = err\n      callback?.(false, fields)\n      return hasCallback ? false : Promise.reject(fields)\n    })\n}\n\nconst clearValidate: FormItemContext['clearValidate'] = () => {\n  setValidationState('')\n  validateMessage.value = ''\n}\n\nconst resetField: FormItemContext['resetField'] = async () => {\n  const model = formContext?.model\n  if (!model || !props.prop) return\n\n  const computedValue = getProp(model, props.prop)\n\n  if (!isEqual(computedValue.value, initialValue)) {\n    // prevent validation from being triggered\n    isResettingField = true\n    computedValue.value = clone(initialValue)\n  }\n\n  await nextTick()\n  clearValidate()\n}\n\nconst addInputId: FormItemContext['addInputId'] = (id: string) => {\n  if (!inputIds.value.includes(id)) {\n    inputIds.value.push(id)\n  }\n}\n\nconst removeInputId: FormItemContext['removeInputId'] = (id: string) => {\n  inputIds.value = inputIds.value.filter((listId) => listId !== id)\n}\n\nwatch(\n  () => props.error,\n  (val) => {\n    validateMessage.value = val || ''\n    setValidationState(val ? 'error' : '')\n  },\n  { immediate: true }\n)\n\nwatch(\n  () => props.validateStatus,\n  (val) => setValidationState(val || '')\n)\n\nconst context: FormItemContext = reactive({\n  ...toRefs(props),\n  $el: formItemRef,\n  size: _size,\n  validateState,\n  labelId,\n  inputIds,\n  isGroup,\n  addInputId,\n  removeInputId,\n  resetField,\n  clearValidate,\n  validate,\n})\n\nprovide(formItemContextKey, context)\n\nonMounted(() => {\n  if (props.prop) {\n    formContext?.addField(context)\n    initialValue = clone(fieldValue.value)\n  }\n})\n\nonBeforeUnmount(() => {\n  formContext?.removeField(context)\n})\n\ndefineExpose({\n  /** @description form item size */\n  size: _size,\n  /** @description validation message */\n  validateMessage,\n  /** @description validation state */\n  validateState,\n  /** @description validate form item */\n  validate,\n  /** @description clear validation status */\n  clearValidate,\n  /** @description reset field value */\n  resetField,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}