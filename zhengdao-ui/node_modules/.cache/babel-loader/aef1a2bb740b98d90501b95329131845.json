{"ast":null,"code":"import _slicedToArray from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport { defineComponent, ref, computed, unref, nextTick, onMounted, watch, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, withCtx, createTextVNode, toDisplayString, createCommentVNode, withDirectives, createVNode, createElementVNode } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport '../../../../directives/index.mjs';\nimport { ElScrollbar } from '../../../scrollbar/index.mjs';\nimport { ElIcon } from '../../../icon/index.mjs';\nimport { ArrowUp, ArrowDown } from '@element-plus/icons-vue';\nimport '../../../../hooks/index.mjs';\nimport { timeUnits } from '../constants.mjs';\nimport { buildTimeList } from '../utils.mjs';\nimport { basicTimeSpinnerProps } from '../props/basic-time-spinner.mjs';\nimport { getTimeLists } from '../composables/use-time-picker.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport RepeatClick from '../../../../directives/repeat-click/index.mjs';\nvar _hoisted_1 = [\"onClick\"];\nvar _hoisted_2 = [\"onMouseenter\"];\n\nvar _sfc_main = /* @__PURE__ */defineComponent({\n  __name: \"basic-time-spinner\",\n  props: basicTimeSpinnerProps,\n  emits: [\"change\", \"select-range\", \"set-option\"],\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var ns = useNamespace(\"time\");\n\n    var _getTimeLists = getTimeLists(props.disabledHours, props.disabledMinutes, props.disabledSeconds),\n        getHoursList = _getTimeLists.getHoursList,\n        getMinutesList = _getTimeLists.getMinutesList,\n        getSecondsList = _getTimeLists.getSecondsList;\n\n    var isScrolling = false;\n    var currentScrollbar = ref();\n    var listHoursRef = ref();\n    var listMinutesRef = ref();\n    var listSecondsRef = ref();\n    var listRefsMap = {\n      hours: listHoursRef,\n      minutes: listMinutesRef,\n      seconds: listSecondsRef\n    };\n    var spinnerItems = computed(function () {\n      return props.showSeconds ? timeUnits : timeUnits.slice(0, 2);\n    });\n    var timePartials = computed(function () {\n      var spinnerDate = props.spinnerDate;\n      var hours = spinnerDate.hour();\n      var minutes = spinnerDate.minute();\n      var seconds = spinnerDate.second();\n      return {\n        hours: hours,\n        minutes: minutes,\n        seconds: seconds\n      };\n    });\n    var timeList = computed(function () {\n      var _unref = unref(timePartials),\n          hours = _unref.hours,\n          minutes = _unref.minutes;\n\n      return {\n        hours: getHoursList(props.role),\n        minutes: getMinutesList(hours, props.role),\n        seconds: getSecondsList(hours, minutes, props.role)\n      };\n    });\n    var arrowControlTimeList = computed(function () {\n      var _unref2 = unref(timePartials),\n          hours = _unref2.hours,\n          minutes = _unref2.minutes,\n          seconds = _unref2.seconds;\n\n      return {\n        hours: buildTimeList(hours, 23),\n        minutes: buildTimeList(minutes, 59),\n        seconds: buildTimeList(seconds, 59)\n      };\n    });\n    var debouncedResetScroll = debounce(function (type) {\n      isScrolling = false;\n      adjustCurrentSpinner(type);\n    }, 200);\n\n    var getAmPmFlag = function getAmPmFlag(hour) {\n      var shouldShowAmPm = !!props.amPmMode;\n      if (!shouldShowAmPm) return \"\";\n      var isCapital = props.amPmMode === \"A\";\n      var content = hour < 12 ? \" am\" : \" pm\";\n      if (isCapital) content = content.toUpperCase();\n      return content;\n    };\n\n    var emitSelectRange = function emitSelectRange(type) {\n      var range;\n\n      switch (type) {\n        case \"hours\":\n          range = [0, 2];\n          break;\n\n        case \"minutes\":\n          range = [3, 5];\n          break;\n\n        case \"seconds\":\n          range = [6, 8];\n          break;\n      }\n\n      var _range = range,\n          _range2 = _slicedToArray(_range, 2),\n          left = _range2[0],\n          right = _range2[1];\n\n      emit(\"select-range\", left, right);\n      currentScrollbar.value = type;\n    };\n\n    var adjustCurrentSpinner = function adjustCurrentSpinner(type) {\n      adjustSpinner(type, unref(timePartials)[type]);\n    };\n\n    var adjustSpinners = function adjustSpinners() {\n      adjustCurrentSpinner(\"hours\");\n      adjustCurrentSpinner(\"minutes\");\n      adjustCurrentSpinner(\"seconds\");\n    };\n\n    var getScrollbarElement = function getScrollbarElement(el) {\n      return el.querySelector(\".\".concat(ns.namespace.value, \"-scrollbar__wrap\"));\n    };\n\n    var adjustSpinner = function adjustSpinner(type, value) {\n      if (props.arrowControl) return;\n      var scrollbar = unref(listRefsMap[type]);\n\n      if (scrollbar && scrollbar.$el) {\n        getScrollbarElement(scrollbar.$el).scrollTop = Math.max(0, value * typeItemHeight(type));\n      }\n    };\n\n    var typeItemHeight = function typeItemHeight(type) {\n      var scrollbar = unref(listRefsMap[type]);\n      return (scrollbar == null ? void 0 : scrollbar.$el.querySelector(\"li\").offsetHeight) || 0;\n    };\n\n    var onIncrement = function onIncrement() {\n      scrollDown(1);\n    };\n\n    var onDecrement = function onDecrement() {\n      scrollDown(-1);\n    };\n\n    var scrollDown = function scrollDown(step) {\n      if (!currentScrollbar.value) {\n        emitSelectRange(\"hours\");\n      }\n\n      var label = currentScrollbar.value;\n      var now = unref(timePartials)[label];\n      var total = currentScrollbar.value === \"hours\" ? 24 : 60;\n      now = (now + step + total) % total;\n      modifyDateField(label, now);\n      adjustSpinner(label, now);\n      nextTick(function () {\n        return emitSelectRange(label);\n      });\n    };\n\n    var modifyDateField = function modifyDateField(type, value) {\n      var list = unref(timeList)[type];\n      var isDisabled = list[value];\n      if (isDisabled) return;\n\n      var _unref3 = unref(timePartials),\n          hours = _unref3.hours,\n          minutes = _unref3.minutes,\n          seconds = _unref3.seconds;\n\n      var changeTo;\n\n      switch (type) {\n        case \"hours\":\n          changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds);\n          break;\n\n        case \"minutes\":\n          changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds);\n          break;\n\n        case \"seconds\":\n          changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value);\n          break;\n      }\n\n      emit(\"change\", changeTo);\n    };\n\n    var handleClick = function handleClick(type, _ref2) {\n      var value = _ref2.value,\n          disabled = _ref2.disabled;\n\n      if (!disabled) {\n        modifyDateField(type, value);\n        emitSelectRange(type);\n        adjustSpinner(type, value);\n      }\n    };\n\n    var handleScroll = function handleScroll(type) {\n      isScrolling = true;\n      debouncedResetScroll(type);\n      var value = Math.min(Math.round((getScrollbarElement(unref(listRefsMap[type]).$el).scrollTop - (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) + 3) / typeItemHeight(type)), type === \"hours\" ? 23 : 59);\n      modifyDateField(type, value);\n    };\n\n    var scrollBarHeight = function scrollBarHeight(type) {\n      return unref(listRefsMap[type]).$el.offsetHeight;\n    };\n\n    var bindScrollEvent = function bindScrollEvent() {\n      var bindFunction = function bindFunction(type) {\n        var scrollbar = unref(listRefsMap[type]);\n\n        if (scrollbar && scrollbar.$el) {\n          getScrollbarElement(scrollbar.$el).onscroll = function () {\n            handleScroll(type);\n          };\n        }\n      };\n\n      bindFunction(\"hours\");\n      bindFunction(\"minutes\");\n      bindFunction(\"seconds\");\n    };\n\n    onMounted(function () {\n      nextTick(function () {\n        !props.arrowControl && bindScrollEvent();\n        adjustSpinners();\n        if (props.role === \"start\") emitSelectRange(\"hours\");\n      });\n    });\n\n    var setRef = function setRef(scrollbar, type) {\n      listRefsMap[type].value = scrollbar;\n    };\n\n    emit(\"set-option\", [\"\".concat(props.role, \"_scrollDown\"), scrollDown]);\n    emit(\"set-option\", [\"\".concat(props.role, \"_emitSelectRange\"), emitSelectRange]);\n    watch(function () {\n      return props.spinnerDate;\n    }, function () {\n      if (isScrolling) return;\n      adjustSpinners();\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"div\", {\n        \"class\": normalizeClass([unref(ns).b(\"spinner\"), {\n          \"has-seconds\": _ctx.showSeconds\n        }])\n      }, [!_ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n        key: 0\n      }, renderList(unref(spinnerItems), function (item) {\n        return openBlock(), createBlock(unref(ElScrollbar), {\n          key: item,\n          ref_for: true,\n          ref: function ref(scollbar) {\n            return setRef(scollbar, item);\n          },\n          \"class\": normalizeClass(unref(ns).be(\"spinner\", \"wrapper\")),\n          \"wrap-style\": \"max-height: inherit;\",\n          \"view-class\": unref(ns).be(\"spinner\", \"list\"),\n          noresize: \"\",\n          tag: \"ul\",\n          onMouseenter: function onMouseenter($event) {\n            return emitSelectRange(item);\n          },\n          onMousemove: function onMousemove($event) {\n            return adjustCurrentSpinner(item);\n          }\n        }, {\n          \"default\": withCtx(function () {\n            return [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(timeList)[item], function (disabled, key) {\n              return openBlock(), createElementBlock(\"li\", {\n                key: key,\n                \"class\": normalizeClass([unref(ns).be(\"spinner\", \"item\"), unref(ns).is(\"active\", key === unref(timePartials)[item]), unref(ns).is(\"disabled\", disabled)]),\n                onClick: function onClick($event) {\n                  return handleClick(item, {\n                    value: key,\n                    disabled: disabled\n                  });\n                }\n              }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n                key: 0\n              }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? key % 12 || 12 : key)).slice(-2)) + toDisplayString(getAmPmFlag(key)), 1)], 64)) : (openBlock(), createElementBlock(Fragment, {\n                key: 1\n              }, [createTextVNode(toDisplayString((\"0\" + key).slice(-2)), 1)], 64))], 10, _hoisted_1);\n            }), 128))];\n          }),\n          _: 2\n        }, 1032, [\"class\", \"view-class\", \"onMouseenter\", \"onMousemove\"]);\n      }), 128)) : createCommentVNode(\"v-if\", true), _ctx.arrowControl ? (openBlock(true), createElementBlock(Fragment, {\n        key: 1\n      }, renderList(unref(spinnerItems), function (item) {\n        return openBlock(), createElementBlock(\"div\", {\n          key: item,\n          \"class\": normalizeClass([unref(ns).be(\"spinner\", \"wrapper\"), unref(ns).is(\"arrow\")]),\n          onMouseenter: function onMouseenter($event) {\n            return emitSelectRange(item);\n          }\n        }, [withDirectives((openBlock(), createBlock(unref(ElIcon), {\n          \"class\": normalizeClass([\"arrow-up\", unref(ns).be(\"spinner\", \"arrow\")])\n        }, {\n          \"default\": withCtx(function () {\n            return [createVNode(unref(ArrowUp))];\n          }),\n          _: 1\n        }, 8, [\"class\"])), [[unref(RepeatClick), onDecrement]]), withDirectives((openBlock(), createBlock(unref(ElIcon), {\n          \"class\": normalizeClass([\"arrow-down\", unref(ns).be(\"spinner\", \"arrow\")])\n        }, {\n          \"default\": withCtx(function () {\n            return [createVNode(unref(ArrowDown))];\n          }),\n          _: 1\n        }, 8, [\"class\"])), [[unref(RepeatClick), onIncrement]]), createElementVNode(\"ul\", {\n          \"class\": normalizeClass(unref(ns).be(\"spinner\", \"list\"))\n        }, [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(arrowControlTimeList)[item], function (time, key) {\n          return openBlock(), createElementBlock(\"li\", {\n            key: key,\n            \"class\": normalizeClass([unref(ns).be(\"spinner\", \"item\"), unref(ns).is(\"active\", time === unref(timePartials)[item]), unref(ns).is(\"disabled\", unref(timeList)[item][time])])\n          }, [typeof time === \"number\" ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [item === \"hours\" ? (openBlock(), createElementBlock(Fragment, {\n            key: 0\n          }, [createTextVNode(toDisplayString((\"0\" + (_ctx.amPmMode ? time % 12 || 12 : time)).slice(-2)) + toDisplayString(getAmPmFlag(time)), 1)], 64)) : (openBlock(), createElementBlock(Fragment, {\n            key: 1\n          }, [createTextVNode(toDisplayString((\"0\" + time).slice(-2)), 1)], 64))], 64)) : createCommentVNode(\"v-if\", true)], 2);\n        }), 128))], 2)], 42, _hoisted_2);\n      }), 128)) : createCommentVNode(\"v-if\", true)], 2);\n    };\n  }\n});\n\nvar TimeSpinner = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue\"]]);\n\nexport { TimeSpinner as default };","map":{"version":3,"mappings":"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","names":["useNamespace","getTimeLists","props","disabledHours","disabledMinutes","disabledSeconds","getHoursList","getMinutesList","getSecondsList","isScrolling","currentScrollbar","ref","listHoursRef","listMinutesRef","listSecondsRef","listRefsMap","hours","minutes","seconds","computed","showSeconds","timeUnits","spinnerDate","hour","minute","second","unref","timePartials","role","buildTimeList","debounce","type","adjustCurrentSpinner","getAmPmFlag","shouldShowAmPm","amPmMode","content","toUpperCase","emitSelectRange","range","left","right","emit","value","adjustSpinner","adjustSpinners","getScrollbarElement","el","querySelector","ns","namespace","scrollbar","$el","scrollTop","Math","max","typeItemHeight","offsetHeight","onIncrement","scrollDown","onDecrement","step","label","total","now","modifyDateField","nextTick","isDisabled","list","changeTo","handleClick","disabled","handleScroll","debouncedResetScroll","min","round","scrollBarHeight","bindScrollEvent","bindFunction","onscroll","onMounted","arrowControl","setRef","watch"],"sources":["../../../../../../../packages/components/time-picker/src/time-picker-com/basic-time-spinner.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b('spinner'), { 'has-seconds': showSeconds }]\">\n    <template v-if=\"!arrowControl\">\n      <el-scrollbar\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :ref=\"(scollbar: unknown) => setRef(scollbar as any, item)\"\n        :class=\"ns.be('spinner', 'wrapper')\"\n        wrap-style=\"max-height: inherit;\"\n        :view-class=\"ns.be('spinner', 'list')\"\n        noresize\n        tag=\"ul\"\n        @mouseenter=\"emitSelectRange(item)\"\n        @mousemove=\"adjustCurrentSpinner(item)\"\n      >\n        <li\n          v-for=\"(disabled, key) in timeList[item]\"\n          :key=\"key\"\n          :class=\"[\n            ns.be('spinner', 'item'),\n            ns.is('active', key === timePartials[item]),\n            ns.is('disabled', disabled),\n          ]\"\n          @click=\"handleClick(item, { value: key, disabled })\"\n        >\n          <template v-if=\"item === 'hours'\">\n            {{ ('0' + (amPmMode ? key % 12 || 12 : key)).slice(-2)\n            }}{{ getAmPmFlag(key) }}\n          </template>\n          <template v-else>\n            {{ ('0' + key).slice(-2) }}\n          </template>\n        </li>\n      </el-scrollbar>\n    </template>\n    <template v-if=\"arrowControl\">\n      <div\n        v-for=\"item in spinnerItems\"\n        :key=\"item\"\n        :class=\"[ns.be('spinner', 'wrapper'), ns.is('arrow')]\"\n        @mouseenter=\"emitSelectRange(item)\"\n      >\n        <el-icon\n          v-repeat-click=\"onDecrement\"\n          :class=\"['arrow-up', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-up />\n        </el-icon>\n        <el-icon\n          v-repeat-click=\"onIncrement\"\n          :class=\"['arrow-down', ns.be('spinner', 'arrow')]\"\n        >\n          <arrow-down />\n        </el-icon>\n        <ul :class=\"ns.be('spinner', 'list')\">\n          <li\n            v-for=\"(time, key) in arrowControlTimeList[item]\"\n            :key=\"key\"\n            :class=\"[\n              ns.be('spinner', 'item'),\n              ns.is('active', time === timePartials[item]),\n              ns.is('disabled', timeList[item][time!]),\n            ]\"\n          >\n            <template v-if=\"typeof time === 'number'\">\n              <template v-if=\"item === 'hours'\">\n                {{ ('0' + (amPmMode ? time % 12 || 12 : time)).slice(-2)\n                }}{{ getAmPmFlag(time) }}\n              </template>\n              <template v-else>\n                {{ ('0' + time).slice(-2) }}\n              </template>\n            </template>\n          </li>\n        </ul>\n      </div>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\" setup>\nimport { computed, nextTick, onMounted, ref, unref, watch } from 'vue'\nimport { debounce } from 'lodash-unified'\nimport { RepeatClick as vRepeatClick } from '@element-plus/directives'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport { ArrowDown, ArrowUp } from '@element-plus/icons-vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { timeUnits } from '../constants'\nimport { buildTimeList } from '../utils'\nimport { basicTimeSpinnerProps } from '../props/basic-time-spinner'\nimport { getTimeLists } from '../composables/use-time-picker'\n\nimport type { Ref } from 'vue'\nimport type { ScrollbarInstance } from '@element-plus/components/scrollbar'\nimport type { TimeUnit } from '../constants'\nimport type { TimeList } from '../utils'\n\nconst props = defineProps(basicTimeSpinnerProps)\nconst emit = defineEmits(['change', 'select-range', 'set-option'])\n\nconst ns = useNamespace('time')\n\nconst { getHoursList, getMinutesList, getSecondsList } = getTimeLists(\n  props.disabledHours,\n  props.disabledMinutes,\n  props.disabledSeconds\n)\n\n// data\nlet isScrolling = false\n\nconst currentScrollbar = ref<TimeUnit>()\nconst listHoursRef = ref<ScrollbarInstance>()\nconst listMinutesRef = ref<ScrollbarInstance>()\nconst listSecondsRef = ref<ScrollbarInstance>()\nconst listRefsMap: Record<TimeUnit, Ref<ScrollbarInstance | undefined>> = {\n  hours: listHoursRef,\n  minutes: listMinutesRef,\n  seconds: listSecondsRef,\n}\n\n// computed\nconst spinnerItems = computed(() => {\n  return props.showSeconds ? timeUnits : timeUnits.slice(0, 2)\n})\n\nconst timePartials = computed<Record<TimeUnit, number>>(() => {\n  const { spinnerDate } = props\n  const hours = spinnerDate.hour()\n  const minutes = spinnerDate.minute()\n  const seconds = spinnerDate.second()\n  return { hours, minutes, seconds }\n})\n\nconst timeList = computed(() => {\n  const { hours, minutes } = unref(timePartials)\n  return {\n    hours: getHoursList(props.role),\n    minutes: getMinutesList(hours, props.role),\n    seconds: getSecondsList(hours, minutes, props.role),\n  }\n})\n\nconst arrowControlTimeList = computed<Record<TimeUnit, TimeList>>(() => {\n  const { hours, minutes, seconds } = unref(timePartials)\n\n  return {\n    hours: buildTimeList(hours, 23),\n    minutes: buildTimeList(minutes, 59),\n    seconds: buildTimeList(seconds, 59),\n  }\n})\n\nconst debouncedResetScroll = debounce((type) => {\n  isScrolling = false\n  adjustCurrentSpinner(type)\n}, 200)\n\nconst getAmPmFlag = (hour: number) => {\n  const shouldShowAmPm = !!props.amPmMode\n  if (!shouldShowAmPm) return ''\n  const isCapital = props.amPmMode === 'A'\n  // todo locale\n  let content = hour < 12 ? ' am' : ' pm'\n  if (isCapital) content = content.toUpperCase()\n  return content\n}\n\nconst emitSelectRange = (type: TimeUnit) => {\n  let range\n\n  switch (type) {\n    case 'hours':\n      range = [0, 2]\n      break\n    case 'minutes':\n      range = [3, 5]\n      break\n    case 'seconds':\n      range = [6, 8]\n      break\n  }\n  const [left, right] = range\n\n  emit('select-range', left, right)\n  currentScrollbar.value = type\n}\n\nconst adjustCurrentSpinner = (type: TimeUnit) => {\n  adjustSpinner(type, unref(timePartials)[type])\n}\n\nconst adjustSpinners = () => {\n  adjustCurrentSpinner('hours')\n  adjustCurrentSpinner('minutes')\n  adjustCurrentSpinner('seconds')\n}\n\nconst getScrollbarElement = (el: HTMLElement) =>\n  el.querySelector(`.${ns.namespace.value}-scrollbar__wrap`) as HTMLElement\n\nconst adjustSpinner = (type: TimeUnit, value: number) => {\n  if (props.arrowControl) return\n  const scrollbar = unref(listRefsMap[type])\n  if (scrollbar && scrollbar.$el) {\n    getScrollbarElement(scrollbar.$el).scrollTop = Math.max(\n      0,\n      value * typeItemHeight(type)\n    )\n  }\n}\n\nconst typeItemHeight = (type: TimeUnit): number => {\n  const scrollbar = unref(listRefsMap[type])\n  return scrollbar?.$el.querySelector('li').offsetHeight || 0\n}\n\nconst onIncrement = () => {\n  scrollDown(1)\n}\n\nconst onDecrement = () => {\n  scrollDown(-1)\n}\n\nconst scrollDown = (step: number) => {\n  if (!currentScrollbar.value) {\n    emitSelectRange('hours')\n  }\n\n  const label = currentScrollbar.value!\n  let now = unref(timePartials)[label]\n  const total = currentScrollbar.value === 'hours' ? 24 : 60\n  now = (now + step + total) % total\n\n  modifyDateField(label, now)\n  adjustSpinner(label, now)\n  nextTick(() => emitSelectRange(label))\n}\n\nconst modifyDateField = (type: TimeUnit, value: number) => {\n  const list = unref(timeList)[type]\n  const isDisabled = list[value]\n  if (isDisabled) return\n\n  const { hours, minutes, seconds } = unref(timePartials)\n\n  let changeTo\n  switch (type) {\n    case 'hours':\n      changeTo = props.spinnerDate.hour(value).minute(minutes).second(seconds)\n      break\n    case 'minutes':\n      changeTo = props.spinnerDate.hour(hours).minute(value).second(seconds)\n      break\n    case 'seconds':\n      changeTo = props.spinnerDate.hour(hours).minute(minutes).second(value)\n      break\n  }\n  emit('change', changeTo)\n}\n\nconst handleClick = (\n  type: TimeUnit,\n  { value, disabled }: { value: number; disabled: boolean }\n) => {\n  if (!disabled) {\n    modifyDateField(type, value)\n    emitSelectRange(type)\n    adjustSpinner(type, value)\n  }\n}\n\nconst handleScroll = (type: TimeUnit) => {\n  isScrolling = true\n  debouncedResetScroll(type)\n  const value = Math.min(\n    Math.round(\n      (getScrollbarElement(unref(listRefsMap[type])!.$el).scrollTop -\n        (scrollBarHeight(type) * 0.5 - 10) / typeItemHeight(type) +\n        3) /\n        typeItemHeight(type)\n    ),\n    type === 'hours' ? 23 : 59\n  )\n  modifyDateField(type, value)\n}\n\nconst scrollBarHeight = (type: TimeUnit) => {\n  return unref(listRefsMap[type])!.$el.offsetHeight\n}\n\nconst bindScrollEvent = () => {\n  const bindFunction = (type: TimeUnit) => {\n    const scrollbar = unref(listRefsMap[type])\n    if (scrollbar && scrollbar.$el) {\n      getScrollbarElement(scrollbar.$el).onscroll = () => {\n        // TODO: scroll is emitted when set scrollTop programmatically\n        // should find better solutions in the future!\n        handleScroll(type)\n      }\n    }\n  }\n  bindFunction('hours')\n  bindFunction('minutes')\n  bindFunction('seconds')\n}\n\nonMounted(() => {\n  nextTick(() => {\n    !props.arrowControl && bindScrollEvent()\n    adjustSpinners()\n    // set selection on the first hour part\n    if (props.role === 'start') emitSelectRange('hours')\n  })\n})\n\nconst setRef = (scrollbar: ScrollbarInstance, type: TimeUnit) => {\n  listRefsMap[type].value = scrollbar\n}\n\nemit('set-option', [`${props.role}_scrollDown`, scrollDown])\nemit('set-option', [`${props.role}_emitSelectRange`, emitSelectRange])\n\nwatch(\n  () => props.spinnerDate,\n  () => {\n    if (isScrolling) return\n    adjustSpinners()\n  }\n)\n</script>\n"]},"metadata":{},"sourceType":"module"}