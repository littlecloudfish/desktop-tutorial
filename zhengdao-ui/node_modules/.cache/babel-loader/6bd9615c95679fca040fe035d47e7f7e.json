{"ast":null,"code":"import _objectSpread from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, ref, computed, openBlock, createBlock, unref, withCtx, normalizeClass, resolveDynamicComponent, createCommentVNode, createElementBlock, Fragment, renderList } from 'vue';\nimport dayjs from 'dayjs';\nimport customParseFormat from 'dayjs/plugin/customParseFormat.js';\nimport { ElSelect } from '../../select/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { timeSelectProps } from './time-select.mjs';\nimport { parseTime, formatTime, compareTime, nextTime } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar __default__ = {\n  name: \"ElTimeSelect\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: timeSelectProps,\n  emits: [\"change\", \"blur\", \"focus\", \"update:modelValue\"],\n  setup: function setup(__props, _ref) {\n    var expose = _ref.expose;\n    var props = __props;\n    dayjs.extend(customParseFormat);\n    var ElOption = ElSelect.Option;\n    var nsInput = useNamespace(\"input\");\n    var select = ref();\n    var value = computed(function () {\n      return props.modelValue;\n    });\n    var start = computed(function () {\n      var time = parseTime(props.start);\n      return time ? formatTime(time) : null;\n    });\n    var end = computed(function () {\n      var time = parseTime(props.end);\n      return time ? formatTime(time) : null;\n    });\n    var step = computed(function () {\n      var time = parseTime(props.step);\n      return time ? formatTime(time) : null;\n    });\n    var minTime = computed(function () {\n      var time = parseTime(props.minTime || \"\");\n      return time ? formatTime(time) : null;\n    });\n    var maxTime = computed(function () {\n      var time = parseTime(props.maxTime || \"\");\n      return time ? formatTime(time) : null;\n    });\n    var items = computed(function () {\n      var result = [];\n\n      if (props.start && props.end && props.step) {\n        var current = start.value;\n        var currentTime;\n\n        while (current && end.value && compareTime(current, end.value) <= 0) {\n          currentTime = dayjs(current, \"HH:mm\").format(props.format);\n          result.push({\n            value: currentTime,\n            disabled: compareTime(current, minTime.value || \"-1:-1\") <= 0 || compareTime(current, maxTime.value || \"100:100\") >= 0\n          });\n          current = nextTime(current, step.value);\n        }\n      }\n\n      return result;\n    });\n\n    var blur = function blur() {\n      var _a, _b;\n\n      (_b = (_a = select.value) == null ? void 0 : _a.blur) == null ? void 0 : _b.call(_a);\n    };\n\n    var focus = function focus() {\n      var _a, _b;\n\n      (_b = (_a = select.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a);\n    };\n\n    expose({\n      blur: blur,\n      focus: focus\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(unref(ElSelect), {\n        ref_key: \"select\",\n        ref: select,\n        \"model-value\": unref(value),\n        disabled: _ctx.disabled,\n        clearable: _ctx.clearable,\n        \"clear-icon\": _ctx.clearIcon,\n        size: _ctx.size,\n        effect: _ctx.effect,\n        placeholder: _ctx.placeholder,\n        \"default-first-option\": \"\",\n        filterable: _ctx.editable,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function (event) {\n          return _ctx.$emit(\"update:modelValue\", event);\n        }),\n        onChange: _cache[1] || (_cache[1] = function (event) {\n          return _ctx.$emit(\"change\", event);\n        }),\n        onBlur: _cache[2] || (_cache[2] = function (event) {\n          return _ctx.$emit(\"blur\", event);\n        }),\n        onFocus: _cache[3] || (_cache[3] = function (event) {\n          return _ctx.$emit(\"focus\", event);\n        })\n      }, {\n        prefix: withCtx(function () {\n          return [_ctx.prefixIcon ? (openBlock(), createBlock(unref(ElIcon), {\n            key: 0,\n            \"class\": normalizeClass(unref(nsInput).e(\"prefix-icon\"))\n          }, {\n            \"default\": withCtx(function () {\n              return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))];\n            }),\n            _: 1\n          }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)];\n        }),\n        \"default\": withCtx(function () {\n          return [(openBlock(true), createElementBlock(Fragment, null, renderList(unref(items), function (item) {\n            return openBlock(), createBlock(unref(ElOption), {\n              key: item.value,\n              label: item.value,\n              value: item.value,\n              disabled: item.disabled\n            }, null, 8, [\"label\", \"value\", \"disabled\"]);\n          }), 128))];\n        }),\n        _: 1\n      }, 8, [\"model-value\", \"disabled\", \"clearable\", \"clear-icon\", \"size\", \"effect\", \"placeholder\", \"filterable\"]);\n    };\n  }\n}));\n\nvar TimeSelect = /* @__PURE__ */_export_sfc(_sfc_main, [[\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/time-select/src/time-select.vue\"]]);\n\nexport { TimeSelect as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;IA0CAA;IAEA;IAUA;IACA;IAEA;MAAA;IAAA;IACA;MACA;MACA;IACA,CAHA;IAKA;MACA;MACA;IACA,CAHA;IAKA;MACA;MACA;IACA,CAHA;IAKA;MACA;MACA;IACA,CAHA;IAKA;MACA;MACA;IACA,CAHA;IAKA;MACA;;MACA;QACA;QACA;;QACA;UACAC;UACAC;YACAC,kBADA;YAEAC,QACA,yDACAC;UAJA;UAMAC;QACA;MACA;;MACA;IACA,CAjBA;;IAmBA;MACA;;MACA;IAEA,CAJA;;IAKA;MACA;;MAEA;IACA,CAJA;;IAKAC;MACAC,UADA;;IAAA","names":["dayjs","currentTime","result","value","disabled","compareTime","current","expose","blur"],"sources":["../../../../../../packages/components/time-select/src/time-select.vue"],"sourcesContent":["<template>\n  <el-select\n    ref=\"select\"\n    :model-value=\"value\"\n    :disabled=\"disabled\"\n    :clearable=\"clearable\"\n    :clear-icon=\"clearIcon\"\n    :size=\"size\"\n    :effect=\"effect\"\n    :placeholder=\"placeholder\"\n    default-first-option\n    :filterable=\"editable\"\n    @update:model-value=\"(event) => $emit('update:modelValue', event)\"\n    @change=\"(event) => $emit('change', event)\"\n    @blur=\"(event) => $emit('blur', event)\"\n    @focus=\"(event) => $emit('focus', event)\"\n  >\n    <el-option\n      v-for=\"item in items\"\n      :key=\"item.value\"\n      :label=\"item.value\"\n      :value=\"item.value\"\n      :disabled=\"item.disabled\"\n    />\n    <template #prefix>\n      <el-icon v-if=\"prefixIcon\" :class=\"nsInput.e('prefix-icon')\">\n        <component :is=\"prefixIcon\" />\n      </el-icon>\n    </template>\n  </el-select>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref } from 'vue'\nimport dayjs from 'dayjs'\nimport customParseFormat from 'dayjs/plugin/customParseFormat.js'\nimport ElSelect from '@element-plus/components/select'\nimport ElIcon from '@element-plus/components/icon'\nimport { useNamespace } from '@element-plus/hooks'\nimport { timeSelectProps } from './time-select'\nimport { compareTime, formatTime, nextTime, parseTime } from './utils'\n\ndayjs.extend(customParseFormat)\n\nconst { Option: ElOption } = ElSelect\n\ndefineOptions({\n  name: 'ElTimeSelect',\n})\n\ndefineEmits(['change', 'blur', 'focus', 'update:modelValue'])\n\nconst props = defineProps(timeSelectProps)\n\nconst nsInput = useNamespace('input')\nconst select = ref<typeof ElSelect>()\n\nconst value = computed(() => props.modelValue)\nconst start = computed(() => {\n  const time = parseTime(props.start)\n  return time ? formatTime(time) : null\n})\n\nconst end = computed(() => {\n  const time = parseTime(props.end)\n  return time ? formatTime(time) : null\n})\n\nconst step = computed(() => {\n  const time = parseTime(props.step)\n  return time ? formatTime(time) : null\n})\n\nconst minTime = computed(() => {\n  const time = parseTime(props.minTime || '')\n  return time ? formatTime(time) : null\n})\n\nconst maxTime = computed(() => {\n  const time = parseTime(props.maxTime || '')\n  return time ? formatTime(time) : null\n})\n\nconst items = computed(() => {\n  const result: { value: string; disabled: boolean }[] = []\n  if (props.start && props.end && props.step) {\n    let current = start.value\n    let currentTime: string\n    while (current && end.value && compareTime(current, end.value) <= 0) {\n      currentTime = dayjs(current, 'HH:mm').format(props.format)\n      result.push({\n        value: currentTime,\n        disabled:\n          compareTime(current, minTime.value || '-1:-1') <= 0 ||\n          compareTime(current, maxTime.value || '100:100') >= 0,\n      })\n      current = nextTime(current, step.value!)\n    }\n  }\n  return result\n})\n\nconst blur = () => {\n  select.value?.blur?.()\n}\n\nconst focus = () => {\n  select.value?.focus?.()\n}\n\ndefineExpose({\n  blur,\n  focus,\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}