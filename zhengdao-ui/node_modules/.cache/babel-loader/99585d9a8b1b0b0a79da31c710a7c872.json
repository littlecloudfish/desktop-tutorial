{"ast":null,"code":"import _toConsumableArray from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport { ref, unref, provide, inject, onMounted, onBeforeUnmount } from 'vue';\nimport Collection from './collection2.mjs';\nimport CollectionItem from './collection-item.mjs';\nvar COLLECTION_ITEM_SIGN = \"data-el-collection-item\";\n\nvar createCollectionWithScope = function createCollectionWithScope(name) {\n  var COLLECTION_NAME = \"El\".concat(name, \"Collection\");\n  var COLLECTION_ITEM_NAME = \"\".concat(COLLECTION_NAME, \"Item\");\n  var COLLECTION_INJECTION_KEY = Symbol(COLLECTION_NAME);\n  var COLLECTION_ITEM_INJECTION_KEY = Symbol(COLLECTION_ITEM_NAME);\n\n  var ElCollection = _objectSpread(_objectSpread({}, Collection), {}, {\n    name: COLLECTION_NAME,\n    setup: function setup() {\n      var collectionRef = ref(null);\n      var itemMap = /* @__PURE__ */new Map();\n\n      var getItems = function getItems() {\n        var collectionEl = unref(collectionRef);\n        if (!collectionEl) return [];\n        var orderedNodes = Array.from(collectionEl.querySelectorAll(\"[\".concat(COLLECTION_ITEM_SIGN, \"]\")));\n\n        var items = _toConsumableArray(itemMap.values());\n\n        return items.sort(function (a, b) {\n          return orderedNodes.indexOf(a.ref) - orderedNodes.indexOf(b.ref);\n        });\n      };\n\n      provide(COLLECTION_INJECTION_KEY, {\n        itemMap: itemMap,\n        getItems: getItems,\n        collectionRef: collectionRef\n      });\n    }\n  });\n\n  var ElCollectionItem = _objectSpread(_objectSpread({}, CollectionItem), {}, {\n    name: COLLECTION_ITEM_NAME,\n    setup: function setup(_, _ref) {\n      var attrs = _ref.attrs;\n      var collectionItemRef = ref(null);\n      var collectionInjection = inject(COLLECTION_INJECTION_KEY, void 0);\n      provide(COLLECTION_ITEM_INJECTION_KEY, {\n        collectionItemRef: collectionItemRef\n      });\n      onMounted(function () {\n        var collectionItemEl = unref(collectionItemRef);\n\n        if (collectionItemEl) {\n          collectionInjection.itemMap.set(collectionItemEl, _objectSpread({\n            ref: collectionItemEl\n          }, attrs));\n        }\n      });\n      onBeforeUnmount(function () {\n        var collectionItemEl = unref(collectionItemRef);\n        collectionInjection.itemMap[\"delete\"](collectionItemEl);\n      });\n    }\n  });\n\n  return {\n    COLLECTION_INJECTION_KEY: COLLECTION_INJECTION_KEY,\n    COLLECTION_ITEM_INJECTION_KEY: COLLECTION_ITEM_INJECTION_KEY,\n    ElCollection: ElCollection,\n    ElCollectionItem: ElCollectionItem\n  };\n};\n\nexport { COLLECTION_ITEM_SIGN, createCollectionWithScope };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAGY,IAACA,oBAAoB,4BAArB;;AACA,IAACC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,IAAD,EAAU;EACjD,IAAMC,eAAe,eAAQD,IAAR,eAArB;EACA,IAAME,oBAAoB,aAAMD,eAAN,SAA1B;EACA,IAAME,wBAAwB,GAAGC,MAAM,CAACH,eAAD,CAAvC;EACA,IAAMI,6BAA6B,GAAGD,MAAM,CAACF,oBAAD,CAA5C;;EACA,IAAMI,YAAY,mCACbC,UADa;IAEhBP,IAAI,EAAEC,eAFU;IAGhBO,KAHgB,mBAGR;MACN,IAAMC,aAAa,GAAGC,GAAG,CAAC,IAAD,CAAzB;MACA,IAAMC,OAAO,kBAAmB,IAAIC,GAAJ,EAAhC;;MACA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;QACrB,IAAMC,YAAY,GAAGC,KAAK,CAACN,aAAD,CAA1B;QACA,IAAI,CAACK,YAAL,EACE,OAAO,EAAP;QACF,IAAME,YAAY,GAAGC,KAAK,CAACC,IAAN,CAAWJ,YAAY,CAACK,gBAAb,YAAkCrB,oBAAlC,OAAX,CAArB;;QACA,IAAMsB,KAAK,sBAAOT,OAAO,CAACU,MAAR,EAAP,CAAX;;QACA,OAAOD,KAAK,CAACE,IAAN,CAAW,UAACC,CAAD,EAAIC,CAAJ;UAAA,OAAUR,YAAY,CAACS,OAAb,CAAqBF,CAAC,CAACb,GAAvB,IAA8BM,YAAY,CAACS,OAAb,CAAqBD,CAAC,CAACd,GAAvB,CAAxC;QAAA,CAAX,CAAP;MACD,CAPD;;MAQAgB,OAAO,CAACvB,wBAAD,EAA2B;QAChCQ,OAAO,EAAPA,OADgC;QAEhCE,QAAQ,EAARA,QAFgC;QAGhCJ,aAAa,EAAbA;MAHgC,CAA3B,CAAP;IAKD;EAnBe,EAAlB;;EAqBA,IAAMkB,gBAAgB,mCACjBC,cADiB;IAEpB5B,IAAI,EAAEE,oBAFc;IAGpBM,KAHoB,iBAGdqB,CAHc,QAGA;MAAA,IAATC,KAAS,QAATA,KAAS;MAClB,IAAMC,iBAAiB,GAAGrB,GAAG,CAAC,IAAD,CAA7B;MACA,IAAMsB,mBAAmB,GAAGC,MAAM,CAAC9B,wBAAD,EAA2B,KAAK,CAAhC,CAAlC;MACAuB,OAAO,CAACrB,6BAAD,EAAgC;QACrC0B,iBAAiB,EAAjBA;MADqC,CAAhC,CAAP;MAGAG,SAAS,CAAC,YAAM;QACd,IAAMC,gBAAgB,GAAGpB,KAAK,CAACgB,iBAAD,CAA9B;;QACA,IAAII,gBAAJ,EAAsB;UACpBH,mBAAmB,CAACrB,OAApB,CAA4ByB,GAA5B,CAAgCD,gBAAhC;YACEzB,GAAG,EAAEyB;UADP,GAEKL,KAFL;QAID;MACF,CARQ,CAAT;MASAO,eAAe,CAAC,YAAM;QACpB,IAAMF,gBAAgB,GAAGpB,KAAK,CAACgB,iBAAD,CAA9B;QACAC,mBAAmB,CAACrB,OAApB,WAAmCwB,gBAAnC;MACD,CAHc,CAAf;IAID;EAtBmB,EAAtB;;EAwBA,OAAO;IACLhC,wBAAwB,EAAxBA,wBADK;IAELE,6BAA6B,EAA7BA,6BAFK;IAGLC,YAAY,EAAZA,YAHK;IAILqB,gBAAgB,EAAhBA;EAJK,CAAP;AAMF,CAxDY","names":["COLLECTION_ITEM_SIGN","createCollectionWithScope","name","COLLECTION_NAME","COLLECTION_ITEM_NAME","COLLECTION_INJECTION_KEY","Symbol","COLLECTION_ITEM_INJECTION_KEY","ElCollection","Collection","setup","collectionRef","ref","itemMap","Map","getItems","collectionEl","unref","orderedNodes","Array","from","querySelectorAll","items","values","sort","a","b","indexOf","provide","ElCollectionItem","CollectionItem","_","attrs","collectionItemRef","collectionInjection","inject","onMounted","collectionItemEl","set","onBeforeUnmount"],"sources":["../../../../../../packages/components/collection/src/collection.ts"],"sourcesContent":["import { inject, onBeforeUnmount, onMounted, provide, ref, unref } from 'vue'\nimport Collection from './collection.vue'\nimport CollectionItem from './collection-item.vue'\n\nimport type { InjectionKey } from 'vue'\nimport type { SetupContext } from '@vue/runtime-core'\nimport type {\n  ElCollectionInjectionContext,\n  ElCollectionItemInjectionContext,\n} from './tokens'\n\nexport const COLLECTION_ITEM_SIGN = `data-el-collection-item`\n\n// Make sure the first letter of name is capitalized\nexport const createCollectionWithScope = (name: string) => {\n  const COLLECTION_NAME = `El${name}Collection`\n  const COLLECTION_ITEM_NAME = `${COLLECTION_NAME}Item`\n  const COLLECTION_INJECTION_KEY: InjectionKey<ElCollectionInjectionContext> =\n    Symbol(COLLECTION_NAME)\n  const COLLECTION_ITEM_INJECTION_KEY: InjectionKey<ElCollectionItemInjectionContext> =\n    Symbol(COLLECTION_ITEM_NAME)\n\n  const ElCollection = {\n    ...Collection,\n    name: COLLECTION_NAME,\n    setup() {\n      const collectionRef = ref<HTMLElement | null>(null)\n      const itemMap: ElCollectionInjectionContext['itemMap'] = new Map()\n      const getItems = () => {\n        const collectionEl = unref(collectionRef)\n\n        if (!collectionEl) return []\n        const orderedNodes = Array.from(\n          collectionEl.querySelectorAll(`[${COLLECTION_ITEM_SIGN}]`)\n        )\n\n        const items = [...itemMap.values()]\n\n        return items.sort(\n          (a, b) => orderedNodes.indexOf(a.ref!) - orderedNodes.indexOf(b.ref!)\n        )\n      }\n\n      provide(COLLECTION_INJECTION_KEY, {\n        itemMap,\n        getItems,\n        collectionRef,\n      })\n    },\n  }\n\n  const ElCollectionItem = {\n    ...CollectionItem,\n    name: COLLECTION_ITEM_NAME,\n    setup(_: unknown, { attrs }: SetupContext) {\n      const collectionItemRef = ref<HTMLElement | null>(null)\n      const collectionInjection = inject(COLLECTION_INJECTION_KEY, undefined)!\n\n      provide(COLLECTION_ITEM_INJECTION_KEY, {\n        collectionItemRef,\n      })\n\n      onMounted(() => {\n        const collectionItemEl = unref(collectionItemRef)\n        if (collectionItemEl) {\n          collectionInjection.itemMap.set(collectionItemEl, {\n            ref: collectionItemEl,\n            ...attrs,\n          })\n        }\n      })\n\n      onBeforeUnmount(() => {\n        const collectionItemEl = unref(collectionItemRef)!\n        collectionInjection.itemMap.delete(collectionItemEl)\n      })\n    },\n  }\n\n  return {\n    COLLECTION_INJECTION_KEY,\n    COLLECTION_ITEM_INJECTION_KEY,\n    ElCollection,\n    ElCollectionItem,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}