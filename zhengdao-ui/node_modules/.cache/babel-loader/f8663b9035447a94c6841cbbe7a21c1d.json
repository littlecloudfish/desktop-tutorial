{"ast":null,"code":"import { getCurrentInstance, ref, computed, watch, nextTick, onMounted } from 'vue';\nimport { useTimeoutFn, isClient } from '@vueuse/core';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { useGlobalConfig } from '../../../hooks/use-global-config/index.mjs';\nimport { defaultNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { addUnit } from '../../../utils/dom/style.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useLockscreen } from '../../../hooks/use-lockscreen/index.mjs';\n\nvar useDialog = function useDialog(props, targetRef) {\n  var instance = getCurrentInstance();\n  var emit = instance.emit;\n\n  var _useZIndex = useZIndex(),\n      nextZIndex = _useZIndex.nextZIndex;\n\n  var lastPosition = \"\";\n  var titleId = useId();\n  var bodyId = useId();\n  var visible = ref(false);\n  var closed = ref(false);\n  var rendered = ref(false);\n  var zIndex = ref(props.zIndex || nextZIndex());\n  var openTimer = void 0;\n  var closeTimer = void 0;\n  var namespace = useGlobalConfig(\"namespace\", defaultNamespace);\n  var style = computed(function () {\n    var style2 = {};\n    var varPrefix = \"--\".concat(namespace.value, \"-dialog\");\n\n    if (!props.fullscreen) {\n      if (props.top) {\n        style2[\"\".concat(varPrefix, \"-margin-top\")] = props.top;\n      }\n\n      if (props.width) {\n        style2[\"\".concat(varPrefix, \"-width\")] = addUnit(props.width);\n      }\n    }\n\n    return style2;\n  });\n\n  function afterEnter() {\n    emit(\"opened\");\n  }\n\n  function afterLeave() {\n    emit(\"closed\");\n    emit(UPDATE_MODEL_EVENT, false);\n\n    if (props.destroyOnClose) {\n      rendered.value = false;\n    }\n  }\n\n  function beforeLeave() {\n    emit(\"close\");\n  }\n\n  function open() {\n    closeTimer == null ? void 0 : closeTimer();\n    openTimer == null ? void 0 : openTimer();\n\n    if (props.openDelay && props.openDelay > 0) {\n      ;\n\n      var _useTimeoutFn = useTimeoutFn(function () {\n        return doOpen();\n      }, props.openDelay);\n\n      openTimer = _useTimeoutFn.stop;\n    } else {\n      doOpen();\n    }\n  }\n\n  function close() {\n    openTimer == null ? void 0 : openTimer();\n    closeTimer == null ? void 0 : closeTimer();\n\n    if (props.closeDelay && props.closeDelay > 0) {\n      ;\n\n      var _useTimeoutFn2 = useTimeoutFn(function () {\n        return doClose();\n      }, props.closeDelay);\n\n      closeTimer = _useTimeoutFn2.stop;\n    } else {\n      doClose();\n    }\n  }\n\n  function handleClose() {\n    function hide(shouldCancel) {\n      if (shouldCancel) return;\n      closed.value = true;\n      visible.value = false;\n    }\n\n    if (props.beforeClose) {\n      props.beforeClose(hide);\n    } else {\n      close();\n    }\n  }\n\n  function onModalClick() {\n    if (props.closeOnClickModal) {\n      handleClose();\n    }\n  }\n\n  function doOpen() {\n    if (!isClient) return;\n    visible.value = true;\n  }\n\n  function doClose() {\n    visible.value = false;\n  }\n\n  function onOpenAutoFocus() {\n    emit(\"openAutoFocus\");\n  }\n\n  function onCloseAutoFocus() {\n    emit(\"closeAutoFocus\");\n  }\n\n  if (props.lockScroll) {\n    useLockscreen(visible);\n  }\n\n  function onCloseRequested() {\n    if (props.closeOnPressEscape) {\n      handleClose();\n    }\n  }\n\n  watch(function () {\n    return props.modelValue;\n  }, function (val) {\n    if (val) {\n      closed.value = false;\n      open();\n      rendered.value = true;\n      emit(\"open\");\n      zIndex.value = props.zIndex ? zIndex.value++ : nextZIndex();\n      nextTick(function () {\n        if (targetRef.value) {\n          targetRef.value.scrollTop = 0;\n        }\n      });\n    } else {\n      if (visible.value) {\n        close();\n      }\n    }\n  });\n  watch(function () {\n    return props.fullscreen;\n  }, function (val) {\n    if (!targetRef.value) return;\n\n    if (val) {\n      lastPosition = targetRef.value.style.transform;\n      targetRef.value.style.transform = \"\";\n    } else {\n      targetRef.value.style.transform = lastPosition;\n    }\n  });\n  onMounted(function () {\n    if (props.modelValue) {\n      visible.value = true;\n      rendered.value = true;\n      open();\n    }\n  });\n  return {\n    afterEnter: afterEnter,\n    afterLeave: afterLeave,\n    beforeLeave: beforeLeave,\n    handleClose: handleClose,\n    onModalClick: onModalClick,\n    close: close,\n    doClose: doClose,\n    onOpenAutoFocus: onOpenAutoFocus,\n    onCloseAutoFocus: onCloseAutoFocus,\n    onCloseRequested: onCloseRequested,\n    titleId: titleId,\n    bodyId: bodyId,\n    closed: closed,\n    style: style,\n    rendered: rendered,\n    visible: visible,\n    zIndex: zIndex\n  };\n};\n\nexport { useDialog };","map":{"version":3,"mappings":"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","names":["useDialog","props","targetRef","instance","getCurrentInstance","emit","useZIndex","nextZIndex","lastPosition","titleId","useId","bodyId","visible","ref","closed","rendered","zIndex","openTimer","closeTimer","namespace","useGlobalConfig","defaultNamespace","style","computed","style2","varPrefix","value","fullscreen","top","width","addUnit","afterEnter","afterLeave","UPDATE_MODEL_EVENT","destroyOnClose","beforeLeave","open","openDelay","useTimeoutFn","doOpen","stop","close","closeDelay","doClose","handleClose","hide","shouldCancel","beforeClose","onModalClick","closeOnClickModal","isClient","onOpenAutoFocus","onCloseAutoFocus","lockScroll","useLockscreen","onCloseRequested","closeOnPressEscape","watch","modelValue","val","nextTick","scrollTop","transform","onMounted"],"sources":["../../../../../../packages/components/dialog/src/use-dialog.ts"],"sourcesContent":["import {\n  computed,\n  getCurrentInstance,\n  nextTick,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { isClient, useTimeoutFn } from '@vueuse/core'\n\nimport {\n  defaultNamespace,\n  useGlobalConfig,\n  useId,\n  useLockscreen,\n  useZIndex,\n} from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { addUnit } from '@element-plus/utils'\n\nimport type { CSSProperties, Ref, SetupContext } from 'vue'\nimport type { DialogEmits, DialogProps } from './dialog'\n\nexport const useDialog = (\n  props: DialogProps,\n  targetRef: Ref<HTMLElement | undefined>\n) => {\n  const instance = getCurrentInstance()!\n  const emit = instance.emit as SetupContext<DialogEmits>['emit']\n  const { nextZIndex } = useZIndex()\n\n  let lastPosition = ''\n  const titleId = useId()\n  const bodyId = useId()\n  const visible = ref(false)\n  const closed = ref(false)\n  const rendered = ref(false) // when desctroyOnClose is true, we initialize it as false vise versa\n  const zIndex = ref(props.zIndex || nextZIndex())\n\n  let openTimer: (() => void) | undefined = undefined\n  let closeTimer: (() => void) | undefined = undefined\n\n  const namespace = useGlobalConfig('namespace', defaultNamespace)\n\n  const style = computed<CSSProperties>(() => {\n    const style: CSSProperties = {}\n    const varPrefix = `--${namespace.value}-dialog` as const\n    if (!props.fullscreen) {\n      if (props.top) {\n        style[`${varPrefix}-margin-top`] = props.top\n      }\n      if (props.width) {\n        style[`${varPrefix}-width`] = addUnit(props.width)\n      }\n    }\n    return style\n  })\n\n  function afterEnter() {\n    emit('opened')\n  }\n\n  function afterLeave() {\n    emit('closed')\n    emit(UPDATE_MODEL_EVENT, false)\n    if (props.destroyOnClose) {\n      rendered.value = false\n    }\n  }\n\n  function beforeLeave() {\n    emit('close')\n  }\n\n  function open() {\n    closeTimer?.()\n    openTimer?.()\n\n    if (props.openDelay && props.openDelay > 0) {\n      ;({ stop: openTimer } = useTimeoutFn(() => doOpen(), props.openDelay))\n    } else {\n      doOpen()\n    }\n  }\n\n  function close() {\n    openTimer?.()\n    closeTimer?.()\n\n    if (props.closeDelay && props.closeDelay > 0) {\n      ;({ stop: closeTimer } = useTimeoutFn(() => doClose(), props.closeDelay))\n    } else {\n      doClose()\n    }\n  }\n\n  function handleClose() {\n    function hide(shouldCancel?: boolean) {\n      if (shouldCancel) return\n      closed.value = true\n      visible.value = false\n    }\n\n    if (props.beforeClose) {\n      props.beforeClose(hide)\n    } else {\n      close()\n    }\n  }\n\n  function onModalClick() {\n    if (props.closeOnClickModal) {\n      handleClose()\n    }\n  }\n\n  function doOpen() {\n    if (!isClient) return\n    visible.value = true\n  }\n\n  function doClose() {\n    visible.value = false\n  }\n\n  function onOpenAutoFocus() {\n    emit('openAutoFocus')\n  }\n\n  function onCloseAutoFocus() {\n    emit('closeAutoFocus')\n  }\n\n  if (props.lockScroll) {\n    useLockscreen(visible)\n  }\n\n  function onCloseRequested() {\n    if (props.closeOnPressEscape) {\n      handleClose()\n    }\n  }\n\n  watch(\n    () => props.modelValue,\n    (val) => {\n      if (val) {\n        closed.value = false\n        open()\n        rendered.value = true // enables lazy rendering\n        emit('open')\n        zIndex.value = props.zIndex ? zIndex.value++ : nextZIndex()\n        // this.$el.addEventListener('scroll', this.updatePopper)\n        nextTick(() => {\n          if (targetRef.value) {\n            targetRef.value.scrollTop = 0\n          }\n        })\n      } else {\n        // this.$el.removeEventListener('scroll', this.updatePopper\n        if (visible.value) {\n          close()\n        }\n      }\n    }\n  )\n\n  watch(\n    () => props.fullscreen,\n    (val) => {\n      if (!targetRef.value) return\n      if (val) {\n        lastPosition = targetRef.value.style.transform\n        targetRef.value.style.transform = ''\n      } else {\n        targetRef.value.style.transform = lastPosition\n      }\n    }\n  )\n\n  onMounted(() => {\n    if (props.modelValue) {\n      visible.value = true\n      rendered.value = true // enables lazy rendering\n      open()\n    }\n  })\n\n  return {\n    afterEnter,\n    afterLeave,\n    beforeLeave,\n    handleClose,\n    onModalClick,\n    close,\n    doClose,\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    onCloseRequested,\n    titleId,\n    bodyId,\n    closed,\n    style,\n    rendered,\n    visible,\n    zIndex,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}