{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { defineComponent, inject, withDirectives, cloneVNode, Fragment, createVNode, Text, Comment } from 'vue';\nimport { NOOP, isObject } from '@vue/shared';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { FORWARD_REF_INJECTION_KEY, useForwardRefDirective } from '../../../hooks/use-forward-ref/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nvar NAME = \"ElOnlyChild\";\nvar OnlyChild = defineComponent({\n  name: NAME,\n  setup: function setup(_, _ref) {\n    var slots = _ref.slots,\n        attrs = _ref.attrs;\n\n    var _a;\n\n    var forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY);\n    var forwardRefDirective = useForwardRefDirective((_a = forwardRefInjection == null ? void 0 : forwardRefInjection.setForwardRef) != null ? _a : NOOP);\n    return function () {\n      var _a2;\n\n      var defaultSlot = (_a2 = slots[\"default\"]) == null ? void 0 : _a2.call(slots, attrs);\n      if (!defaultSlot) return null;\n\n      if (defaultSlot.length > 1) {\n        debugWarn(NAME, \"requires exact only one valid child.\");\n        return null;\n      }\n\n      var firstLegitNode = findFirstLegitChild(defaultSlot);\n\n      if (!firstLegitNode) {\n        debugWarn(NAME, \"no valid child node found\");\n        return null;\n      }\n\n      return withDirectives(cloneVNode(firstLegitNode, attrs), [[forwardRefDirective]]);\n    };\n  }\n});\n\nfunction findFirstLegitChild(node) {\n  if (!node) return null;\n  var children = node;\n\n  var _iterator = _createForOfIteratorHelper(children),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var child = _step.value;\n\n      if (isObject(child)) {\n        switch (child.type) {\n          case Comment:\n            continue;\n\n          case Text:\n          case \"svg\":\n            return wrapTextContent(child);\n\n          case Fragment:\n            return findFirstLegitChild(child.children);\n\n          default:\n            return child;\n        }\n      }\n\n      return wrapTextContent(child);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return null;\n}\n\nfunction wrapTextContent(s) {\n  return createVNode(\"span\", {\n    \"class\": \"el-only-child__content\"\n  }, [s]);\n}\n\nexport { OnlyChild };","map":{"version":3,"mappings":";;;;;;;AAkBA,IAAMA,IAAI,GAAG,aAAb;AAEaC,aAAS,GAAGC,eAAe,CAAC;EACvCC,IAAI,EAAEH,IADiC;OAAA,0BAErBI;IAAAA,IAAbC,KAAaD,QAAbC,KAAaD;IAAAA,IAAPC,KAAOD,QAAPC,KAAOD;;IAAS;;IACzB,IAAME,mBAAmB,GAAGC,MAAM,CAACC,yBAAD,CAAlC;IACA,IAAMC,mBAAmB,GAAGC,sBAAsB,CAChDJ,yBAAqBK,QAArBL,GAAsCM,MAAtCN,GADFA,iCACEA,KADF,IACEA,GADFO,EACEP,GADFM,IAAkD,CAAlD;IAGA,OAAO,YAAM;MACX;;MACA,IAAKE,WAAa,qEAAlB;wBAEA,OAAe,IAAf;;MACEC,eAAUf,CAADgB,MAATD,GAAgB,CAAhBA,EAAgB;QAChBA;QACD;;;MAED,IAAME,cAAc,GAAGC,mBAAmB,CAACJ,WAAD,CAA1C;;;QACIC;QACFA;MACA;;MACD;KAbH;EAeE;AAtBmC,CAAD,CAA3Bd;;AA0BV;aA1BI;;;EA0BJ,2CAGMiB,QAHN;EAAA;;EAAA;IAGMA,oDAAoBC;MAAAA,IAApBD,KAAoBC;;MAC3B,IAAKA,QAAM,OAAX,EAAW;QACLC,aAAWD,CAAjBE,IAAMD;;YACKE;;UACT;UACJ;YACA;;UACA;YACA;;UACQC;YACMD;QARNF;MAUE;;;IACF;EAhBL;IAAA;EAAA;IAAA;EAAA;;EAiBK;;;;EAEA;IACE;EADF;AAEA","names":["NAME","OnlyChild","defineComponent","name","attrs","slots","forwardRefInjection","inject","FORWARD_REF_INJECTION_KEY","forwardRefDirective","useForwardRefDirective","setForwardRef","NOOP","_a","defaultSlot","debugWarn","length","firstLegitNode","findFirstLegitChild","node","children","type","child","isObject"],"sources":["../../../../../../packages/components/slot/src/only-child.tsx"],"sourcesContent":["import {\n  Comment,\n  Fragment,\n  Text,\n  cloneVNode,\n  defineComponent,\n  inject,\n  withDirectives,\n} from 'vue'\nimport { NOOP, isObject } from '@vue/shared'\nimport {\n  FORWARD_REF_INJECTION_KEY,\n  useForwardRefDirective,\n} from '@element-plus/hooks'\nimport { debugWarn } from '@element-plus/utils'\n\nimport type { Ref, VNode } from 'vue'\n\nconst NAME = 'ElOnlyChild'\n\nexport const OnlyChild = defineComponent({\n  name: NAME,\n  setup(_, { slots, attrs }) {\n    const forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY)\n    const forwardRefDirective = useForwardRefDirective(\n      forwardRefInjection?.setForwardRef ?? NOOP\n    )\n    return () => {\n      const defaultSlot = slots.default?.(attrs)\n      if (!defaultSlot) return null\n\n      if (defaultSlot.length > 1) {\n        debugWarn(NAME, 'requires exact only one valid child.')\n        return null\n      }\n\n      const firstLegitNode = findFirstLegitChild(defaultSlot)\n      if (!firstLegitNode) {\n        debugWarn(NAME, 'no valid child node found')\n        return null\n      }\n\n      return withDirectives(cloneVNode(firstLegitNode!, attrs), [\n        [forwardRefDirective],\n      ])\n    }\n  },\n})\n\nfunction findFirstLegitChild(node: VNode[] | undefined): VNode | null {\n  if (!node) return null\n  const children = node as VNode[]\n  for (const child of children) {\n    /**\n     * when user uses h(Fragment, [text]) to render plain string,\n     * this switch case just cannot handle, when the value is primitives\n     * we should just return the wrapped string\n     */\n    if (isObject(child)) {\n      switch (child.type) {\n        case Comment:\n          continue\n        case Text:\n        case 'svg':\n          return wrapTextContent(child)\n        case Fragment:\n          return findFirstLegitChild(child.children as VNode[])\n        default:\n          return child\n      }\n    }\n    return wrapTextContent(child)\n  }\n  return null\n}\n\nfunction wrapTextContent(s: string | VNode) {\n  return <span class=\"el-only-child__content\">{s}</span>\n}\n\nexport type OnlyChildExpose = {\n  forwardRef: Ref<HTMLElement>\n}\n"]},"metadata":{},"sourceType":"module"}