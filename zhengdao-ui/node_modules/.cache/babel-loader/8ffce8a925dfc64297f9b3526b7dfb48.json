{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { createVNode, mergeProps } from 'vue';\nimport { get } from 'lodash-unified';\nimport '../../../../utils/index.mjs';\nimport '../components/index.mjs';\nimport { Alignment } from '../constants.mjs';\nimport { placeholderSign } from '../private.mjs';\nimport { enforceUnit, componentToSlot, tryCall } from '../utils.mjs';\nimport TableV2Cell from '../components/cell.mjs';\nimport { isFunction, isObject } from '@vue/shared';\nimport ExpandIcon from '../components/expand-icon.mjs';\n\nvar CellRenderer = function CellRenderer(_ref, _ref2) {\n  var columns = _ref.columns,\n      column = _ref.column,\n      columnIndex = _ref.columnIndex,\n      depth = _ref.depth,\n      expandIconProps = _ref.expandIconProps,\n      isScrolling = _ref.isScrolling,\n      rowData = _ref.rowData,\n      rowIndex = _ref.rowIndex,\n      style = _ref.style,\n      expandedRowKeys = _ref.expandedRowKeys,\n      ns = _ref.ns,\n      _cellProps = _ref.cellProps,\n      expandColumnKey = _ref.expandColumnKey,\n      indentSize = _ref.indentSize,\n      iconSize = _ref.iconSize,\n      rowKey = _ref.rowKey;\n  var slots = _ref2.slots;\n  var cellStyle = enforceUnit(style);\n\n  if (column.placeholderSign === placeholderSign) {\n    return createVNode(\"div\", {\n      \"class\": ns.em(\"row-cell\", \"placeholder\"),\n      \"style\": cellStyle\n    }, null);\n  }\n\n  var cellRenderer = column.cellRenderer,\n      dataKey = column.dataKey,\n      dataGetter = column.dataGetter;\n  var columnCellRenderer = componentToSlot(cellRenderer);\n\n  var CellComponent = columnCellRenderer || slots[\"default\"] || function (props) {\n    return createVNode(TableV2Cell, props, null);\n  };\n\n  var cellData = isFunction(dataGetter) ? dataGetter({\n    columns: columns,\n    column: column,\n    columnIndex: columnIndex,\n    rowData: rowData,\n    rowIndex: rowIndex\n  }) : get(rowData, dataKey != null ? dataKey : \"\");\n  var extraCellProps = tryCall(_cellProps, {\n    cellData: cellData,\n    columns: columns,\n    column: column,\n    columnIndex: columnIndex,\n    rowIndex: rowIndex,\n    rowData: rowData\n  });\n  var cellProps = {\n    \"class\": ns.e(\"cell-text\"),\n    columns: columns,\n    column: column,\n    columnIndex: columnIndex,\n    cellData: cellData,\n    isScrolling: isScrolling,\n    rowData: rowData,\n    rowIndex: rowIndex\n  };\n  var Cell = CellComponent(cellProps);\n  var kls = [ns.e(\"row-cell\"), column.align === Alignment.CENTER && ns.is(\"align-center\"), column.align === Alignment.RIGHT && ns.is(\"align-right\")];\n  var expandable = rowIndex >= 0 && column.key === expandColumnKey;\n  var expanded = rowIndex >= 0 && expandedRowKeys.includes(rowData[rowKey]);\n  var IconOrPlaceholder;\n  var iconStyle = \"margin-inline-start: \".concat(depth * indentSize, \"px;\");\n\n  if (expandable) {\n    if (isObject(expandIconProps)) {\n      IconOrPlaceholder = createVNode(ExpandIcon, mergeProps(expandIconProps, {\n        \"class\": [ns.e(\"expand-icon\"), ns.is(\"expanded\", expanded)],\n        \"size\": iconSize,\n        \"expanded\": expanded,\n        \"style\": iconStyle,\n        \"expandable\": true\n      }), null);\n    } else {\n      IconOrPlaceholder = createVNode(\"div\", {\n        \"style\": [iconStyle, \"width: \".concat(iconSize, \"px; height: \").concat(iconSize, \"px;\")].join(\" \")\n      }, null);\n    }\n  }\n\n  return createVNode(\"div\", mergeProps({\n    \"class\": kls,\n    \"style\": cellStyle\n  }, extraCellProps), [IconOrPlaceholder, Cell]);\n};\n\nCellRenderer.inheritAttrs = false;\nexport { CellRenderer as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;sDAwBE;EAAA,IADIA,OACJ,QADIA,OACJ;EAAA,IACEC,MADF,QACEA,MADF;EAAA,IAEEC,WAFF,QAEEA,WAFF;EAAA,IAGED,KAHF,QAGEA,KAHF;EAAA,IAIEE,eAJF,QAIEA,eAJF;EAAA,IAKEC,WALF,QAKEA,WALF;EAAA,IAMEC,OANF,QAMEA,OANF;EAAA,IAOEC,QAPF,QAOEA,QAPF;EAAA,IAQEC,KARF,QAQEA,KARF;EAAA,IASEC,eATF,QASEA,eATF;EAAA,IAUEC,EAVF,QAUEA,EAVF;EAAA,sBAWEC,SAXF;EAAA,IAYEC,eAZF,QAYEA,eAZF;EAAA,IAaEF,UAbF,QAaEA,UAbF;EAAA,IAcEG,QAdF,QAcEA,QAdF;EAAA,IAeEC,MAfF,QAeEA,MAfF;EAAA,IAiBEC,KAjBF,SAiBEA,KAjBF;EAmBEC;;EAEF;IAAEC;MACC,yCADDA;MAEF,SAAeC;IAFbD;EAIF;;EACE,mBACDf,MADC;EAAA,cACDA,MADC;EAAA,iBACDA,MADC;;;EAEF,IAAMiB;IAAA;EAAA,CAAN;;MAAMC;IAAgBC,OAAhB,EAAgBA,OAAhB;IAAyBC,cAAzB;IAAAlB,WAAN,EAAMA;IAENI,OAAwB,EAAxBA,OAFM;;EAAA,KAINe,GAAmB,iBACC,QADD,GACCF,OADD,GAEZ,EAFY;;IAKbD;IACWjB,OAAF,EAAEA;IAASD,MAAX,EAAWA;IAAQE,WAAnB,EAAmBA;IAAaI,QAAhC,EAAgCA;IAASC;;EAGxD,IAAMe,SAAc;IAClBJ,SADyCV,iBAAvB;IAElBP,OAFyC,EAEzCA,OAFkB;IAGlBD,MAHyC,EAGzCA,MAHkB;IAIlBE,WAJyC,EAIzCA,WAJkB;IAKlBK,QALyC,EAKzCA,QALkB;IAMlBD,wBANkB;IAApBA,gBAAoB;IASpBC;EAToB,CAApB;MASkBgB;MAAAC;MAAAC;MAAAC;MAAAC;MAAAC;;EAQhBrB;IARF;MAWAoB,iBAA0B,eAA1BE,UAA0B,EAA1BC;QAEMN,SACF,CAACO,EAAE,EAAFA,CAAE,aAAFA,CAAD,EACIvB,EAACwB,GAAD,CAAN,UAAM,EAAoBN,QAApB,CADJ,CAHJ;QAQMD,gBARN;QASMC,YAAmBA,QATzB;QAWA,kBAXA;QAYME,cAAa;MAZnB,EAA0B,OAA1B;IAaA,CAxBA,MAwBA;MACED,iBAAY,cAAmB;QAC7BA,yFAAiBM,IAAjBN,CAAiB,GAAjBA;MAD6B,GACZ,IADY,CAA/B;IACmB;EAAA;;EAAA;IAAA;aAAjBX;EAAiB,GADnBM,cACmB,GAUZ,yBAVY;;;YAaN","names":["CellRenderer","column","columns","columnIndex","depth","expandIconProps","isScrolling","rowData","rowIndex","ns","style","expandedRowKeys","iconSize","cellProps","indentSize","rowKey","slots","cellStyle","CellComponent","cellData","dataKey","dataGetter","get","extraCellProps","Cell","kls","expandable","expanded","IconOrPlaceholder","iconStyle","ExpandIcon","_mergeProps","e","align","join"],"sources":["../../../../../../../packages/components/table-v2/src/renderers/cell.tsx"],"sourcesContent":["import { get } from 'lodash-unified'\nimport { isFunction, isObject } from '@element-plus/utils'\nimport { ExpandIcon, TableCell } from '../components'\nimport { Alignment } from '../constants'\nimport { placeholderSign } from '../private'\nimport { componentToSlot, enforceUnit, tryCall } from '../utils'\n\nimport type { FunctionalComponent, UnwrapNestedRefs, VNode } from 'vue'\nimport type { CellRendererParams } from '../types'\nimport type { TableV2RowCellRenderParam } from '../components'\nimport type { UseNamespaceReturn } from '@element-plus/hooks'\nimport type { UseTableReturn } from '../use-table'\nimport type { TableV2Props } from '../table'\n\ntype CellRendererProps = TableV2RowCellRenderParam &\n  Pick<\n    TableV2Props,\n    'cellProps' | 'expandColumnKey' | 'indentSize' | 'iconSize' | 'rowKey'\n  > &\n  UnwrapNestedRefs<Pick<UseTableReturn, 'expandedRowKeys'>> & {\n    ns: UseNamespaceReturn\n  }\n\nconst CellRenderer: FunctionalComponent<CellRendererProps> = (\n  {\n    // renderer props\n    columns,\n    column,\n    columnIndex,\n    depth,\n    expandIconProps,\n    isScrolling,\n    rowData,\n    rowIndex,\n    // from use-table\n    style,\n    expandedRowKeys,\n    ns,\n    // derived props\n    cellProps: _cellProps,\n    expandColumnKey,\n    indentSize,\n    iconSize,\n    rowKey,\n  },\n  { slots }\n) => {\n  const cellStyle = enforceUnit(style)\n\n  if (column.placeholderSign === placeholderSign) {\n    return <div class={ns.em('row-cell', 'placeholder')} style={cellStyle} />\n  }\n  const { cellRenderer, dataKey, dataGetter } = column\n\n  const columnCellRenderer = componentToSlot(cellRenderer)\n\n  const CellComponent =\n    columnCellRenderer ||\n    slots.default ||\n    ((props: CellRendererParams<any>) => <TableCell {...props} />)\n\n  const cellData = isFunction(dataGetter)\n    ? dataGetter({ columns, column, columnIndex, rowData, rowIndex })\n    : get(rowData, dataKey ?? '')\n\n  const extraCellProps = tryCall(_cellProps, {\n    cellData,\n    columns,\n    column,\n    columnIndex,\n    rowIndex,\n    rowData,\n  })\n\n  const cellProps = {\n    class: ns.e('cell-text'),\n    columns,\n    column,\n    columnIndex,\n    cellData,\n    isScrolling,\n    rowData,\n    rowIndex,\n  }\n\n  const Cell = CellComponent(cellProps)\n\n  const kls = [\n    ns.e('row-cell'),\n    column.align === Alignment.CENTER && ns.is('align-center'),\n    column.align === Alignment.RIGHT && ns.is('align-right'),\n  ]\n\n  const expandable = rowIndex >= 0 && column.key === expandColumnKey\n  const expanded = rowIndex >= 0 && expandedRowKeys.includes(rowData[rowKey])\n\n  let IconOrPlaceholder: VNode | undefined\n  const iconStyle = `margin-inline-start: ${depth * indentSize}px;`\n  if (expandable) {\n    if (isObject(expandIconProps)) {\n      IconOrPlaceholder = (\n        <ExpandIcon\n          {...expandIconProps}\n          class={[ns.e('expand-icon'), ns.is('expanded', expanded)]}\n          size={iconSize}\n          expanded={expanded}\n          style={iconStyle}\n          expandable\n        />\n      )\n    } else {\n      IconOrPlaceholder = (\n        <div\n          style={[\n            iconStyle,\n            `width: ${iconSize}px; height: ${iconSize}px;`,\n          ].join(' ')}\n        />\n      )\n    }\n  }\n\n  return (\n    <div class={kls} style={cellStyle} {...extraCellProps}>\n      {IconOrPlaceholder}\n      {Cell}\n    </div>\n  )\n}\n\nCellRenderer.inheritAttrs = false\n\nexport default CellRenderer\n"]},"metadata":{},"sourceType":"module"}