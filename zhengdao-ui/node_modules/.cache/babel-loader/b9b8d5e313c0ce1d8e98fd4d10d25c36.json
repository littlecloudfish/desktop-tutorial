{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"upload-example\"\n};\nconst _hoisted_2 = {\n  class: \"button-wrapper\"\n};\n\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\" Load image \");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_cropper = _resolveComponent(\"cropper\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_cropper, {\n    ref: \"cropper\",\n    class: \"upload-example-cropper\",\n    src: _ctx.image.src\n  }, null, 8\n  /* PROPS */\n  , [\"src\"]), _createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"button\", {\n    class: \"button\",\n    onClick: _cache[1] || (_cache[1] = $event => _ctx.$refs.file.click())\n  }, [_createElementVNode(\"input\", {\n    type: \"file\",\n    ref: \"file\",\n    onChange: _cache[0] || (_cache[0] = $event => $options.loadImage($event)),\n    accept: \"image/*\"\n  }, null, 544\n  /* HYDRATE_EVENTS, NEED_PATCH */\n  ), _hoisted_3])])]);\n}","map":{"version":3,"mappings":";;EAESA,KAAK,EAAC;;;EAMRA,KAAK,EAAC;;;iDAEkE;;;;;uBAR3EC,oBAYG,KAZH,cAYG,CAXLC,aAIEC,kBAJF,EAIE;IAHDC,GAAG,EAAC,SAGH;IAFDJ,KAAK,EAAC,wBAEL;IADAK,GAAG,EAAEC,WAAMD;EACX,CAJF;;EAAA,UAWK,EANLE,oBAKM,KALN,cAKM,CAJLA,oBAGS,QAHT,EAGS;IAHDP,KAAK,EAAC,QAGL;IAHeQ,OAAK,sCAAEF,WAAMG,IAAN,CAAWC,KAAX,EAAF;EAGpB,CAHT,GACCH,oBAA2E,OAA3E,EAA2E;IAApEI,IAAI,EAAC,MAA+D;IAAxDP,GAAG,EAAC,MAAoD;IAA5CQ,QAAM,sCAAEC,mBAAUC,MAAV,CAAF,CAAsC;IAAjBC,MAAM,EAAC;EAAU,CAA3E;;EAAA,cADD,CAIK,CALN,CAMK,CAZH","names":["class","_createElementBlock","_createVNode","_component_cropper","ref","src","_ctx","_createElementVNode","onClick","file","click","type","onChange","$options","$event","accept"],"sourceRoot":"","sources":["/home/little/Documents/music_web/startproj/zhengdao-ui/src/views/Music/MusicSearch.vue"],"sourcesContent":["<template>\n\n    <div class=\"upload-example\">\n\t\t<cropper\n\t\t\tref=\"cropper\"\n\t\t\tclass=\"upload-example-cropper\"\n\t\t\t:src=\"image.src\"\n\t\t/>\n\t\t<div class=\"button-wrapper\">\n\t\t\t<button class=\"button\" @click=\"$refs.file.click()\">\n\t\t\t\t<input type=\"file\" ref=\"file\" @change=\"loadImage($event)\" accept=\"image/*\">\n\t\t\t\tLoad image\n\t\t\t</button>\n\t\t</div>\n\t</div>\n\n</template>\n\n<script>\nimport { CircleStencil, Cropper } from 'vue-advanced-cropper';\nimport 'vue-advanced-cropper/dist/style.css';\n\nfunction getMimeType(file, fallback = null) {\n\tconst byteArray = (new Uint8Array(file)).subarray(0, 4);\n    let header = '';\n    for (let i = 0; i < byteArray.length; i++) {\n       header += byteArray[i].toString(16);\n    }\n\tswitch (header) {\n        case \"89504e47\":\n            return \"image/png\";\n        case \"47494638\":\n            return \"image/gif\";\n        case \"ffd8ffe0\":\n        case \"ffd8ffe1\":\n        case \"ffd8ffe2\":\n        case \"ffd8ffe3\":\n        case \"ffd8ffe8\":\n            return \"image/jpeg\";\n        default:\n            return fallback;\n    }\n}\n\nexport default {\ncomponents: {\nCropper,CircleStencil\n},\ndata() {\nreturn {\n// img: 'https://images.pexels.com/photos/4323307/pexels-photo-4323307.jpeg',\n    img:{\n        src: null,\n        type:null\n    }\n};\n},\nmethods: {\n    change({ coordinates, canvas }) {\n    console.log(coordinates, canvas);\n    },\n    crop() {\n                const { canvas } = this.$refs.cropper.getResult();\n                canvas.toBlob((blob) => {\n                    // Do something with blob: upload to a server, download and etc.\n                }, this.image.type);\n            },\n    reset() {\n        this.image = {\n            src: null,\n            type: null\n        }\n    },\n    loadImage(event) {\n        // Reference to the DOM input element\n        const { files } = event.target;\n        // Ensure that you have a file before attempting to read it\n        if (files && files[0]) {\n            // 1. Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n            if (this.image.src) {\n                URL.revokeObjectURL(this.image.src)\n            }\n            // 2. Create the blob link to the file to optimize performance:\n            const blob = URL.createObjectURL(files[0]);\n            \n            // 3. The steps below are designated to determine a file mime type to use it during the \n            // getting of a cropped image from the canvas. You can replace it them by the following string, \n            // but the type will be derived from the extension and it can lead to an incorrect result:\n            //\n            // this.image = {\n            //    src: blob;\n            //    type: files[0].type\n            // }\n            \n            // Create a new FileReader to read this image binary data\n            const reader = new FileReader();\n            // Define a callback function to run, when FileReader finishes its job\n            reader.onload = (e) => {\n                // Note: arrow function used here, so that \"this.image\" refers to the image of Vue component\n                this.image = {\n                    // Set the image source (it will look like blob:http://example.com/2c5270a5-18b5-406e-a4fb-07427f5e7b94)\n                    src: blob,\n                    // Determine the image type to preserve it during the extracting the image from canvas:\n                    type: getMimeType(e.target.result, files[0].type),\n                };\n            };\n            // Start the reader job - read file as a data url (base64 format)\n            reader.readAsArrayBuffer(files[0]);\n        }\n    },\n},\n    destroyed() {\n        // Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n        if (this.image.src) {\n            URL.revokeObjectURL(this.image.src)\n        }\n    }\n\n\n\n\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}