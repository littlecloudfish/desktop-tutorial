{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport { defineComponent, getCurrentInstance, shallowRef, ref, watch, onMounted, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport '../../../../hooks/index.mjs';\nimport draggable from '../draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useNamespace } from '../../../../hooks/use-namespace/index.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElColorAlphaSlider\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    },\n    vertical: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  setup: function setup(props) {\n    var ns = useNamespace(\"color-alpha-slider\");\n    var instance = getCurrentInstance();\n    var thumb = shallowRef(null);\n    var bar = shallowRef(null);\n    var thumbLeft = ref(0);\n    var thumbTop = ref(0);\n    var background = ref(null);\n    watch(function () {\n      return props.color.get(\"alpha\");\n    }, function () {\n      update();\n    });\n    watch(function () {\n      return props.color.value;\n    }, function () {\n      update();\n    });\n\n    function getThumbLeft() {\n      if (props.vertical) return 0;\n      var el = instance.vnode.el;\n      var alpha = props.color.get(\"alpha\");\n      if (!el) return 0;\n      return Math.round(alpha * (el.offsetWidth - thumb.value.offsetWidth / 2) / 100);\n    }\n\n    function getThumbTop() {\n      var el = instance.vnode.el;\n      if (!props.vertical) return 0;\n      var alpha = props.color.get(\"alpha\");\n      if (!el) return 0;\n      return Math.round(alpha * (el.offsetHeight - thumb.value.offsetHeight / 2) / 100);\n    }\n\n    function getBackground() {\n      if (props.color && props.color.value) {\n        var _props$color$toRgb = props.color.toRgb(),\n            r = _props$color$toRgb.r,\n            g = _props$color$toRgb.g,\n            b = _props$color$toRgb.b;\n\n        return \"linear-gradient(to right, rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", 0) 0%, rgba(\").concat(r, \", \").concat(g, \", \").concat(b, \", 1) 100%)\");\n      }\n\n      return null;\n    }\n\n    function handleClick(event) {\n      var target = event.target;\n\n      if (target !== thumb.value) {\n        handleDrag(event);\n      }\n    }\n\n    function handleDrag(event) {\n      var el = instance.vnode.el;\n      var rect = el.getBoundingClientRect();\n\n      var _getClientXY = getClientXY(event),\n          clientX = _getClientXY.clientX,\n          clientY = _getClientXY.clientY;\n\n      if (!props.vertical) {\n        var left = clientX - rect.left;\n        left = Math.max(thumb.value.offsetWidth / 2, left);\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);\n        props.color.set(\"alpha\", Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 100));\n      } else {\n        var top = clientY - rect.top;\n        top = Math.max(thumb.value.offsetHeight / 2, top);\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);\n        props.color.set(\"alpha\", Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 100));\n      }\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft();\n      thumbTop.value = getThumbTop();\n      background.value = getBackground();\n    }\n\n    onMounted(function () {\n      var dragConfig = {\n        drag: function drag(event) {\n          handleDrag(event);\n        },\n        end: function end(event) {\n          handleDrag(event);\n        }\n      };\n      draggable(bar.value, dragConfig);\n      draggable(thumb.value, dragConfig);\n      update();\n    });\n    return {\n      thumb: thumb,\n      bar: bar,\n      thumbLeft: thumbLeft,\n      thumbTop: thumbTop,\n      background: background,\n      handleClick: handleClick,\n      update: update,\n      ns: ns\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    \"class\": normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"vertical\", _ctx.vertical)])\n  }, [createElementVNode(\"div\", {\n    ref: \"bar\",\n    \"class\": normalizeClass(_ctx.ns.e(\"bar\")),\n    style: normalizeStyle({\n      background: _ctx.background\n    }),\n    onClick: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);\n    })\n  }, null, 6), createElementVNode(\"div\", {\n    ref: \"thumb\",\n    \"class\": normalizeClass(_ctx.ns.e(\"thumb\")),\n    style: normalizeStyle({\n      left: _ctx.thumbLeft + \"px\",\n      top: _ctx.thumbTop + \"px\"\n    })\n  }, null, 6)], 2);\n}\n\nvar AlphaSlider = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render], [\"__file\", \"/home/runner/work/element-plus/element-plus/packages/components/color-picker/src/components/alpha-slider.vue\"]]);\n\nexport { AlphaSlider as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","color","type","required","vertical","setup","useNamespace","instance","getCurrentInstance","shallowRef","ref","watch","get","update","value","vnode","el","alpha","round","offsetWidth","thumb","offsetHeight","toRgb","r","g","b","event","target","handleDrag","getBoundingClientRect","getClientXY","clientX","clientY","rect","left","Math","max","min","width","set","top","height","thumbLeft","getThumbLeft","thumbTop","getThumbTop","background","getBackground","onMounted","dragConfig","drag","end","draggable","bar","handleClick","ns","_createElementBlock","_normalizeClass","_ctx","is","_createElementVNode","e","style","onClick","_cache"],"sources":["../../../../../../../packages/components/color-picker/src/components/alpha-slider.vue"],"sourcesContent":["<template>\n  <div :class=\"[ns.b(), ns.is('vertical', vertical)]\">\n    <div\n      ref=\"bar\"\n      :class=\"ns.e('bar')\"\n      :style=\"{\n        background,\n      }\"\n      @click=\"handleClick\"\n    />\n    <div\n      ref=\"thumb\"\n      :class=\"ns.e('thumb')\"\n      :style=\"{\n        left: thumbLeft + 'px',\n        top: thumbTop + 'px',\n      }\"\n    />\n  </div>\n</template>\n\n<script lang=\"ts\">\n// @ts-nocheck\nimport {\n  defineComponent,\n  getCurrentInstance,\n  onMounted,\n  ref,\n  shallowRef,\n  watch,\n} from 'vue'\nimport { getClientXY } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'ElColorAlphaSlider',\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n    vertical: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  setup(props) {\n    const ns = useNamespace('color-alpha-slider')\n\n    const instance = getCurrentInstance()\n    // ref\n    const thumb = shallowRef<Nullable<HTMLElement>>(null)\n    const bar = shallowRef<Nullable<HTMLElement>>(null)\n\n    // data\n    const thumbLeft = ref(0)\n    const thumbTop = ref(0)\n    const background = ref<Nullable<string>>(null)\n\n    watch(\n      () => props.color.get('alpha'),\n      () => {\n        update()\n      }\n    )\n    watch(\n      () => props.color.value,\n      () => {\n        update()\n      }\n    )\n\n    //methods\n    function getThumbLeft() {\n      if (props.vertical) return 0\n      const el = instance.vnode.el\n      const alpha = props.color.get('alpha')\n\n      if (!el) return 0\n      return Math.round(\n        (alpha * (el.offsetWidth - thumb.value.offsetWidth / 2)) / 100\n      )\n    }\n\n    function getThumbTop() {\n      const el = instance.vnode.el\n      if (!props.vertical) return 0\n      const alpha = props.color.get('alpha')\n\n      if (!el) return 0\n      return Math.round(\n        (alpha * (el.offsetHeight - thumb.value.offsetHeight / 2)) / 100\n      )\n    }\n\n    function getBackground() {\n      if (props.color && props.color.value) {\n        const { r, g, b } = props.color.toRgb()\n        return `linear-gradient(to right, rgba(${r}, ${g}, ${b}, 0) 0%, rgba(${r}, ${g}, ${b}, 1) 100%)`\n      }\n      return null\n    }\n\n    function handleClick(event: Event) {\n      const target = event.target\n\n      if (target !== thumb.value) {\n        handleDrag(event)\n      }\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el as HTMLElement\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n\n      if (!props.vertical) {\n        let left = clientX - rect.left\n        left = Math.max(thumb.value.offsetWidth / 2, left)\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2)\n\n        props.color.set(\n          'alpha',\n          Math.round(\n            ((left - thumb.value.offsetWidth / 2) /\n              (rect.width - thumb.value.offsetWidth)) *\n              100\n          )\n        )\n      } else {\n        let top = clientY - rect.top\n        top = Math.max(thumb.value.offsetHeight / 2, top)\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2)\n\n        props.color.set(\n          'alpha',\n          Math.round(\n            ((top - thumb.value.offsetHeight / 2) /\n              (rect.height - thumb.value.offsetHeight)) *\n              100\n          )\n        )\n      }\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft()\n      thumbTop.value = getThumbTop()\n      background.value = getBackground()\n    }\n\n    // mounded\n    onMounted(() => {\n      const dragConfig = {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      }\n\n      draggable(bar.value, dragConfig)\n      draggable(thumb.value, dragConfig)\n      update()\n    })\n\n    return {\n      thumb,\n      bar,\n      thumbLeft,\n      thumbTop,\n      background,\n      handleClick,\n      update,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}