{"ast":null,"code":"import _classCallCheck from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/little/Documents/music_web/backandfrontsep/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.is-array.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.some.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport { reactive } from 'vue';\nimport '../../../../utils/index.mjs';\nimport { markNodeData, NODE_KEY } from './util.mjs';\nimport { hasOwn } from '@vue/shared';\n\nvar getChildState = function getChildState(node) {\n  var all = true;\n  var none = true;\n  var allWithoutDisable = true;\n\n  for (var i = 0, j = node.length; i < j; i++) {\n    var n = node[i];\n\n    if (n.checked !== true || n.indeterminate) {\n      all = false;\n\n      if (!n.disabled) {\n        allWithoutDisable = false;\n      }\n    }\n\n    if (n.checked !== false || n.indeterminate) {\n      none = false;\n    }\n  }\n\n  return {\n    all: all,\n    none: none,\n    allWithoutDisable: allWithoutDisable,\n    half: !all && !none\n  };\n};\n\nvar reInitChecked = function reInitChecked(node) {\n  if (node.childNodes.length === 0) return;\n\n  var _getChildState = getChildState(node.childNodes),\n      all = _getChildState.all,\n      none = _getChildState.none,\n      half = _getChildState.half;\n\n  if (all) {\n    node.checked = true;\n    node.indeterminate = false;\n  } else if (half) {\n    node.checked = false;\n    node.indeterminate = true;\n  } else if (none) {\n    node.checked = false;\n    node.indeterminate = false;\n  }\n\n  var parent = node.parent;\n  if (!parent || parent.level === 0) return;\n\n  if (!node.store.checkStrictly) {\n    reInitChecked(parent);\n  }\n};\n\nvar getPropertyFromData = function getPropertyFromData(node, prop) {\n  var props = node.store.props;\n  var data = node.data || {};\n  var config = props[prop];\n\n  if (typeof config === \"function\") {\n    return config(data, node);\n  } else if (typeof config === \"string\") {\n    return data[config];\n  } else if (typeof config === \"undefined\") {\n    var dataProp = data[prop];\n    return dataProp === void 0 ? \"\" : dataProp;\n  }\n};\n\nvar nodeIdSeed = 0;\n\nvar Node = /*#__PURE__*/function () {\n  function Node(options) {\n    _classCallCheck(this, Node);\n\n    this.id = nodeIdSeed++;\n    this.text = null;\n    this.checked = false;\n    this.indeterminate = false;\n    this.data = null;\n    this.expanded = false;\n    this.parent = null;\n    this.visible = true;\n    this.isCurrent = false;\n    this.canFocus = false;\n\n    for (var name in options) {\n      if (hasOwn(options, name)) {\n        this[name] = options[name];\n      }\n    }\n\n    this.level = 0;\n    this.loaded = false;\n    this.childNodes = [];\n    this.loading = false;\n\n    if (this.parent) {\n      this.level = this.parent.level + 1;\n    }\n  }\n\n  _createClass(Node, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var store = this.store;\n\n      if (!store) {\n        throw new Error(\"[Node]store is required!\");\n      }\n\n      store.registerNode(this);\n      var props = store.props;\n\n      if (props && typeof props.isLeaf !== \"undefined\") {\n        var isLeaf = getPropertyFromData(this, \"isLeaf\");\n\n        if (typeof isLeaf === \"boolean\") {\n          this.isLeafByUser = isLeaf;\n        }\n      }\n\n      if (store.lazy !== true && this.data) {\n        this.setData(this.data);\n\n        if (store.defaultExpandAll) {\n          this.expanded = true;\n          this.canFocus = true;\n        }\n      } else if (this.level > 0 && store.lazy && store.defaultExpandAll) {\n        this.expand();\n      }\n\n      if (!Array.isArray(this.data)) {\n        markNodeData(this, this.data);\n      }\n\n      if (!this.data) return;\n      var defaultExpandedKeys = store.defaultExpandedKeys;\n      var key = store.key;\n\n      if (key && defaultExpandedKeys && defaultExpandedKeys.includes(this.key)) {\n        this.expand(null, store.autoExpandParent);\n      }\n\n      if (key && store.currentNodeKey !== void 0 && this.key === store.currentNodeKey) {\n        store.currentNode = this;\n        store.currentNode.isCurrent = true;\n      }\n\n      if (store.lazy) {\n        store._initDefaultCheckedNode(this);\n      }\n\n      this.updateLeafState();\n      if (this.parent && (this.level === 1 || this.parent.expanded === true)) this.canFocus = true;\n    }\n  }, {\n    key: \"setData\",\n    value: function setData(data) {\n      if (!Array.isArray(data)) {\n        markNodeData(this, data);\n      }\n\n      this.data = data;\n      this.childNodes = [];\n      var children;\n\n      if (this.level === 0 && Array.isArray(this.data)) {\n        children = this.data;\n      } else {\n        children = getPropertyFromData(this, \"children\") || [];\n      }\n\n      for (var i = 0, j = children.length; i < j; i++) {\n        this.insertChild({\n          data: children[i]\n        });\n      }\n    }\n  }, {\n    key: \"label\",\n    get: function get() {\n      return getPropertyFromData(this, \"label\");\n    }\n  }, {\n    key: \"key\",\n    get: function get() {\n      var nodeKey = this.store.key;\n      if (this.data) return this.data[nodeKey];\n      return null;\n    }\n  }, {\n    key: \"disabled\",\n    get: function get() {\n      return getPropertyFromData(this, \"disabled\");\n    }\n  }, {\n    key: \"nextSibling\",\n    get: function get() {\n      var parent = this.parent;\n\n      if (parent) {\n        var index = parent.childNodes.indexOf(this);\n\n        if (index > -1) {\n          return parent.childNodes[index + 1];\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"previousSibling\",\n    get: function get() {\n      var parent = this.parent;\n\n      if (parent) {\n        var index = parent.childNodes.indexOf(this);\n\n        if (index > -1) {\n          return index > 0 ? parent.childNodes[index - 1] : null;\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"contains\",\n    value: function contains(target) {\n      var deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      return (this.childNodes || []).some(function (child) {\n        return child === target || deep && child.contains(target);\n      });\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var parent = this.parent;\n\n      if (parent) {\n        parent.removeChild(this);\n      }\n    }\n  }, {\n    key: \"insertChild\",\n    value: function insertChild(child, index, batch) {\n      if (!child) throw new Error(\"InsertChild error: child is required.\");\n\n      if (!(child instanceof Node)) {\n        if (!batch) {\n          var children = this.getChildren(true);\n\n          if (!children.includes(child.data)) {\n            if (typeof index === \"undefined\" || index < 0) {\n              children.push(child.data);\n            } else {\n              children.splice(index, 0, child.data);\n            }\n          }\n        }\n\n        Object.assign(child, {\n          parent: this,\n          store: this.store\n        });\n        child = reactive(new Node(child));\n\n        if (child instanceof Node) {\n          child.initialize();\n        }\n      }\n\n      ;\n      child.level = this.level + 1;\n\n      if (typeof index === \"undefined\" || index < 0) {\n        this.childNodes.push(child);\n      } else {\n        this.childNodes.splice(index, 0, child);\n      }\n\n      this.updateLeafState();\n    }\n  }, {\n    key: \"insertBefore\",\n    value: function insertBefore(child, ref) {\n      var index;\n\n      if (ref) {\n        index = this.childNodes.indexOf(ref);\n      }\n\n      this.insertChild(child, index);\n    }\n  }, {\n    key: \"insertAfter\",\n    value: function insertAfter(child, ref) {\n      var index;\n\n      if (ref) {\n        index = this.childNodes.indexOf(ref);\n        if (index !== -1) index += 1;\n      }\n\n      this.insertChild(child, index);\n    }\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(child) {\n      var children = this.getChildren() || [];\n      var dataIndex = children.indexOf(child.data);\n\n      if (dataIndex > -1) {\n        children.splice(dataIndex, 1);\n      }\n\n      var index = this.childNodes.indexOf(child);\n\n      if (index > -1) {\n        this.store && this.store.deregisterNode(child);\n        child.parent = null;\n        this.childNodes.splice(index, 1);\n      }\n\n      this.updateLeafState();\n    }\n  }, {\n    key: \"removeChildByData\",\n    value: function removeChildByData(data) {\n      var targetNode = null;\n\n      for (var i = 0; i < this.childNodes.length; i++) {\n        if (this.childNodes[i].data === data) {\n          targetNode = this.childNodes[i];\n          break;\n        }\n      }\n\n      if (targetNode) {\n        this.removeChild(targetNode);\n      }\n    }\n  }, {\n    key: \"expand\",\n    value: function expand(callback, expandParent) {\n      var _this = this;\n\n      var done = function done() {\n        if (expandParent) {\n          var parent = _this.parent;\n\n          while (parent.level > 0) {\n            parent.expanded = true;\n            parent = parent.parent;\n          }\n        }\n\n        _this.expanded = true;\n        if (callback) callback();\n\n        _this.childNodes.forEach(function (item) {\n          item.canFocus = true;\n        });\n      };\n\n      if (this.shouldLoadData()) {\n        this.loadData(function (data) {\n          if (Array.isArray(data)) {\n            if (_this.checked) {\n              _this.setChecked(true, true);\n            } else if (!_this.store.checkStrictly) {\n              reInitChecked(_this);\n            }\n\n            done();\n          }\n        });\n      } else {\n        done();\n      }\n    }\n  }, {\n    key: \"doCreateChildren\",\n    value: function doCreateChildren(array) {\n      var _this2 = this;\n\n      var defaultProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      array.forEach(function (item) {\n        _this2.insertChild(Object.assign({\n          data: item\n        }, defaultProps), void 0, true);\n      });\n    }\n  }, {\n    key: \"collapse\",\n    value: function collapse() {\n      this.expanded = false;\n      this.childNodes.forEach(function (item) {\n        item.canFocus = false;\n      });\n    }\n  }, {\n    key: \"shouldLoadData\",\n    value: function shouldLoadData() {\n      return this.store.lazy === true && this.store.load && !this.loaded;\n    }\n  }, {\n    key: \"updateLeafState\",\n    value: function updateLeafState() {\n      if (this.store.lazy === true && this.loaded !== true && typeof this.isLeafByUser !== \"undefined\") {\n        this.isLeaf = this.isLeafByUser;\n        return;\n      }\n\n      var childNodes = this.childNodes;\n\n      if (!this.store.lazy || this.store.lazy === true && this.loaded === true) {\n        this.isLeaf = !childNodes || childNodes.length === 0;\n        return;\n      }\n\n      this.isLeaf = false;\n    }\n  }, {\n    key: \"setChecked\",\n    value: function setChecked(value, deep, recursion, passValue) {\n      var _this3 = this;\n\n      this.indeterminate = value === \"half\";\n      this.checked = value === true;\n      if (this.store.checkStrictly) return;\n\n      if (!(this.shouldLoadData() && !this.store.checkDescendants)) {\n        var _getChildState2 = getChildState(this.childNodes),\n            all = _getChildState2.all,\n            allWithoutDisable = _getChildState2.allWithoutDisable;\n\n        if (!this.isLeaf && !all && allWithoutDisable) {\n          this.checked = false;\n          value = false;\n        }\n\n        var handleDescendants = function handleDescendants() {\n          if (deep) {\n            var childNodes = _this3.childNodes;\n\n            for (var i = 0, j = childNodes.length; i < j; i++) {\n              var child = childNodes[i];\n              passValue = passValue || value !== false;\n              var isCheck = child.disabled ? child.checked : passValue;\n              child.setChecked(isCheck, deep, true, passValue);\n            }\n\n            var _getChildState3 = getChildState(childNodes),\n                half = _getChildState3.half,\n                all2 = _getChildState3.all;\n\n            if (!all2) {\n              _this3.checked = all2;\n              _this3.indeterminate = half;\n            }\n          }\n        };\n\n        if (this.shouldLoadData()) {\n          this.loadData(function () {\n            handleDescendants();\n            reInitChecked(_this3);\n          }, {\n            checked: value !== false\n          });\n          return;\n        } else {\n          handleDescendants();\n        }\n      }\n\n      var parent = this.parent;\n      if (!parent || parent.level === 0) return;\n\n      if (!recursion) {\n        reInitChecked(parent);\n      }\n    }\n  }, {\n    key: \"getChildren\",\n    value: function getChildren() {\n      var forceInit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (this.level === 0) return this.data;\n      var data = this.data;\n      if (!data) return null;\n      var props = this.store.props;\n      var children = \"children\";\n\n      if (props) {\n        children = props.children || \"children\";\n      }\n\n      if (data[children] === void 0) {\n        data[children] = null;\n      }\n\n      if (forceInit && !data[children]) {\n        data[children] = [];\n      }\n\n      return data[children];\n    }\n  }, {\n    key: \"updateChildren\",\n    value: function updateChildren() {\n      var _this4 = this;\n\n      var newData = this.getChildren() || [];\n      var oldData = this.childNodes.map(function (node) {\n        return node.data;\n      });\n      var newDataMap = {};\n      var newNodes = [];\n      newData.forEach(function (item, index) {\n        var key = item[NODE_KEY];\n        var isNodeExists = !!key && oldData.findIndex(function (data) {\n          return data[NODE_KEY] === key;\n        }) >= 0;\n\n        if (isNodeExists) {\n          newDataMap[key] = {\n            index: index,\n            data: item\n          };\n        } else {\n          newNodes.push({\n            index: index,\n            data: item\n          });\n        }\n      });\n\n      if (!this.store.lazy) {\n        oldData.forEach(function (item) {\n          if (!newDataMap[item[NODE_KEY]]) _this4.removeChildByData(item);\n        });\n      }\n\n      newNodes.forEach(function (_ref) {\n        var index = _ref.index,\n            data = _ref.data;\n\n        _this4.insertChild({\n          data: data\n        }, index);\n      });\n      this.updateLeafState();\n    }\n  }, {\n    key: \"loadData\",\n    value: function loadData(callback) {\n      var _this5 = this;\n\n      var defaultProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (this.store.lazy === true && this.store.load && !this.loaded && (!this.loading || Object.keys(defaultProps).length)) {\n        this.loading = true;\n\n        var resolve = function resolve(children) {\n          _this5.loaded = true;\n          _this5.loading = false;\n          _this5.childNodes = [];\n\n          _this5.doCreateChildren(children, defaultProps);\n\n          _this5.updateLeafState();\n\n          if (callback) {\n            callback.call(_this5, children);\n          }\n        };\n\n        this.store.load(this, resolve);\n      } else {\n        if (callback) {\n          callback.call(this);\n        }\n      }\n    }\n  }]);\n\n  return Node;\n}();\n\nexport { Node as default, getChildState };","map":{"version":3,"mappings":"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","names":["getChildState","node","all","none","allWithoutDisable","i","j","length","n","checked","indeterminate","disabled","half","reInitChecked","childNodes","parent","level","store","checkStrictly","getPropertyFromData","prop","props","data","config","dataProp","nodeIdSeed","Node","options","id","text","expanded","visible","isCurrent","canFocus","name","hasOwn","loaded","loading","Error","registerNode","isLeaf","isLeafByUser","lazy","setData","defaultExpandAll","expand","Array","isArray","markNodeData","defaultExpandedKeys","key","includes","autoExpandParent","currentNodeKey","currentNode","_initDefaultCheckedNode","updateLeafState","children","insertChild","nodeKey","index","indexOf","target","deep","some","child","contains","removeChild","batch","getChildren","push","splice","Object","assign","reactive","initialize","ref","dataIndex","deregisterNode","targetNode","callback","expandParent","done","forEach","item","shouldLoadData","loadData","setChecked","array","defaultProps","load","value","recursion","passValue","checkDescendants","handleDescendants","isCheck","all2","forceInit","newData","oldData","map","newDataMap","newNodes","NODE_KEY","isNodeExists","findIndex","removeChildByData","keys","resolve","doCreateChildren","call"],"sources":["../../../../../../../packages/components/tree/src/model/node.ts"],"sourcesContent":["// @ts-nocheck\nimport { reactive } from 'vue'\nimport { hasOwn } from '@element-plus/utils'\nimport { NODE_KEY, markNodeData } from './util'\nimport type TreeStore from './tree-store'\n\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  FakeNode,\n  TreeKey,\n  TreeNodeChildState,\n  TreeNodeData,\n  TreeNodeLoadedDefaultProps,\n  TreeNodeOptions,\n} from '../tree.type'\n\nexport const getChildState = (node: Node[]): TreeNodeChildState => {\n  let all = true\n  let none = true\n  let allWithoutDisable = true\n  for (let i = 0, j = node.length; i < j; i++) {\n    const n = node[i]\n    if (n.checked !== true || n.indeterminate) {\n      all = false\n      if (!n.disabled) {\n        allWithoutDisable = false\n      }\n    }\n    if (n.checked !== false || n.indeterminate) {\n      none = false\n    }\n  }\n\n  return { all, none, allWithoutDisable, half: !all && !none }\n}\n\nconst reInitChecked = function (node: Node): void {\n  if (node.childNodes.length === 0) return\n\n  const { all, none, half } = getChildState(node.childNodes)\n  if (all) {\n    node.checked = true\n    node.indeterminate = false\n  } else if (half) {\n    node.checked = false\n    node.indeterminate = true\n  } else if (none) {\n    node.checked = false\n    node.indeterminate = false\n  }\n\n  const parent = node.parent\n  if (!parent || parent.level === 0) return\n\n  if (!node.store.checkStrictly) {\n    reInitChecked(parent)\n  }\n}\n\nconst getPropertyFromData = function (node: Node, prop: string): any {\n  const props = node.store.props\n  const data = node.data || {}\n  const config = props[prop]\n\n  if (typeof config === 'function') {\n    return config(data, node)\n  } else if (typeof config === 'string') {\n    return data[config]\n  } else if (typeof config === 'undefined') {\n    const dataProp = data[prop]\n    return dataProp === undefined ? '' : dataProp\n  }\n}\n\nlet nodeIdSeed = 0\n\nclass Node {\n  id: number\n  text: string\n  checked: boolean\n  indeterminate: boolean\n  data: TreeNodeData\n  expanded: boolean\n  parent: Node\n  visible: boolean\n  isCurrent: boolean\n  store: TreeStore\n  isLeafByUser: boolean\n  isLeaf: boolean\n  canFocus: boolean\n\n  level: number\n  loaded: boolean\n  childNodes: Node[]\n  loading: boolean\n\n  constructor(options: TreeNodeOptions) {\n    this.id = nodeIdSeed++\n    this.text = null\n    this.checked = false\n    this.indeterminate = false\n    this.data = null\n    this.expanded = false\n    this.parent = null\n    this.visible = true\n    this.isCurrent = false\n    this.canFocus = false\n\n    for (const name in options) {\n      if (hasOwn(options, name)) {\n        this[name] = options[name]\n      }\n    }\n\n    // internal\n    this.level = 0\n    this.loaded = false\n    this.childNodes = []\n    this.loading = false\n\n    if (this.parent) {\n      this.level = this.parent.level + 1\n    }\n  }\n\n  initialize() {\n    const store = this.store\n    if (!store) {\n      throw new Error('[Node]store is required!')\n    }\n    store.registerNode(this)\n\n    const props = store.props\n    if (props && typeof props.isLeaf !== 'undefined') {\n      const isLeaf = getPropertyFromData(this, 'isLeaf')\n      if (typeof isLeaf === 'boolean') {\n        this.isLeafByUser = isLeaf\n      }\n    }\n\n    if (store.lazy !== true && this.data) {\n      this.setData(this.data)\n\n      if (store.defaultExpandAll) {\n        this.expanded = true\n        this.canFocus = true\n      }\n    } else if (this.level > 0 && store.lazy && store.defaultExpandAll) {\n      this.expand()\n    }\n    if (!Array.isArray(this.data)) {\n      markNodeData(this, this.data)\n    }\n    if (!this.data) return\n\n    const defaultExpandedKeys = store.defaultExpandedKeys\n    const key = store.key\n\n    if (key && defaultExpandedKeys && defaultExpandedKeys.includes(this.key)) {\n      this.expand(null, store.autoExpandParent)\n    }\n\n    if (\n      key &&\n      store.currentNodeKey !== undefined &&\n      this.key === store.currentNodeKey\n    ) {\n      store.currentNode = this\n      store.currentNode.isCurrent = true\n    }\n\n    if (store.lazy) {\n      store._initDefaultCheckedNode(this)\n    }\n\n    this.updateLeafState()\n    if (this.parent && (this.level === 1 || this.parent.expanded === true))\n      this.canFocus = true\n  }\n\n  setData(data: TreeNodeData): void {\n    if (!Array.isArray(data)) {\n      markNodeData(this, data)\n    }\n\n    this.data = data\n    this.childNodes = []\n\n    let children\n    if (this.level === 0 && Array.isArray(this.data)) {\n      children = this.data\n    } else {\n      children = getPropertyFromData(this, 'children') || []\n    }\n\n    for (let i = 0, j = children.length; i < j; i++) {\n      this.insertChild({ data: children[i] })\n    }\n  }\n\n  get label(): string {\n    return getPropertyFromData(this, 'label')\n  }\n\n  get key(): TreeKey {\n    const nodeKey = this.store.key\n    if (this.data) return this.data[nodeKey]\n    return null\n  }\n\n  get disabled(): boolean {\n    return getPropertyFromData(this, 'disabled')\n  }\n\n  get nextSibling(): Nullable<Node> {\n    const parent = this.parent\n    if (parent) {\n      const index = parent.childNodes.indexOf(this)\n      if (index > -1) {\n        return parent.childNodes[index + 1]\n      }\n    }\n    return null\n  }\n\n  get previousSibling(): Nullable<Node> {\n    const parent = this.parent\n    if (parent) {\n      const index = parent.childNodes.indexOf(this)\n      if (index > -1) {\n        return index > 0 ? parent.childNodes[index - 1] : null\n      }\n    }\n    return null\n  }\n\n  contains(target: Node, deep = true): boolean {\n    return (this.childNodes || []).some(\n      (child) => child === target || (deep && child.contains(target))\n    )\n  }\n\n  remove(): void {\n    const parent = this.parent\n    if (parent) {\n      parent.removeChild(this)\n    }\n  }\n\n  insertChild(child?: FakeNode | Node, index?: number, batch?: boolean): void {\n    if (!child) throw new Error('InsertChild error: child is required.')\n\n    if (!(child instanceof Node)) {\n      if (!batch) {\n        const children = this.getChildren(true)\n        if (!children.includes(child.data)) {\n          if (typeof index === 'undefined' || index < 0) {\n            children.push(child.data)\n          } else {\n            children.splice(index, 0, child.data)\n          }\n        }\n      }\n      Object.assign(child, {\n        parent: this,\n        store: this.store,\n      })\n      child = reactive(new Node(child as TreeNodeOptions))\n      if (child instanceof Node) {\n        child.initialize()\n      }\n    }\n\n    ;(child as Node).level = this.level + 1\n\n    if (typeof index === 'undefined' || index < 0) {\n      this.childNodes.push(child as Node)\n    } else {\n      this.childNodes.splice(index, 0, child as Node)\n    }\n\n    this.updateLeafState()\n  }\n\n  insertBefore(child: FakeNode | Node, ref: Node): void {\n    let index\n    if (ref) {\n      index = this.childNodes.indexOf(ref)\n    }\n    this.insertChild(child, index)\n  }\n\n  insertAfter(child: FakeNode | Node, ref: Node): void {\n    let index\n    if (ref) {\n      index = this.childNodes.indexOf(ref)\n      if (index !== -1) index += 1\n    }\n    this.insertChild(child, index)\n  }\n\n  removeChild(child: Node): void {\n    const children = this.getChildren() || []\n    const dataIndex = children.indexOf(child.data)\n    if (dataIndex > -1) {\n      children.splice(dataIndex, 1)\n    }\n\n    const index = this.childNodes.indexOf(child)\n\n    if (index > -1) {\n      this.store && this.store.deregisterNode(child)\n      child.parent = null\n      this.childNodes.splice(index, 1)\n    }\n\n    this.updateLeafState()\n  }\n\n  removeChildByData(data: TreeNodeData): void {\n    let targetNode: Node = null\n\n    for (let i = 0; i < this.childNodes.length; i++) {\n      if (this.childNodes[i].data === data) {\n        targetNode = this.childNodes[i]\n        break\n      }\n    }\n\n    if (targetNode) {\n      this.removeChild(targetNode)\n    }\n  }\n\n  expand(callback?: () => void, expandParent?: boolean): void {\n    const done = (): void => {\n      if (expandParent) {\n        let parent = this.parent\n        while (parent.level > 0) {\n          parent.expanded = true\n          parent = parent.parent\n        }\n      }\n      this.expanded = true\n      if (callback) callback()\n      this.childNodes.forEach((item) => {\n        item.canFocus = true\n      })\n    }\n\n    if (this.shouldLoadData()) {\n      this.loadData((data) => {\n        if (Array.isArray(data)) {\n          if (this.checked) {\n            this.setChecked(true, true)\n          } else if (!this.store.checkStrictly) {\n            reInitChecked(this)\n          }\n          done()\n        }\n      })\n    } else {\n      done()\n    }\n  }\n\n  doCreateChildren(\n    array: TreeNodeData[],\n    defaultProps: TreeNodeLoadedDefaultProps = {}\n  ): void {\n    array.forEach((item) => {\n      this.insertChild(\n        Object.assign({ data: item }, defaultProps),\n        undefined,\n        true\n      )\n    })\n  }\n\n  collapse(): void {\n    this.expanded = false\n    this.childNodes.forEach((item) => {\n      item.canFocus = false\n    })\n  }\n\n  shouldLoadData(): boolean {\n    return this.store.lazy === true && this.store.load && !this.loaded\n  }\n\n  updateLeafState(): void {\n    if (\n      this.store.lazy === true &&\n      this.loaded !== true &&\n      typeof this.isLeafByUser !== 'undefined'\n    ) {\n      this.isLeaf = this.isLeafByUser\n      return\n    }\n    const childNodes = this.childNodes\n    if (\n      !this.store.lazy ||\n      (this.store.lazy === true && this.loaded === true)\n    ) {\n      this.isLeaf = !childNodes || childNodes.length === 0\n      return\n    }\n    this.isLeaf = false\n  }\n\n  setChecked(\n    value?: boolean | string,\n    deep?: boolean,\n    recursion?: boolean,\n    passValue?: boolean\n  ) {\n    this.indeterminate = value === 'half'\n    this.checked = value === true\n\n    if (this.store.checkStrictly) return\n\n    if (!(this.shouldLoadData() && !this.store.checkDescendants)) {\n      const { all, allWithoutDisable } = getChildState(this.childNodes)\n\n      if (!this.isLeaf && !all && allWithoutDisable) {\n        this.checked = false\n        value = false\n      }\n\n      const handleDescendants = (): void => {\n        if (deep) {\n          const childNodes = this.childNodes\n          for (let i = 0, j = childNodes.length; i < j; i++) {\n            const child = childNodes[i]\n            passValue = passValue || value !== false\n            const isCheck = child.disabled ? child.checked : passValue\n            child.setChecked(isCheck, deep, true, passValue)\n          }\n          const { half, all } = getChildState(childNodes)\n          if (!all) {\n            this.checked = all\n            this.indeterminate = half\n          }\n        }\n      }\n\n      if (this.shouldLoadData()) {\n        // Only work on lazy load data.\n        this.loadData(\n          () => {\n            handleDescendants()\n            reInitChecked(this)\n          },\n          {\n            checked: value !== false,\n          }\n        )\n        return\n      } else {\n        handleDescendants()\n      }\n    }\n\n    const parent = this.parent\n    if (!parent || parent.level === 0) return\n\n    if (!recursion) {\n      reInitChecked(parent)\n    }\n  }\n\n  getChildren(forceInit = false): TreeNodeData | TreeNodeData[] {\n    // this is data\n    if (this.level === 0) return this.data\n    const data = this.data\n    if (!data) return null\n\n    const props = this.store.props\n    let children = 'children'\n    if (props) {\n      children = props.children || 'children'\n    }\n\n    if (data[children] === undefined) {\n      data[children] = null\n    }\n\n    if (forceInit && !data[children]) {\n      data[children] = []\n    }\n\n    return data[children]\n  }\n\n  updateChildren(): void {\n    const newData = (this.getChildren() || []) as TreeNodeData[]\n    const oldData = this.childNodes.map((node) => node.data)\n\n    const newDataMap = {}\n    const newNodes = []\n\n    newData.forEach((item, index) => {\n      const key = item[NODE_KEY]\n      const isNodeExists =\n        !!key && oldData.findIndex((data) => data[NODE_KEY] === key) >= 0\n      if (isNodeExists) {\n        newDataMap[key] = { index, data: item }\n      } else {\n        newNodes.push({ index, data: item })\n      }\n    })\n\n    if (!this.store.lazy) {\n      oldData.forEach((item) => {\n        if (!newDataMap[item[NODE_KEY]]) this.removeChildByData(item)\n      })\n    }\n\n    newNodes.forEach(({ index, data }) => {\n      this.insertChild({ data }, index)\n    })\n\n    this.updateLeafState()\n  }\n\n  loadData(\n    callback: (node: Node) => void,\n    defaultProps: TreeNodeLoadedDefaultProps = {}\n  ) {\n    if (\n      this.store.lazy === true &&\n      this.store.load &&\n      !this.loaded &&\n      (!this.loading || Object.keys(defaultProps).length)\n    ) {\n      this.loading = true\n\n      const resolve = (children) => {\n        this.loaded = true\n        this.loading = false\n        this.childNodes = []\n\n        this.doCreateChildren(children, defaultProps)\n\n        this.updateLeafState()\n        if (callback) {\n          callback.call(this, children)\n        }\n      }\n\n      this.store.load(this, resolve)\n    } else {\n      if (callback) {\n        callback.call(this)\n      }\n    }\n  }\n}\n\nexport default Node\n"]},"metadata":{},"sourceType":"module"}