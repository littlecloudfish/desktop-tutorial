{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.regexp.flags.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\n\n/**\n  * vee-validate v4.7.3\n  * (c) 2022 Abdelrahman Awad\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, warn as warn$1, ref, watch, unref, computed, reactive, onUnmounted, nextTick, onMounted, provide, isRef, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, watchEffect, markRaw } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\n  return typeof fn === 'function';\n}\n\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\n\nconst isObject = obj => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\n\nfunction isIndex(value) {\n  return Number(value) >= 0;\n}\n\nfunction toNumber(value) {\n  const n = parseFloat(value);\n  return isNaN(n) ? value : n;\n}\n\nconst RULES = {};\n/**\r\n * Adds a custom validator to the list of validation rules.\r\n */\n\nfunction defineRule(id, validator) {\n  // makes sure new rules are properly formatted.\n  guardExtend(id, validator);\n  RULES[id] = validator;\n}\n/**\r\n * Gets an already defined rule\r\n */\n\n\nfunction resolveRule(id) {\n  return RULES[id];\n}\n/**\r\n * Guards from extension violations.\r\n */\n\n\nfunction guardExtend(id, validator) {\n  if (isCallable(validator)) {\n    return;\n  }\n\n  throw new Error(`Extension Error: The validator '${id}' must be a function.`);\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\nconst FieldContextKey = Symbol('vee-validate-field-instance');\nconst IS_ABSENT = Symbol('Default empty value');\nconst isClient = typeof window !== 'undefined';\n\nfunction isLocator(value) {\n  return isCallable(value) && !!value.__locatorRef;\n}\n\nfunction isYupValidator(value) {\n  return !!value && isCallable(value.validate);\n}\n\nfunction hasCheckedAttr(type) {\n  return type === 'checkbox' || type === 'radio';\n}\n\nfunction isContainerValue(value) {\n  return isObject(value) || Array.isArray(value);\n}\n/**\r\n * True if the value is an empty object or array\r\n */\n\n\nfunction isEmptyContainer(value) {\n  if (Array.isArray(value)) {\n    return value.length === 0;\n  }\n\n  return isObject(value) && Object.keys(value).length === 0;\n}\n/**\r\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\r\n */\n\n\nfunction isNotNestedPath(path) {\n  return /^\\[.+\\]$/i.test(path);\n}\n/**\r\n * Checks if an element is a native HTML5 multi-select input element\r\n */\n\n\nfunction isNativeMultiSelect(el) {\n  return isNativeSelect(el) && el.multiple;\n}\n/**\r\n * Checks if an element is a native HTML5 select input element\r\n */\n\n\nfunction isNativeSelect(el) {\n  return el.tagName === 'SELECT';\n}\n/**\r\n * Checks if a tag name with attrs object will render a native multi-select element\r\n */\n\n\nfunction isNativeMultiSelectNode(tag, attrs) {\n  // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\n  const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\n  return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\n}\n/**\r\n * Checks if a node should have a `:value` binding or not\r\n *\r\n * These nodes should not have a value binding\r\n * For files, because they are not reactive\r\n * For multi-selects because the value binding will reset the value\r\n */\n\n\nfunction shouldHaveValueBinding(tag, attrs) {\n  return !isNativeMultiSelectNode(tag, attrs) && attrs.type !== 'file' && !hasCheckedAttr(attrs.type);\n}\n\nfunction isFormSubmitEvent(evt) {\n  return isEvent(evt) && evt.target && 'submit' in evt.target;\n}\n\nfunction isEvent(evt) {\n  if (!evt) {\n    return false;\n  }\n\n  if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\n    return true;\n  } // this is for IE and Cypress #3161\n\n  /* istanbul ignore next */\n\n\n  if (evt && evt.srcElement) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction isPropPresent(obj, prop) {\n  return prop in obj && obj[prop] !== IS_ABSENT;\n}\n/**\r\n * Compares if two values are the same borrowed from:\r\n * https://github.com/epoberezkin/fast-deep-equal\r\n * We added a case for file matching since `Object.keys` doesn't work with Files.\r\n * */\n\n\nfunction isEqual(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    if (a.constructor !== b.constructor) return false; // eslint-disable-next-line no-var\n\n    var length, i, keys;\n\n    if (Array.isArray(a)) {\n      length = a.length; // eslint-disable-next-line eqeqeq\n\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) if (!isEqual(a[i], b[i])) return false;\n\n      return true;\n    }\n\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) return false;\n\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n\n      for (i of a.entries()) if (!isEqual(i[1], b.get(i[0]))) return false;\n\n      return true;\n    } // We added this part for file comparison, arguably a little naive but should work for most cases.\n    // #3911\n\n\n    if (isFile(a) && isFile(b)) {\n      if (a.size !== b.size) return false;\n      if (a.name !== b.name) return false;\n      if (a.lastModified !== b.lastModified) return false;\n      if (a.type !== b.type) return false;\n      return true;\n    }\n\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) return false;\n\n      for (i of a.entries()) if (!b.has(i[0])) return false;\n\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      length = a.length; // eslint-disable-next-line eqeqeq\n\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) if (a[i] !== b[i]) return false;\n\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;) if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      // eslint-disable-next-line no-var\n      var key = keys[i];\n      if (!isEqual(a[key], b[key])) return false;\n    }\n\n    return true;\n  } // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n\n\n  return a !== a && b !== b;\n}\n\nfunction isFile(a) {\n  if (!isClient) {\n    return false;\n  }\n\n  return a instanceof File;\n}\n\nfunction set(obj, key, val) {\n  if (typeof val.value === 'object') val.value = klona(val.value);\n\n  if (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n    Object.defineProperty(obj, key, val);\n  } else obj[key] = val.value;\n}\n\nfunction klona(x) {\n  if (typeof x !== 'object') return x;\n  var i = 0,\n      k,\n      list,\n      tmp,\n      str = Object.prototype.toString.call(x);\n\n  if (str === '[object Object]') {\n    tmp = Object.create(x.__proto__ || null);\n  } else if (str === '[object Array]') {\n    tmp = Array(x.length);\n  } else if (str === '[object Set]') {\n    tmp = new Set();\n    x.forEach(function (val) {\n      tmp.add(klona(val));\n    });\n  } else if (str === '[object Map]') {\n    tmp = new Map();\n    x.forEach(function (val, key) {\n      tmp.set(klona(key), klona(val));\n    });\n  } else if (str === '[object Date]') {\n    tmp = new Date(+x);\n  } else if (str === '[object RegExp]') {\n    tmp = new RegExp(x.source, x.flags);\n  } else if (str === '[object DataView]') {\n    tmp = new x.constructor(klona(x.buffer));\n  } else if (str === '[object ArrayBuffer]') {\n    tmp = x.slice(0);\n  } else if (str.slice(-6) === 'Array]') {\n    // ArrayBuffer.isView(x)\n    // ~> `new` bcuz `Buffer.slice` => ref\n    tmp = new x.constructor(x);\n  }\n\n  if (tmp) {\n    for (list = Object.getOwnPropertySymbols(x); i < list.length; i++) {\n      set(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n    }\n\n    for (i = 0, list = Object.getOwnPropertyNames(x); i < list.length; i++) {\n      if (Object.hasOwnProperty.call(tmp, k = list[i]) && tmp[k] === x[k]) continue;\n      set(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n    }\n  }\n\n  return tmp || x;\n}\n\nfunction cleanupNonNestedPath(path) {\n  if (isNotNestedPath(path)) {\n    return path.replace(/\\[|\\]/gi, '');\n  }\n\n  return path;\n}\n\nfunction getFromPath(object, path, fallback) {\n  if (!object) {\n    return fallback;\n  }\n\n  if (isNotNestedPath(path)) {\n    return object[cleanupNonNestedPath(path)];\n  }\n\n  const resolvedValue = (path || '').split(/\\.|\\[(\\d+)\\]/).filter(Boolean).reduce((acc, propKey) => {\n    if (isContainerValue(acc) && propKey in acc) {\n      return acc[propKey];\n    }\n\n    return fallback;\n  }, object);\n  return resolvedValue;\n}\n/**\r\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\r\n */\n\n\nfunction setInPath(object, path, value) {\n  if (isNotNestedPath(path)) {\n    object[cleanupNonNestedPath(path)] = value;\n    return;\n  }\n\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, set it\n    if (i === keys.length - 1) {\n      acc[keys[i]] = value;\n      return;\n    } // Key does not exist, create a container for it\n\n\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      // container can be either an object or an array depending on the next key if it exists\n      acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\n    }\n\n    acc = acc[keys[i]];\n  }\n}\n\nfunction unset(object, key) {\n  if (Array.isArray(object) && isIndex(key)) {\n    object.splice(Number(key), 1);\n    return;\n  }\n\n  if (isObject(object)) {\n    delete object[key];\n  }\n}\n/**\r\n * Removes a nested property from object\r\n */\n\n\nfunction unsetPath(object, path) {\n  if (isNotNestedPath(path)) {\n    delete object[cleanupNonNestedPath(path)];\n    return;\n  }\n\n  const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\n  let acc = object;\n\n  for (let i = 0; i < keys.length; i++) {\n    // Last key, unset it\n    if (i === keys.length - 1) {\n      unset(acc, keys[i]);\n      break;\n    } // Key does not exist, exit\n\n\n    if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\n      break;\n    }\n\n    acc = acc[keys[i]];\n  }\n\n  const pathValues = keys.map((_, idx) => {\n    return getFromPath(object, keys.slice(0, idx).join('.'));\n  });\n\n  for (let i = pathValues.length - 1; i >= 0; i--) {\n    if (!isEmptyContainer(pathValues[i])) {\n      continue;\n    }\n\n    if (i === 0) {\n      unset(object, keys[0]);\n      continue;\n    }\n\n    unset(pathValues[i - 1], keys[i - 1]);\n  }\n}\n/**\r\n * A typed version of Object.keys\r\n */\n\n\nfunction keysOf(record) {\n  return Object.keys(record);\n} // Uses same component provide as its own injections\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\n\n\nfunction injectWithSelf(symbol, def = undefined) {\n  const vm = getCurrentInstance();\n  return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\n}\n\nfunction warn(message) {\n  warn$1(`[vee-validate]: ${message}`);\n}\n/**\r\n * Ensures we deal with a singular field value\r\n */\n\n\nfunction normalizeField(field) {\n  if (Array.isArray(field)) {\n    return field[0];\n  }\n\n  return field;\n}\n\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\n  if (Array.isArray(currentValue)) {\n    const newVal = [...currentValue]; // Use isEqual since checked object values can possibly fail the equality check #3883\n\n    const idx = newVal.findIndex(v => isEqual(v, checkedValue));\n    idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\n    return newVal;\n  }\n\n  return isEqual(currentValue, checkedValue) ? uncheckedValue : checkedValue;\n}\n/**\r\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\r\n * (`limit`)\r\n */\n\n\nfunction throttle(func, limit) {\n  let inThrottle;\n  let lastResult;\n  return function (...args) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const context = this;\n\n    if (!inThrottle) {\n      inThrottle = true;\n      setTimeout(() => inThrottle = false, limit);\n      lastResult = func.apply(context, args);\n    }\n\n    return lastResult;\n  };\n}\n\nfunction debounceAsync(inner, ms = 0) {\n  let timer = null;\n  let resolves = [];\n  return function (...args) {\n    // Run the function after a certain amount of time\n    if (timer) {\n      window.clearTimeout(timer);\n    }\n\n    timer = window.setTimeout(() => {\n      // Get the result of the inner function, then apply it to the resolve function of\n      // each promise that has been created since the last time the inner function was run\n      const result = inner(...args);\n      resolves.forEach(r => r(result));\n      resolves = [];\n    }, ms);\n    return new Promise(resolve => resolves.push(resolve));\n  };\n}\n\nfunction applyModelModifiers(value, modifiers) {\n  if (!isObject(modifiers)) {\n    return value;\n  }\n\n  if (modifiers.number) {\n    return toNumber(value);\n  }\n\n  return value;\n}\n\nfunction withLatest(fn, onDone) {\n  let latestRun;\n  return async function runLatest(...args) {\n    const pending = fn(...args);\n    latestRun = pending;\n    const result = await pending;\n\n    if (pending !== latestRun) {\n      return result;\n    }\n\n    latestRun = undefined;\n    onDone(result, args);\n    return result;\n  };\n}\n\nfunction computedDeep({\n  get,\n  set\n}) {\n  const baseRef = ref(klona(get()));\n  watch(get, newValue => {\n    if (isEqual(newValue, baseRef.value)) {\n      return;\n    }\n\n    baseRef.value = klona(newValue);\n  }, {\n    deep: true\n  });\n  watch(baseRef, newValue => {\n    if (isEqual(newValue, get())) {\n      return;\n    }\n\n    set(klona(newValue));\n  }, {\n    deep: true\n  });\n  return baseRef;\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nconst normalizeChildren = (tag, context, slotProps) => {\n  if (!context.slots.default) {\n    return context.slots.default;\n  }\n\n  if (typeof tag === 'string' || !tag) {\n    return context.slots.default(slotProps());\n  }\n\n  return {\n    default: () => {\n      var _a, _b;\n\n      return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps());\n    }\n  };\n};\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\n\n\nfunction getBoundValue(el) {\n  if (hasValueBinding(el)) {\n    return el._value;\n  }\n\n  return undefined;\n}\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\n\n\nfunction hasValueBinding(el) {\n  return '_value' in el;\n}\n\nfunction normalizeEventValue(value) {\n  if (!isEvent(value)) {\n    return value;\n  }\n\n  const input = value.target; // Vue sets the current bound value on `_value` prop\n  // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\n\n  if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\n    return getBoundValue(input);\n  }\n\n  if (input.type === 'file' && input.files) {\n    const files = Array.from(input.files);\n    return input.multiple ? files : files[0];\n  }\n\n  if (isNativeMultiSelect(input)) {\n    return Array.from(input.options).filter(opt => opt.selected && !opt.disabled).map(getBoundValue);\n  } // makes sure we get the actual `option` bound value\n  // #3440\n\n\n  if (isNativeSelect(input)) {\n    const selectedOption = Array.from(input.options).find(opt => opt.selected);\n    return selectedOption ? getBoundValue(selectedOption) : input.value;\n  }\n\n  return input.value;\n}\n/**\r\n * Normalizes the given rules expression.\r\n */\n\n\nfunction normalizeRules(rules) {\n  const acc = {};\n  Object.defineProperty(acc, '_$$isNormalized', {\n    value: true,\n    writable: false,\n    enumerable: false,\n    configurable: false\n  });\n\n  if (!rules) {\n    return acc;\n  } // Object is already normalized, skip.\n\n\n  if (isObject(rules) && rules._$$isNormalized) {\n    return rules;\n  }\n\n  if (isObject(rules)) {\n    return Object.keys(rules).reduce((prev, curr) => {\n      const params = normalizeParams(rules[curr]);\n\n      if (rules[curr] !== false) {\n        prev[curr] = buildParams(params);\n      }\n\n      return prev;\n    }, acc);\n  }\n  /* istanbul ignore if */\n\n\n  if (typeof rules !== 'string') {\n    return acc;\n  }\n\n  return rules.split('|').reduce((prev, rule) => {\n    const parsedRule = parseRule(rule);\n\n    if (!parsedRule.name) {\n      return prev;\n    }\n\n    prev[parsedRule.name] = buildParams(parsedRule.params);\n    return prev;\n  }, acc);\n}\n/**\r\n * Normalizes a rule param.\r\n */\n\n\nfunction normalizeParams(params) {\n  if (params === true) {\n    return [];\n  }\n\n  if (Array.isArray(params)) {\n    return params;\n  }\n\n  if (isObject(params)) {\n    return params;\n  }\n\n  return [params];\n}\n\nfunction buildParams(provided) {\n  const mapValueToLocator = value => {\n    // A target param using interpolation\n    if (typeof value === 'string' && value[0] === '@') {\n      return createLocator(value.slice(1));\n    }\n\n    return value;\n  };\n\n  if (Array.isArray(provided)) {\n    return provided.map(mapValueToLocator);\n  } // #3073\n\n\n  if (provided instanceof RegExp) {\n    return [provided];\n  }\n\n  return Object.keys(provided).reduce((prev, key) => {\n    prev[key] = mapValueToLocator(provided[key]);\n    return prev;\n  }, {});\n}\n/**\r\n * Parses a rule string expression.\r\n */\n\n\nconst parseRule = rule => {\n  let params = [];\n  const name = rule.split(':')[0];\n\n  if (rule.includes(':')) {\n    params = rule.split(':').slice(1).join(':').split(',');\n  }\n\n  return {\n    name,\n    params\n  };\n};\n\nfunction createLocator(value) {\n  const locator = crossTable => {\n    const val = getFromPath(crossTable, value) || crossTable[value];\n    return val;\n  };\n\n  locator.__locatorRef = value;\n  return locator;\n}\n\nfunction extractLocators(params) {\n  if (Array.isArray(params)) {\n    return params.filter(isLocator);\n  }\n\n  return keysOf(params).filter(key => isLocator(params[key])).map(key => params[key]);\n}\n\nconst DEFAULT_CONFIG = {\n  generateMessage: ({\n    field\n  }) => `${field} is not valid.`,\n  bails: true,\n  validateOnBlur: true,\n  validateOnChange: true,\n  validateOnInput: false,\n  validateOnModelUpdate: true\n};\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\n\nconst getConfig = () => currentConfig;\n\nconst setConfig = newConf => {\n  currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\n};\n\nconst configure = setConfig;\n/**\r\n * Validates a value against the rules.\r\n */\n\nasync function validate(value, rules, options = {}) {\n  const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\n  const field = {\n    name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\n    rules,\n    bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\n    formData: (options === null || options === void 0 ? void 0 : options.values) || {}\n  };\n  const result = await _validate(field, value);\n  const errors = result.errors;\n  return {\n    errors,\n    valid: !errors.length\n  };\n}\n/**\r\n * Starts the validation process.\r\n */\n\n\nasync function _validate(field, value) {\n  if (isYupValidator(field.rules)) {\n    return validateFieldWithYup(value, field.rules, {\n      bails: field.bails\n    });\n  } // if a generic function or chain of generic functions\n\n\n  if (isCallable(field.rules) || Array.isArray(field.rules)) {\n    const ctx = {\n      field: field.name,\n      form: field.formData,\n      value: value\n    }; // Normalize the pipeline\n\n    const pipeline = Array.isArray(field.rules) ? field.rules : [field.rules];\n    const length = pipeline.length;\n    const errors = [];\n\n    for (let i = 0; i < length; i++) {\n      const rule = pipeline[i];\n      const result = await rule(value, ctx);\n      const isValid = typeof result !== 'string' && result;\n\n      if (isValid) {\n        continue;\n      }\n\n      const message = typeof result === 'string' ? result : _generateFieldError(ctx);\n      errors.push(message);\n\n      if (field.bails) {\n        return {\n          errors\n        };\n      }\n    }\n\n    return {\n      errors\n    };\n  }\n\n  const normalizedContext = Object.assign(Object.assign({}, field), {\n    rules: normalizeRules(field.rules)\n  });\n  const errors = [];\n  const rulesKeys = Object.keys(normalizedContext.rules);\n  const length = rulesKeys.length;\n\n  for (let i = 0; i < length; i++) {\n    const rule = rulesKeys[i];\n    const result = await _test(normalizedContext, value, {\n      name: rule,\n      params: normalizedContext.rules[rule]\n    });\n\n    if (result.error) {\n      errors.push(result.error);\n\n      if (field.bails) {\n        return {\n          errors\n        };\n      }\n    }\n  }\n\n  return {\n    errors\n  };\n}\n/**\r\n * Handles yup validation\r\n */\n\n\nasync function validateFieldWithYup(value, validator, opts) {\n  var _a;\n\n  const errors = await validator.validate(value, {\n    abortEarly: (_a = opts.bails) !== null && _a !== void 0 ? _a : true\n  }).then(() => []).catch(err => {\n    // Yup errors have a name prop one them.\n    // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n    if (err.name === 'ValidationError') {\n      return err.errors;\n    } // re-throw the error so we don't hide it\n\n\n    throw err;\n  });\n  return {\n    errors\n  };\n}\n/**\r\n * Tests a single input value against a rule.\r\n */\n\n\nasync function _test(field, value, rule) {\n  const validator = resolveRule(rule.name);\n\n  if (!validator) {\n    throw new Error(`No such validator '${rule.name}' exists.`);\n  }\n\n  const params = fillTargetValues(rule.params, field.formData);\n  const ctx = {\n    field: field.name,\n    value,\n    form: field.formData,\n    rule: Object.assign(Object.assign({}, rule), {\n      params\n    })\n  };\n  const result = await validator(value, params, ctx);\n\n  if (typeof result === 'string') {\n    return {\n      error: result\n    };\n  }\n\n  return {\n    error: result ? undefined : _generateFieldError(ctx)\n  };\n}\n/**\r\n * Generates error messages.\r\n */\n\n\nfunction _generateFieldError(fieldCtx) {\n  const message = getConfig().generateMessage;\n\n  if (!message) {\n    return 'Field is invalid';\n  }\n\n  return message(fieldCtx);\n}\n\nfunction fillTargetValues(params, crossTable) {\n  const normalize = value => {\n    if (isLocator(value)) {\n      return value(crossTable);\n    }\n\n    return value;\n  };\n\n  if (Array.isArray(params)) {\n    return params.map(normalize);\n  }\n\n  return Object.keys(params).reduce((acc, param) => {\n    acc[param] = normalize(params[param]);\n    return acc;\n  }, {});\n}\n\nasync function validateYupSchema(schema, values) {\n  const errorObjects = await schema.validate(values, {\n    abortEarly: false\n  }).then(() => []).catch(err => {\n    // Yup errors have a name prop one them.\n    // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\n    if (err.name !== 'ValidationError') {\n      throw err;\n    } // list of aggregated errors\n\n\n    return err.inner || [];\n  });\n  const results = {};\n  const errors = {};\n\n  for (const error of errorObjects) {\n    const messages = error.errors;\n    results[error.path] = {\n      valid: !messages.length,\n      errors: messages\n    };\n\n    if (messages.length) {\n      errors[error.path] = messages[0];\n    }\n  }\n\n  return {\n    valid: !errorObjects.length,\n    results,\n    errors\n  };\n}\n\nasync function validateObjectSchema(schema, values, opts) {\n  const paths = keysOf(schema);\n  const validations = paths.map(async path => {\n    var _a, _b, _c;\n\n    const fieldResult = await validate(getFromPath(values, path), schema[path], {\n      name: ((_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path]) || path,\n      values: values,\n      bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true\n    });\n    return Object.assign(Object.assign({}, fieldResult), {\n      path\n    });\n  });\n  let isAllValid = true;\n  const validationResults = await Promise.all(validations);\n  const results = {};\n  const errors = {};\n\n  for (const result of validationResults) {\n    results[result.path] = {\n      valid: result.valid,\n      errors: result.errors\n    };\n\n    if (!result.valid) {\n      isAllValid = false;\n      errors[result.path] = result.errors[0];\n    }\n  }\n\n  return {\n    valid: isAllValid,\n    results,\n    errors\n  };\n}\n\nlet ID_COUNTER = 0;\n\nfunction useFieldState(path, init) {\n  const {\n    value,\n    initialValue,\n    setInitialValue\n  } = _useFieldValue(path, init.modelValue, init.form);\n\n  const {\n    errorMessage,\n    errors,\n    setErrors\n  } = _useFieldErrors(path, init.form);\n\n  const meta = _useFieldMeta(value, initialValue, errors);\n\n  const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\n\n  function setState(state) {\n    var _a;\n\n    if ('value' in state) {\n      value.value = state.value;\n    }\n\n    if ('errors' in state) {\n      setErrors(state.errors);\n    }\n\n    if ('touched' in state) {\n      meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\n    }\n\n    if ('initialValue' in state) {\n      setInitialValue(state.initialValue);\n    }\n  }\n\n  return {\n    id,\n    path,\n    value,\n    initialValue,\n    meta,\n    errors,\n    errorMessage,\n    setState\n  };\n}\n/**\r\n * Creates the field value and resolves the initial value\r\n */\n\n\nfunction _useFieldValue(path, modelValue, form) {\n  const modelRef = ref(unref(modelValue));\n\n  function resolveInitialValue() {\n    if (!form) {\n      return unref(modelRef);\n    }\n\n    return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\n  }\n\n  function setInitialValue(value) {\n    if (!form) {\n      modelRef.value = value;\n      return;\n    }\n\n    form.stageInitialValue(unref(path), value, true);\n  }\n\n  const initialValue = computed(resolveInitialValue); // if no form is associated, use a regular ref.\n\n  if (!form) {\n    const value = ref(resolveInitialValue());\n    return {\n      value,\n      initialValue,\n      setInitialValue\n    };\n  } // to set the initial value, first check if there is a current value, if there is then use it.\n  // otherwise use the configured initial value if it exists.\n  // prioritize model value over form values\n  // #3429\n\n\n  const currentValue = modelValue ? unref(modelValue) : getFromPath(form.values, unref(path), unref(initialValue));\n  form.stageInitialValue(unref(path), currentValue, true); // otherwise use a computed setter that triggers the `setFieldValue`\n\n  const value = computed({\n    get() {\n      return getFromPath(form.values, unref(path));\n    },\n\n    set(newVal) {\n      form.setFieldValue(unref(path), newVal);\n    }\n\n  });\n  return {\n    value,\n    initialValue,\n    setInitialValue\n  };\n}\n/**\r\n * Creates meta flags state and some associated effects with them\r\n */\n\n\nfunction _useFieldMeta(currentValue, initialValue, errors) {\n  const meta = reactive({\n    touched: false,\n    pending: false,\n    valid: true,\n    validated: !!unref(errors).length,\n    initialValue: computed(() => unref(initialValue)),\n    dirty: computed(() => {\n      return !isEqual(unref(currentValue), unref(initialValue));\n    })\n  });\n  watch(errors, value => {\n    meta.valid = !value.length;\n  }, {\n    immediate: true,\n    flush: 'sync'\n  });\n  return meta;\n}\n/**\r\n * Creates the error message state for the field state\r\n */\n\n\nfunction _useFieldErrors(path, form) {\n  function normalizeErrors(messages) {\n    if (!messages) {\n      return [];\n    }\n\n    return Array.isArray(messages) ? messages : [messages];\n  }\n\n  if (!form) {\n    const errors = ref([]);\n    return {\n      errors,\n      errorMessage: computed(() => errors.value[0]),\n      setErrors: messages => {\n        errors.value = normalizeErrors(messages);\n      }\n    };\n  }\n\n  const errors = computed(() => form.errorBag.value[unref(path)] || []);\n  return {\n    errors,\n    errorMessage: computed(() => errors.value[0]),\n    setErrors: messages => {\n      form.setFieldErrorBag(unref(path), normalizeErrors(messages));\n    }\n  };\n}\n\nfunction installDevtoolsPlugin(app) {\n  if (process.env.NODE_ENV !== 'production') {\n    setupDevtoolsPlugin({\n      id: 'vee-validate-devtools-plugin',\n      label: 'VeeValidate Plugin',\n      packageName: 'vee-validate',\n      homepage: 'https://vee-validate.logaretm.com/v4',\n      app,\n      logo: 'https://vee-validate.logaretm.com/v4/logo.png'\n    }, setupApiHooks);\n  }\n}\n\nconst DEVTOOLS_FORMS = {};\nconst DEVTOOLS_FIELDS = {};\nlet API;\nconst refreshInspector = throttle(() => {\n  setTimeout(async () => {\n    await nextTick();\n    API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\n    API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\n  }, 100);\n}, 100);\n\nfunction registerFormWithDevTools(form) {\n  const vm = getCurrentInstance();\n\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n\n    if (!app) {\n      return;\n    }\n\n    installDevtoolsPlugin(app);\n  }\n\n  DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\n  DEVTOOLS_FORMS[form.formId]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FORMS[form.formId];\n    refreshInspector();\n  });\n  refreshInspector();\n}\n\nfunction registerSingleFieldWithDevtools(field) {\n  const vm = getCurrentInstance();\n\n  if (!API) {\n    const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\n\n    if (!app) {\n      return;\n    }\n\n    installDevtoolsPlugin(app);\n  }\n\n  DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\n  DEVTOOLS_FIELDS[field.id]._vm = vm;\n  onUnmounted(() => {\n    delete DEVTOOLS_FIELDS[field.id];\n    refreshInspector();\n  });\n  refreshInspector();\n}\n\nconst INSPECTOR_ID = 'vee-validate-inspector';\nconst COLORS = {\n  error: 0xbd4b4b,\n  success: 0x06d77b,\n  unknown: 0x54436b,\n  white: 0xffffff,\n  black: 0x000000,\n  blue: 0x035397,\n  purple: 0xb980f0,\n  orange: 0xf5a962,\n  gray: 0xbbbfca\n};\nlet SELECTED_NODE = null;\n\nfunction setupApiHooks(api) {\n  API = api;\n  api.addInspector({\n    id: INSPECTOR_ID,\n    icon: 'rule',\n    label: 'vee-validate',\n    noSelectionText: 'Select a vee-validate node to inspect',\n    actions: [{\n      icon: 'done_outline',\n      tooltip: 'Validate selected item',\n      action: async () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n\n        const result = await SELECTED_NODE.validate();\n        console.log(result);\n      }\n    }, {\n      icon: 'delete_sweep',\n      tooltip: 'Clear validation state of the selected item',\n      action: () => {\n        if (!SELECTED_NODE) {\n          console.error('There is not a valid selected vee-validate node or component');\n          return;\n        }\n\n        if ('id' in SELECTED_NODE) {\n          SELECTED_NODE.resetField();\n          return;\n        }\n\n        SELECTED_NODE.resetForm();\n      }\n    }]\n  });\n  api.on.getInspectorTree(payload => {\n    if (payload.inspectorId !== INSPECTOR_ID) {\n      return;\n    }\n\n    const forms = Object.values(DEVTOOLS_FORMS);\n    const fields = Object.values(DEVTOOLS_FIELDS);\n    payload.rootNodes = [...forms.map(mapFormForDevtoolsInspector), ...fields.map(field => mapFieldForDevtoolsInspector(field))];\n  });\n  api.on.getInspectorState((payload, ctx) => {\n    if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\n      return;\n    }\n\n    const {\n      form,\n      field,\n      type\n    } = decodeNodeId(payload.nodeId);\n\n    if (form && type === 'form') {\n      payload.state = buildFormState(form);\n      SELECTED_NODE = form;\n      return;\n    }\n\n    if (field && type === 'field') {\n      payload.state = buildFieldState(field);\n      SELECTED_NODE = field;\n      return;\n    }\n\n    SELECTED_NODE = null;\n  });\n}\n\nfunction mapFormForDevtoolsInspector(form) {\n  const {\n    textColor,\n    bgColor\n  } = getTagTheme(form);\n  const formTreeNodes = {};\n  Object.values(form.fieldsByPath.value).forEach(field => {\n    const fieldInstance = Array.isArray(field) ? field[0] : field;\n\n    if (!fieldInstance) {\n      return;\n    }\n\n    setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\n  });\n\n  function buildFormTree(tree, path = []) {\n    const key = [...path].pop();\n\n    if ('id' in tree) {\n      return Object.assign(Object.assign({}, tree), {\n        label: key || tree.label\n      });\n    }\n\n    if (isObject(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: key || '',\n        children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key]))\n      };\n    }\n\n    if (Array.isArray(tree)) {\n      return {\n        id: `${path.join('.')}`,\n        label: `${key}[]`,\n        children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)]))\n      };\n    }\n\n    return {\n      id: '',\n      label: '',\n      children: []\n    };\n  }\n\n  const {\n    children\n  } = buildFormTree(formTreeNodes);\n  return {\n    id: encodeNodeId(form),\n    label: 'Form',\n    children,\n    tags: [{\n      label: 'Form',\n      textColor,\n      backgroundColor: bgColor\n    }, {\n      label: `${Object.keys(form.fieldsByPath.value).length} fields`,\n      textColor: COLORS.white,\n      backgroundColor: COLORS.unknown\n    }]\n  };\n}\n\nfunction mapFieldForDevtoolsInspector(field, form) {\n  const fieldInstance = normalizeField(field);\n  const {\n    textColor,\n    bgColor\n  } = getTagTheme(fieldInstance);\n  const isGroup = Array.isArray(field) && field.length > 1;\n  return {\n    id: encodeNodeId(form, fieldInstance, !isGroup),\n    label: unref(fieldInstance.name),\n    children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\n    tags: [isGroup ? undefined : {\n      label: 'Field',\n      textColor,\n      backgroundColor: bgColor\n    }, !form ? {\n      label: 'Standalone',\n      textColor: COLORS.black,\n      backgroundColor: COLORS.gray\n    } : undefined, !isGroup && fieldInstance.type === 'checkbox' ? {\n      label: 'Checkbox',\n      textColor: COLORS.white,\n      backgroundColor: COLORS.blue\n    } : undefined, !isGroup && fieldInstance.type === 'radio' ? {\n      label: 'Radio',\n      textColor: COLORS.white,\n      backgroundColor: COLORS.purple\n    } : undefined, isGroup ? {\n      label: 'Group',\n      textColor: COLORS.black,\n      backgroundColor: COLORS.orange\n    } : undefined].filter(Boolean)\n  };\n}\n\nfunction encodeNodeId(form, field, encodeIndex = true) {\n  const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\n  const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\n  let idx;\n\n  if (encodeIndex && field && Array.isArray(fieldGroup)) {\n    idx = fieldGroup.indexOf(field);\n  }\n\n  const idObject = {\n    f: form === null || form === void 0 ? void 0 : form.formId,\n    ff: fieldPath,\n    idx,\n    type: field ? 'field' : 'form'\n  };\n  return btoa(JSON.stringify(idObject));\n}\n\nfunction decodeNodeId(nodeId) {\n  try {\n    const idObject = JSON.parse(atob(nodeId));\n    const form = DEVTOOLS_FORMS[idObject.f];\n\n    if (!form && idObject.ff) {\n      const field = DEVTOOLS_FIELDS[idObject.ff];\n\n      if (!field) {\n        return {};\n      }\n\n      return {\n        type: idObject.type,\n        field\n      };\n    }\n\n    if (!form) {\n      return {};\n    }\n\n    const fieldGroup = form.fieldsByPath.value[idObject.ff];\n    return {\n      type: idObject.type,\n      form,\n      field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup\n    };\n  } catch (err) {// console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\n  }\n\n  return {};\n}\n\nfunction buildFieldState(field) {\n  const {\n    errors,\n    meta,\n    value\n  } = field;\n  return {\n    'Field state': [{\n      key: 'errors',\n      value: errors.value\n    }, {\n      key: 'initialValue',\n      value: meta.initialValue\n    }, {\n      key: 'currentValue',\n      value: value.value\n    }, {\n      key: 'touched',\n      value: meta.touched\n    }, {\n      key: 'dirty',\n      value: meta.dirty\n    }, {\n      key: 'valid',\n      value: meta.valid\n    }]\n  };\n}\n\nfunction buildFormState(form) {\n  const {\n    errorBag,\n    meta,\n    values,\n    isSubmitting,\n    submitCount\n  } = form;\n  return {\n    'Form state': [{\n      key: 'submitCount',\n      value: submitCount.value\n    }, {\n      key: 'isSubmitting',\n      value: isSubmitting.value\n    }, {\n      key: 'touched',\n      value: meta.value.touched\n    }, {\n      key: 'dirty',\n      value: meta.value.dirty\n    }, {\n      key: 'valid',\n      value: meta.value.valid\n    }, {\n      key: 'initialValues',\n      value: meta.value.initialValues\n    }, {\n      key: 'currentValues',\n      value: values\n    }, {\n      key: 'errors',\n      value: keysOf(errorBag.value).reduce((acc, key) => {\n        var _a;\n\n        const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\n\n        if (message) {\n          acc[key] = message;\n        }\n\n        return acc;\n      }, {})\n    }]\n  };\n}\n/**\r\n * Resolves the tag color based on the form state\r\n */\n\n\nfunction getTagTheme(fieldOrForm) {\n  // const fallbackColors = {\n  //   bgColor: COLORS.unknown,\n  //   textColor: COLORS.white,\n  // };\n  const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\n  return {\n    bgColor: isValid ? COLORS.success : COLORS.error,\n    textColor: isValid ? COLORS.black : COLORS.white\n  };\n}\n/**\r\n * Creates a field composite.\r\n */\n\n\nfunction useField(name, rules, opts) {\n  if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\n    return useCheckboxField(name, rules, opts);\n  }\n\n  return _useField(name, rules, opts);\n}\n\nfunction _useField(name, rules, opts) {\n  const {\n    initialValue: modelValue,\n    validateOnMount,\n    bails,\n    type,\n    checkedValue,\n    label,\n    validateOnValueUpdate,\n    uncheckedValue,\n    controlled,\n    keepValueOnUnmount,\n    modelPropName,\n    syncVModel,\n    form: controlForm\n  } = normalizeOptions(unref(name), opts);\n  const injectedForm = controlled ? injectWithSelf(FormContextKey) : undefined;\n  const form = controlForm || injectedForm; // a flag indicating if the field is about to be removed/unmounted.\n\n  let markedForRemoval = false;\n  const {\n    id,\n    value,\n    initialValue,\n    meta,\n    setState,\n    errors,\n    errorMessage\n  } = useFieldState(name, {\n    modelValue,\n    form\n  });\n\n  if (syncVModel) {\n    useVModel({\n      value,\n      prop: modelPropName,\n      handleChange\n    });\n  }\n  /**\r\n   * Handles common onBlur meta update\r\n   */\n\n\n  const handleBlur = () => {\n    meta.touched = true;\n  };\n\n  const normalizedRules = computed(() => {\n    let rulesValue = unref(rules);\n    const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\n\n    if (schema && !isYupValidator(schema)) {\n      rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\n    }\n\n    if (isYupValidator(rulesValue) || isCallable(rulesValue) || Array.isArray(rulesValue)) {\n      return rulesValue;\n    }\n\n    return normalizeRules(rulesValue);\n  });\n\n  async function validateCurrentValue(mode) {\n    var _a, _b;\n\n    if (form === null || form === void 0 ? void 0 : form.validateSchema) {\n      return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : {\n        valid: true,\n        errors: []\n      };\n    }\n\n    return validate(value.value, normalizedRules.value, {\n      name: unref(label) || unref(name),\n      values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\n      bails\n    });\n  }\n\n  const validateWithStateMutation = withLatest(async () => {\n    meta.pending = true;\n    meta.validated = true;\n    return validateCurrentValue('validated-only');\n  }, result => {\n    if (markedForRemoval) {\n      result.valid = true;\n      result.errors = [];\n    }\n\n    setState({\n      errors: result.errors\n    });\n    meta.pending = false;\n    return result;\n  });\n  const validateValidStateOnly = withLatest(async () => {\n    return validateCurrentValue('silent');\n  }, result => {\n    if (markedForRemoval) {\n      result.valid = true;\n    }\n\n    meta.valid = result.valid;\n    return result;\n  });\n\n  function validate$1(opts) {\n    if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'silent') {\n      return validateValidStateOnly();\n    }\n\n    return validateWithStateMutation();\n  } // Common input/change event handler\n\n\n  function handleChange(e, shouldValidate = true) {\n    const newValue = normalizeEventValue(e);\n    value.value = newValue;\n\n    if (!validateOnValueUpdate && shouldValidate) {\n      validateWithStateMutation();\n    }\n  } // Runs the initial validation\n\n\n  onMounted(() => {\n    if (validateOnMount) {\n      return validateWithStateMutation();\n    } // validate self initially if no form was handling this\n    // forms should have their own initial silent validation run to make things more efficient\n\n\n    if (!form || !form.validateSchema) {\n      validateValidStateOnly();\n    }\n  });\n\n  function setTouched(isTouched) {\n    meta.touched = isTouched;\n  }\n\n  let unwatchValue;\n  let lastWatchedValue = klona(value.value);\n\n  function watchValue() {\n    unwatchValue = watch(value, (val, oldVal) => {\n      if (isEqual(val, oldVal) && isEqual(val, lastWatchedValue)) {\n        return;\n      }\n\n      const validateFn = validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly;\n      validateFn();\n      lastWatchedValue = klona(val);\n    }, {\n      deep: true\n    });\n  }\n\n  watchValue();\n\n  function resetField(state) {\n    var _a;\n\n    unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\n    const newValue = state && 'value' in state ? state.value : initialValue.value;\n    setState({\n      value: klona(newValue),\n      initialValue: klona(newValue),\n      touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\n      errors: (state === null || state === void 0 ? void 0 : state.errors) || []\n    });\n    meta.pending = false;\n    meta.validated = false;\n    validateValidStateOnly(); // need to watch at next tick to avoid triggering the value watcher\n\n    nextTick(() => {\n      watchValue();\n    });\n  }\n\n  function setValue(newValue) {\n    value.value = newValue;\n  }\n\n  function setErrors(errors) {\n    setState({\n      errors: Array.isArray(errors) ? errors : [errors]\n    });\n  }\n\n  const field = {\n    id,\n    name,\n    label,\n    value,\n    meta,\n    errors,\n    errorMessage,\n    type,\n    checkedValue,\n    uncheckedValue,\n    bails,\n    keepValueOnUnmount,\n    resetField,\n    handleReset: () => resetField(),\n    validate: validate$1,\n    handleChange,\n    handleBlur,\n    setState,\n    setTouched,\n    setErrors,\n    setValue\n  };\n  provide(FieldContextKey, field);\n\n  if (isRef(rules) && typeof unref(rules) !== 'function') {\n    watch(rules, (value, oldValue) => {\n      if (isEqual(value, oldValue)) {\n        return;\n      }\n\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }, {\n      deep: true\n    });\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    field._vm = getCurrentInstance();\n    watch(() => Object.assign(Object.assign({\n      errors: errors.value\n    }, meta), {\n      value: value.value\n    }), refreshInspector, {\n      deep: true\n    });\n\n    if (!form) {\n      registerSingleFieldWithDevtools(field);\n    }\n  } // if no associated form return the field API immediately\n\n\n  if (!form) {\n    return field;\n  } // associate the field with the given form\n\n\n  form.register(field);\n  onBeforeUnmount(() => {\n    markedForRemoval = true;\n    form.unregister(field);\n  }); // extract cross-field dependencies in a computed prop\n\n  const dependencies = computed(() => {\n    const rulesVal = normalizedRules.value; // is falsy, a function schema or a yup schema\n\n    if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal) || Array.isArray(rulesVal)) {\n      return {};\n    }\n\n    return Object.keys(rulesVal).reduce((acc, rule) => {\n      const deps = extractLocators(rulesVal[rule]).map(dep => dep.__locatorRef).reduce((depAcc, depName) => {\n        const depValue = getFromPath(form.values, depName) || form.values[depName];\n\n        if (depValue !== undefined) {\n          depAcc[depName] = depValue;\n        }\n\n        return depAcc;\n      }, {});\n      Object.assign(acc, deps);\n      return acc;\n    }, {});\n  }); // Adds a watcher that runs the validation whenever field dependencies change\n\n  watch(dependencies, (deps, oldDeps) => {\n    // Skip if no dependencies or if the field wasn't manipulated\n    if (!Object.keys(deps).length) {\n      return;\n    }\n\n    const shouldValidate = !isEqual(deps, oldDeps);\n\n    if (shouldValidate) {\n      meta.validated ? validateWithStateMutation() : validateValidStateOnly();\n    }\n  });\n  return field;\n}\n/**\r\n * Normalizes partial field options to include the full options\r\n */\n\n\nfunction normalizeOptions(name, opts) {\n  const defaults = () => ({\n    initialValue: undefined,\n    validateOnMount: false,\n    bails: true,\n    label: name,\n    validateOnValueUpdate: true,\n    keepValueOnUnmount: undefined,\n    modelPropName: 'modelValue',\n    syncVModel: true,\n    controlled: true\n  });\n\n  if (!opts) {\n    return defaults();\n  } // TODO: Deprecate this in next major release\n\n\n  const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\n  const controlled = 'standalone' in opts ? !opts.standalone : opts.controlled;\n  return Object.assign(Object.assign(Object.assign({}, defaults()), opts || {}), {\n    controlled: controlled !== null && controlled !== void 0 ? controlled : true,\n    checkedValue\n  });\n}\n/**\r\n * Extracts the validation rules from a schema\r\n */\n\n\nfunction extractRuleFromSchema(schema, fieldName) {\n  // no schema at all\n  if (!schema) {\n    return undefined;\n  } // there is a key on the schema object for this field\n\n\n  return schema[fieldName];\n}\n\nfunction useCheckboxField(name, rules, opts) {\n  const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\n  const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\n  const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\n\n  function patchCheckboxApi(field) {\n    const handleChange = field.handleChange;\n    const checked = computed(() => {\n      const currentValue = unref(field.value);\n      const checkedVal = unref(checkedValue);\n      return Array.isArray(currentValue) ? currentValue.findIndex(v => isEqual(v, checkedVal)) >= 0 : isEqual(checkedVal, currentValue);\n    });\n\n    function handleCheckboxChange(e, shouldValidate = true) {\n      var _a;\n\n      if (checked.value === ((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked)) {\n        if (shouldValidate) {\n          field.validate();\n        }\n\n        return;\n      }\n\n      let newValue = normalizeEventValue(e); // Single checkbox field without a form to toggle it's value\n\n      if (!form) {\n        newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\n      }\n\n      handleChange(newValue, shouldValidate);\n    }\n\n    return Object.assign(Object.assign({}, field), {\n      checked,\n      checkedValue,\n      uncheckedValue,\n      handleChange: handleCheckboxChange\n    });\n  }\n\n  return patchCheckboxApi(_useField(name, rules, opts));\n}\n\nfunction useVModel({\n  prop,\n  value,\n  handleChange\n}) {\n  const vm = getCurrentInstance();\n  /* istanbul ignore next */\n\n  if (!vm) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn('Failed to setup model events because `useField` was not called in setup.');\n    }\n\n    return;\n  }\n\n  const propName = prop || 'modelValue';\n  const emitName = `update:${propName}`; // Component doesn't have a model prop setup (must be defined on the props)\n\n  if (!(propName in vm.props)) {\n    return;\n  }\n\n  watch(value, newValue => {\n    if (isEqual(newValue, getCurrentModelValue(vm, propName))) {\n      return;\n    }\n\n    vm.emit(emitName, newValue);\n  });\n  watch(() => getCurrentModelValue(vm, propName), propValue => {\n    if (propValue === IS_ABSENT && value.value === undefined) {\n      return;\n    }\n\n    const newValue = propValue === IS_ABSENT ? undefined : propValue;\n\n    if (isEqual(newValue, applyModelModifiers(value.value, vm.props.modelModifiers))) {\n      return;\n    }\n\n    handleChange(newValue);\n  });\n}\n\nfunction getCurrentModelValue(vm, propName) {\n  return vm.props[propName];\n}\n\nconst FieldImpl = defineComponent({\n  name: 'Field',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: [String, Object],\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    rules: {\n      type: [Object, String, Function],\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    validateOnBlur: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnChange: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnInput: {\n      type: Boolean,\n      default: undefined\n    },\n    validateOnModelUpdate: {\n      type: Boolean,\n      default: undefined\n    },\n    bails: {\n      type: Boolean,\n      default: () => getConfig().bails\n    },\n    label: {\n      type: String,\n      default: undefined\n    },\n    uncheckedValue: {\n      type: null,\n      default: undefined\n    },\n    modelValue: {\n      type: null,\n      default: IS_ABSENT\n    },\n    modelModifiers: {\n      type: null,\n      default: () => ({})\n    },\n    'onUpdate:modelValue': {\n      type: null,\n      default: undefined\n    },\n    standalone: {\n      type: Boolean,\n      default: false\n    },\n    keepValue: {\n      type: Boolean,\n      default: undefined\n    }\n  },\n\n  setup(props, ctx) {\n    const rules = toRef(props, 'rules');\n    const name = toRef(props, 'name');\n    const label = toRef(props, 'label');\n    const uncheckedValue = toRef(props, 'uncheckedValue');\n    const keepValue = toRef(props, 'keepValue');\n    const {\n      errors,\n      value,\n      errorMessage,\n      validate: validateField,\n      handleChange,\n      handleBlur,\n      setTouched,\n      resetField,\n      handleReset,\n      meta,\n      checked,\n      setErrors\n    } = useField(name, rules, {\n      validateOnMount: props.validateOnMount,\n      bails: props.bails,\n      standalone: props.standalone,\n      type: ctx.attrs.type,\n      initialValue: resolveInitialValue(props, ctx),\n      // Only for checkboxes and radio buttons\n      checkedValue: ctx.attrs.value,\n      uncheckedValue,\n      label,\n      validateOnValueUpdate: false,\n      keepValueOnUnmount: keepValue\n    }); // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\n\n    const onChangeHandler = function handleChangeWithModel(e, shouldValidate = true) {\n      handleChange(e, shouldValidate);\n      ctx.emit('update:modelValue', value.value);\n    };\n\n    const handleInput = e => {\n      if (!hasCheckedAttr(ctx.attrs.type)) {\n        value.value = normalizeEventValue(e);\n      }\n    };\n\n    const onInputHandler = function handleInputWithModel(e) {\n      handleInput(e);\n      ctx.emit('update:modelValue', value.value);\n    };\n\n    const fieldProps = computed(() => {\n      const {\n        validateOnInput,\n        validateOnChange,\n        validateOnBlur,\n        validateOnModelUpdate\n      } = resolveValidationTriggers(props);\n      const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\n      const baseOnInput = [e => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\n      const baseOnChange = [e => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\n      const attrs = {\n        name: props.name,\n        onBlur: baseOnBlur,\n        onInput: baseOnInput,\n        onChange: baseOnChange\n      };\n\n      attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\n\n      if (hasCheckedAttr(ctx.attrs.type) && checked) {\n        attrs.checked = checked.value;\n      }\n\n      const tag = resolveTag(props, ctx);\n\n      if (shouldHaveValueBinding(tag, ctx.attrs)) {\n        attrs.value = value.value;\n      }\n\n      return attrs;\n    });\n\n    function slotProps() {\n      return {\n        field: fieldProps.value,\n        value: value.value,\n        meta,\n        errors: errors.value,\n        errorMessage: errorMessage.value,\n        validate: validateField,\n        resetField,\n        handleChange: onChangeHandler,\n        handleInput: onInputHandler,\n        handleReset,\n        handleBlur,\n        setTouched,\n        setErrors\n      };\n    }\n\n    ctx.expose({\n      setErrors,\n      setTouched,\n      reset: resetField,\n      validate: validateField,\n      handleChange\n    });\n    return () => {\n      const tag = resolveDynamicComponent(resolveTag(props, ctx));\n      const children = normalizeChildren(tag, ctx, slotProps);\n\n      if (tag) {\n        return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\n      }\n\n      return children;\n    };\n  }\n\n});\n\nfunction resolveTag(props, ctx) {\n  let tag = props.as || '';\n\n  if (!props.as && !ctx.slots.default) {\n    tag = 'input';\n  }\n\n  return tag;\n}\n\nfunction resolveValidationTriggers(props) {\n  var _a, _b, _c, _d;\n\n  const {\n    validateOnInput,\n    validateOnChange,\n    validateOnBlur,\n    validateOnModelUpdate\n  } = getConfig();\n  return {\n    validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\n    validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\n    validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\n    validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate\n  };\n}\n\nfunction resolveInitialValue(props, ctx) {\n  // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\n  // For checkboxes and radio buttons it will always be the model value not the `value` attribute\n  if (!hasCheckedAttr(ctx.attrs.type)) {\n    return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\n  }\n\n  return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\n}\n\nconst Field = FieldImpl;\nlet FORM_COUNTER = 0;\n\nfunction useForm(opts) {\n  var _a;\n\n  const formId = FORM_COUNTER++;\n  const controlledModelPaths = new Set(); // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\n  // TODO: This won't be needed if we centralize all the state inside the `form` for form inputs\n\n  let RESET_LOCK = false; // A lookup containing fields or field groups\n\n  const fieldsByPath = ref({}); // If the form is currently submitting\n\n  const isSubmitting = ref(false); // The number of times the user tried to submit the form\n\n  const submitCount = ref(0); // field arrays managed by this form\n\n  const fieldArrays = []; // a private ref for all form values\n\n  const formValues = reactive(klona(unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {})); // the source of errors for the form fields\n\n  const {\n    errorBag,\n    setErrorBag,\n    setFieldErrorBag\n  } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors); // Gets the first error of each field\n\n  const errors = computed(() => {\n    return keysOf(errorBag.value).reduce((acc, key) => {\n      const bag = errorBag.value[key];\n\n      if (bag && bag.length) {\n        acc[key] = bag[0];\n      }\n\n      return acc;\n    }, {});\n  });\n\n  function getFirstFieldAtPath(path) {\n    const fieldOrGroup = fieldsByPath.value[path];\n    return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\n  }\n\n  function fieldExists(path) {\n    return !!fieldsByPath.value[path];\n  }\n  /**\r\n   * Holds a computed reference to all fields names and labels\r\n   */\n\n\n  const fieldNames = computed(() => {\n    return keysOf(fieldsByPath.value).reduce((names, path) => {\n      const field = getFirstFieldAtPath(path);\n\n      if (field) {\n        names[path] = unref(field.label || field.name) || '';\n      }\n\n      return names;\n    }, {});\n  });\n  const fieldBailsMap = computed(() => {\n    return keysOf(fieldsByPath.value).reduce((map, path) => {\n      var _a;\n\n      const field = getFirstFieldAtPath(path);\n\n      if (field) {\n        map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\n      }\n\n      return map;\n    }, {});\n  }); // mutable non-reactive reference to initial errors\n  // we need this to process initial errors then unset them\n\n  const initialErrors = Object.assign({}, (opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {});\n  const keepValuesOnUnmount = (_a = opts === null || opts === void 0 ? void 0 : opts.keepValuesOnUnmount) !== null && _a !== void 0 ? _a : false; // initial form values\n\n  const {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  } = useFormInitialValues(fieldsByPath, formValues, opts === null || opts === void 0 ? void 0 : opts.initialValues); // form meta aggregations\n\n  const meta = useFormMeta(fieldsByPath, formValues, originalInitialValues, errors);\n  const controlledValues = computed(() => {\n    return [...controlledModelPaths, ...keysOf(fieldsByPath.value)].reduce((acc, path) => {\n      const value = getFromPath(formValues, path);\n      setInPath(acc, path, value);\n      return acc;\n    }, {});\n  });\n  const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\n  /**\r\n   * Batches validation runs in 5ms batches\r\n   * Must have two distinct batch queues to make sure they don't override each other settings #3783\r\n   */\n\n  const debouncedSilentValidation = debounceAsync(_validateSchema, 5);\n  const debouncedValidation = debounceAsync(_validateSchema, 5);\n  const validateSchema = withLatest(async mode => {\n    return (await mode) === 'silent' ? debouncedSilentValidation() : debouncedValidation();\n  }, (formResult, [mode]) => {\n    // fields by id lookup\n    const fieldsById = formCtx.fieldsByPath.value || {}; // errors fields names, we need it to also check if custom errors are updated\n\n    const currentErrorsPaths = keysOf(formCtx.errorBag.value); // collect all the keys from the schema and all fields\n    // this ensures we have a complete keymap of all the fields\n\n    const paths = [...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths])]; // aggregates the paths into a single result object while applying the results on the fields\n\n    return paths.reduce((validation, path) => {\n      const field = fieldsById[path];\n      const messages = (formResult.results[path] || {\n        errors: []\n      }).errors;\n      const fieldResult = {\n        errors: messages,\n        valid: !messages.length\n      };\n      validation.results[path] = fieldResult;\n\n      if (!fieldResult.valid) {\n        validation.errors[path] = fieldResult.errors[0];\n      } // field not rendered\n\n\n      if (!field) {\n        setFieldError(path, messages);\n        return validation;\n      } // always update the valid flag regardless of the mode\n\n\n      applyFieldMutation(field, f => f.meta.valid = fieldResult.valid);\n\n      if (mode === 'silent') {\n        return validation;\n      }\n\n      const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\n\n      if (mode === 'validated-only' && !wasValidated) {\n        return validation;\n      }\n\n      applyFieldMutation(field, f => f.setState({\n        errors: fieldResult.errors\n      }));\n      return validation;\n    }, {\n      valid: formResult.valid,\n      results: {},\n      errors: {}\n    });\n  });\n\n  function makeSubmissionFactory(onlyControlled) {\n    return function submitHandlerFactory(fn, onValidationError) {\n      return function submissionHandler(e) {\n        if (e instanceof Event) {\n          e.preventDefault();\n          e.stopPropagation();\n        } // Touch all fields\n\n\n        setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\n          acc[field] = true;\n          return acc;\n        }, {}));\n        isSubmitting.value = true;\n        submitCount.value++;\n        return validate().then(result => {\n          const values = klona(formValues);\n\n          if (result.valid && typeof fn === 'function') {\n            const controlled = klona(controlledValues.value);\n            return fn(onlyControlled ? controlled : values, {\n              evt: e,\n              controlledValues: controlled,\n              setErrors,\n              setFieldError,\n              setTouched,\n              setFieldTouched,\n              setValues,\n              setFieldValue,\n              resetForm\n            });\n          }\n\n          if (!result.valid && typeof onValidationError === 'function') {\n            onValidationError({\n              values,\n              evt: e,\n              errors: result.errors,\n              results: result.results\n            });\n          }\n        }).then(returnVal => {\n          isSubmitting.value = false;\n          return returnVal;\n        }, err => {\n          isSubmitting.value = false; // re-throw the err so it doesn't go silent\n\n          throw err;\n        });\n      };\n    };\n  }\n\n  const handleSubmitImpl = makeSubmissionFactory(false);\n  const handleSubmit = handleSubmitImpl;\n  handleSubmit.withControlled = makeSubmissionFactory(true);\n  const formCtx = {\n    formId,\n    fieldsByPath,\n    values: formValues,\n    controlledValues,\n    errorBag,\n    errors,\n    schema,\n    submitCount,\n    meta,\n    isSubmitting,\n    fieldArrays,\n    keepValuesOnUnmount,\n    validateSchema: unref(schema) ? validateSchema : undefined,\n    validate,\n    register: registerField,\n    unregister: unregisterField,\n    setFieldErrorBag,\n    validateField,\n    setFieldValue,\n    setValues,\n    setErrors,\n    setFieldError,\n    setFieldTouched,\n    setTouched,\n    resetForm,\n    handleSubmit,\n    stageInitialValue,\n    unsetInitialValue,\n    setFieldInitialValue,\n    useFieldModel\n  };\n\n  function isFieldGroup(fieldOrGroup) {\n    return Array.isArray(fieldOrGroup);\n  }\n\n  function applyFieldMutation(fieldOrGroup, mutation) {\n    if (Array.isArray(fieldOrGroup)) {\n      return fieldOrGroup.forEach(mutation);\n    }\n\n    return mutation(fieldOrGroup);\n  }\n\n  function mutateAllFields(mutation) {\n    Object.values(fieldsByPath.value).forEach(field => {\n      if (!field) {\n        return;\n      } // avoid resetting the field values, because they should've been reset already.\n\n\n      applyFieldMutation(field, mutation);\n    });\n  }\n  /**\r\n   * Manually sets an error message on a specific field\r\n   */\n\n\n  function setFieldError(field, message) {\n    setFieldErrorBag(field, message);\n  }\n  /**\r\n   * Sets errors for the fields specified in the object\r\n   */\n\n\n  function setErrors(fields) {\n    setErrorBag(fields);\n  }\n  /**\r\n   * Sets a single field value\r\n   */\n\n\n  function setFieldValue(field, value, {\n    force\n  } = {\n    force: false\n  }) {\n    var _a;\n\n    const fieldInstance = fieldsByPath.value[field];\n    const clonedValue = klona(value); // field wasn't found, create a virtual field as a placeholder\n\n    if (!fieldInstance) {\n      setInPath(formValues, field, clonedValue);\n      return;\n    }\n\n    if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\n      // Multiple checkboxes, and only one of them got updated\n      const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\n      setInPath(formValues, field, newValue);\n      return;\n    }\n\n    let newValue = clonedValue; // Single Checkbox: toggles the field value unless the field is being reset then force it\n\n    if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force && !RESET_LOCK) {\n      newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\n    }\n\n    setInPath(formValues, field, newValue);\n  }\n  /**\r\n   * Sets multiple fields values\r\n   */\n\n\n  function setValues(fields) {\n    // clean up old values\n    keysOf(formValues).forEach(key => {\n      delete formValues[key];\n    }); // set up new values\n\n    keysOf(fields).forEach(path => {\n      setFieldValue(path, fields[path]);\n    }); // regenerate the arrays when the form values change\n\n    fieldArrays.forEach(f => f && f.reset());\n  }\n\n  function createModel(path) {\n    const {\n      value\n    } = _useFieldValue(path, undefined, formCtx);\n\n    watch(value, () => {\n      if (!fieldExists(unref(path))) {\n        validate({\n          mode: 'validated-only'\n        });\n      }\n    }, {\n      deep: true\n    });\n    controlledModelPaths.add(unref(path));\n    return value;\n  }\n\n  function useFieldModel(path) {\n    if (!Array.isArray(path)) {\n      return createModel(path);\n    }\n\n    return path.map(createModel);\n  }\n  /**\r\n   * Sets the touched meta state on a field\r\n   */\n\n\n  function setFieldTouched(field, isTouched) {\n    const fieldInstance = fieldsByPath.value[field];\n\n    if (fieldInstance) {\n      applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\n    }\n  }\n  /**\r\n   * Sets the touched meta state on multiple fields\r\n   */\n\n\n  function setTouched(fields) {\n    keysOf(fields).forEach(field => {\n      setFieldTouched(field, !!fields[field]);\n    });\n  }\n  /**\r\n   * Resets all fields\r\n   */\n\n\n  function resetForm(state) {\n    RESET_LOCK = true; // Reset all field states first\n\n    mutateAllFields(f => f.resetField()); // reset values\n\n    const newValues = (state === null || state === void 0 ? void 0 : state.values) ? state.values : originalInitialValues.value;\n    setInitialValues(newValues);\n    setValues(newValues);\n\n    if (state === null || state === void 0 ? void 0 : state.touched) {\n      setTouched(state.touched);\n    }\n\n    setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\n    submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\n    nextTick(() => {\n      RESET_LOCK = false;\n    });\n  }\n\n  function insertFieldAtPath(field, path) {\n    const rawField = markRaw(field);\n    const fieldPath = path; // first field at that path\n\n    if (!fieldsByPath.value[fieldPath]) {\n      fieldsByPath.value[fieldPath] = rawField;\n      return;\n    }\n\n    const fieldAtPath = fieldsByPath.value[fieldPath];\n\n    if (fieldAtPath && !Array.isArray(fieldAtPath)) {\n      fieldsByPath.value[fieldPath] = [fieldAtPath];\n    } // add the new array to that path\n\n\n    fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\n  }\n\n  function removeFieldFromPath(field, path) {\n    const fieldPath = path;\n    const fieldAtPath = fieldsByPath.value[fieldPath];\n\n    if (!fieldAtPath) {\n      return;\n    } // same field at path\n\n\n    if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\n      delete fieldsByPath.value[fieldPath];\n      return;\n    }\n\n    if (isFieldGroup(fieldAtPath)) {\n      const idx = fieldAtPath.findIndex(f => f.id === field.id);\n\n      if (idx === -1) {\n        return;\n      }\n\n      fieldAtPath.splice(idx, 1);\n\n      if (!fieldAtPath.length) {\n        delete fieldsByPath.value[fieldPath];\n      }\n    }\n  }\n\n  function registerField(field) {\n    const fieldPath = unref(field.name);\n    insertFieldAtPath(field, fieldPath);\n\n    if (isRef(field.name)) {\n      // ensures when a field's name was already taken that it preserves its same value\n      // necessary for fields generated by loops\n      watch(field.name, async (newPath, oldPath) => {\n        // cache the value\n        await nextTick();\n        removeFieldFromPath(field, oldPath);\n        insertFieldAtPath(field, newPath); // re-validate if either path had errors before\n\n        if (errors.value[oldPath] || errors.value[newPath]) {\n          // clear up both paths errors\n          setFieldError(oldPath, undefined);\n          validateField(newPath);\n        } // clean up the old path if no other field is sharing that name\n        // #3325\n\n\n        await nextTick();\n\n        if (!fieldExists(oldPath)) {\n          unsetPath(formValues, oldPath);\n        }\n      });\n    } // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\n    // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\n    // #3342\n\n\n    const initialErrorMessage = unref(field.errorMessage);\n\n    if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\n      validateField(fieldPath);\n    } // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\n\n\n    delete initialErrors[fieldPath];\n  }\n\n  function unregisterField(field) {\n    const fieldName = unref(field.name);\n    const fieldInstance = fieldsByPath.value[fieldName];\n    const isGroup = !!fieldInstance && isFieldGroup(fieldInstance);\n    removeFieldFromPath(field, fieldName); // clears a field error on unmounted\n    // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\n\n    nextTick(() => {\n      var _a;\n\n      const shouldKeepValue = (_a = unref(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : unref(keepValuesOnUnmount);\n      const currentGroupValue = getFromPath(formValues, fieldName); // The boolean here is we check if the field still belongs to the same control group with that name\n      // if another group claimed the name, we should avoid handling it since it is no longer the same group\n      // this happens with `v-for` over some checkboxes and field arrays.\n      // also if the group no longer exist we can assume this group was the last one that controlled it\n\n      const isSameGroup = isGroup && (fieldInstance === fieldsByPath.value[fieldName] || !fieldsByPath.value[fieldName]); // group field that still has a dangling value, the field may exist or not after it was removed.\n      // This used to be handled in the useField composable but the form has better context on when it should/not happen.\n      // if it does belong to it that means the group still exists\n      // #3844\n\n      if (isSameGroup && !shouldKeepValue) {\n        if (Array.isArray(currentGroupValue)) {\n          const valueIdx = currentGroupValue.findIndex(i => isEqual(i, unref(field.checkedValue)));\n\n          if (valueIdx > -1) {\n            const newVal = [...currentGroupValue];\n            newVal.splice(valueIdx, 1);\n            setFieldValue(fieldName, newVal, {\n              force: true\n            });\n          }\n        } else if (currentGroupValue === unref(field.checkedValue)) {\n          // Remove field if it is a group but does not have an array value, like for radio inputs #3963\n          unsetPath(formValues, fieldName);\n        }\n      } // Field was removed entirely, we should unset its path\n      // #3384\n\n\n      if (!fieldExists(fieldName)) {\n        setFieldError(fieldName, undefined); // Checks if the field was configured to be unset during unmount or not\n        // Checks both the form-level config and field-level one\n        // Field has the priority if it is set, otherwise it goes to the form settings\n\n        if (shouldKeepValue) {\n          return;\n        } // Don't apply emptyContainer check unless the current group value is an array\n\n\n        if (isGroup && Array.isArray(currentGroupValue) && !isEmptyContainer(currentGroupValue)) {\n          return;\n        }\n\n        unsetPath(formValues, fieldName);\n      }\n    });\n  }\n\n  async function validate(opts) {\n    const mode = (opts === null || opts === void 0 ? void 0 : opts.mode) || 'force';\n\n    if (mode === 'force') {\n      mutateAllFields(f => f.meta.validated = true);\n    }\n\n    if (formCtx.validateSchema) {\n      return formCtx.validateSchema(mode);\n    } // No schema, each field is responsible to validate itself\n\n\n    const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\n      const fieldInstance = Array.isArray(field) ? field[0] : field;\n\n      if (!fieldInstance) {\n        return Promise.resolve({\n          key: '',\n          valid: true,\n          errors: []\n        });\n      }\n\n      return fieldInstance.validate(opts).then(result => {\n        return {\n          key: unref(fieldInstance.name),\n          valid: result.valid,\n          errors: result.errors\n        };\n      });\n    }));\n    const results = {};\n    const errors = {};\n\n    for (const validation of validations) {\n      results[validation.key] = {\n        valid: validation.valid,\n        errors: validation.errors\n      };\n\n      if (validation.errors.length) {\n        errors[validation.key] = validation.errors[0];\n      }\n    }\n\n    return {\n      valid: validations.every(r => r.valid),\n      results,\n      errors\n    };\n  }\n\n  async function validateField(field) {\n    const fieldInstance = fieldsByPath.value[field];\n\n    if (!fieldInstance) {\n      warn$1(`field with name ${field} was not found`);\n      return Promise.resolve({\n        errors: [],\n        valid: true\n      });\n    }\n\n    if (Array.isArray(fieldInstance)) {\n      return fieldInstance.map(f => f.validate())[0];\n    }\n\n    return fieldInstance.validate();\n  }\n\n  function unsetInitialValue(path) {\n    unsetPath(initialValues.value, path);\n  }\n  /**\r\n   * Sneaky function to set initial field values\r\n   */\n\n\n  function stageInitialValue(path, value, updateOriginal = false) {\n    setInPath(formValues, path, value);\n    setFieldInitialValue(path, value);\n\n    if (updateOriginal && !(opts === null || opts === void 0 ? void 0 : opts.initialValues)) {\n      setInPath(originalInitialValues.value, path, klona(value));\n    }\n  }\n\n  function setFieldInitialValue(path, value) {\n    setInPath(initialValues.value, path, klona(value));\n  }\n\n  async function _validateSchema() {\n    const schemaValue = unref(schema);\n\n    if (!schemaValue) {\n      return {\n        valid: true,\n        results: {},\n        errors: {}\n      };\n    }\n\n    const formResult = isYupValidator(schemaValue) ? await validateYupSchema(schemaValue, formValues) : await validateObjectSchema(schemaValue, formValues, {\n      names: fieldNames.value,\n      bailsMap: fieldBailsMap.value\n    });\n    return formResult;\n  }\n\n  const submitForm = handleSubmit((_, {\n    evt\n  }) => {\n    if (isFormSubmitEvent(evt)) {\n      evt.target.submit();\n    }\n  }); // Trigger initial validation\n\n  onMounted(() => {\n    if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\n      setErrors(opts.initialErrors);\n    }\n\n    if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\n      setTouched(opts.initialTouched);\n    } // if validate on mount was enabled\n\n\n    if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\n      validate();\n      return;\n    } // otherwise run initial silent validation through schema if available\n    // the useField should skip their own silent validation if a yup schema is present\n\n\n    if (formCtx.validateSchema) {\n      formCtx.validateSchema('silent');\n    }\n  });\n\n  if (isRef(schema)) {\n    watch(schema, () => {\n      var _a;\n\n      (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\n    });\n  } // Provide injections\n\n\n  provide(FormContextKey, formCtx);\n\n  if (process.env.NODE_ENV !== 'production') {\n    registerFormWithDevTools(formCtx);\n    watch(() => Object.assign(Object.assign({\n      errors: errorBag.value\n    }, meta.value), {\n      values: formValues,\n      isSubmitting: isSubmitting.value,\n      submitCount: submitCount.value\n    }), refreshInspector, {\n      deep: true\n    });\n  }\n\n  return Object.assign(Object.assign({}, formCtx), {\n    handleReset: () => resetForm(),\n    submitForm\n  });\n}\n/**\r\n * Manages form meta aggregation\r\n */\n\n\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\n  const MERGE_STRATEGIES = {\n    touched: 'some',\n    pending: 'some',\n    valid: 'every'\n  };\n  const isDirty = computed(() => {\n    return !isEqual(currentValues, unref(initialValues));\n  });\n\n  function calculateFlags() {\n    const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\n    return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\n      const mergeMethod = MERGE_STRATEGIES[flag];\n      acc[flag] = fields[mergeMethod](field => field.meta[flag]);\n      return acc;\n    }, {});\n  }\n\n  const flags = reactive(calculateFlags());\n  watchEffect(() => {\n    const value = calculateFlags();\n    flags.touched = value.touched;\n    flags.valid = value.valid;\n    flags.pending = value.pending;\n  });\n  return computed(() => {\n    return Object.assign(Object.assign({\n      initialValues: unref(initialValues)\n    }, flags), {\n      valid: flags.valid && !keysOf(errors.value).length,\n      dirty: isDirty.value\n    });\n  });\n}\n/**\r\n * Manages the initial values prop\r\n */\n\n\nfunction useFormInitialValues(fields, formValues, providedValues) {\n  // these are the mutable initial values as the fields are mounted/unmounted\n  const initialValues = ref(klona(unref(providedValues)) || {}); // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\n  // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\n  // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\n  // so these are the values that the reset function should use\n  // these only change when the user explicitly chanegs the initial values or when the user resets them with new values.\n\n  const originalInitialValues = ref(klona(unref(providedValues)) || {});\n\n  function setInitialValues(values, updateFields = false) {\n    initialValues.value = klona(values);\n    originalInitialValues.value = klona(values);\n\n    if (!updateFields) {\n      return;\n    } // update the pristine non-touched fields\n    // those are excluded because it's unlikely you want to change the form values using initial values\n    // we mostly watch them for API population or newly inserted fields\n    // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\n\n\n    keysOf(fields.value).forEach(fieldPath => {\n      const field = fields.value[fieldPath];\n      const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\n\n      if (!field || wasTouched) {\n        return;\n      }\n\n      const newValue = getFromPath(initialValues.value, fieldPath);\n      setInPath(formValues, fieldPath, klona(newValue));\n    });\n  }\n\n  if (isRef(providedValues)) {\n    watch(providedValues, value => {\n      setInitialValues(value, true);\n    }, {\n      deep: true\n    });\n  }\n\n  return {\n    initialValues,\n    originalInitialValues,\n    setInitialValues\n  };\n}\n\nfunction useErrorBag(initialErrors) {\n  const errorBag = ref({});\n\n  function normalizeErrorItem(message) {\n    return Array.isArray(message) ? message : message ? [message] : [];\n  }\n  /**\r\n   * Manually sets an error message on a specific field\r\n   */\n\n\n  function setFieldErrorBag(field, message) {\n    if (!message) {\n      delete errorBag.value[field];\n      return;\n    }\n\n    errorBag.value[field] = normalizeErrorItem(message);\n  }\n  /**\r\n   * Sets errors for the fields specified in the object\r\n   */\n\n\n  function setErrorBag(fields) {\n    errorBag.value = keysOf(fields).reduce((acc, key) => {\n      const message = fields[key];\n\n      if (message) {\n        acc[key] = normalizeErrorItem(message);\n      }\n\n      return acc;\n    }, {});\n  }\n\n  if (initialErrors) {\n    setErrorBag(initialErrors);\n  }\n\n  return {\n    errorBag,\n    setErrorBag,\n    setFieldErrorBag\n  };\n}\n\nconst FormImpl = defineComponent({\n  name: 'Form',\n  inheritAttrs: false,\n  props: {\n    as: {\n      type: String,\n      default: 'form'\n    },\n    validationSchema: {\n      type: Object,\n      default: undefined\n    },\n    initialValues: {\n      type: Object,\n      default: undefined\n    },\n    initialErrors: {\n      type: Object,\n      default: undefined\n    },\n    initialTouched: {\n      type: Object,\n      default: undefined\n    },\n    validateOnMount: {\n      type: Boolean,\n      default: false\n    },\n    onSubmit: {\n      type: Function,\n      default: undefined\n    },\n    onInvalidSubmit: {\n      type: Function,\n      default: undefined\n    },\n    keepValues: {\n      type: Boolean,\n      default: false\n    }\n  },\n\n  setup(props, ctx) {\n    const initialValues = toRef(props, 'initialValues');\n    const validationSchema = toRef(props, 'validationSchema');\n    const keepValues = toRef(props, 'keepValues');\n    const {\n      errors,\n      values,\n      meta,\n      isSubmitting,\n      submitCount,\n      controlledValues,\n      validate,\n      validateField,\n      handleReset,\n      resetForm,\n      handleSubmit,\n      setErrors,\n      setFieldError,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched\n    } = useForm({\n      validationSchema: validationSchema.value ? validationSchema : undefined,\n      initialValues,\n      initialErrors: props.initialErrors,\n      initialTouched: props.initialTouched,\n      validateOnMount: props.validateOnMount,\n      keepValuesOnUnmount: keepValues\n    });\n    const submitForm = handleSubmit((_, {\n      evt\n    }) => {\n      if (isFormSubmitEvent(evt)) {\n        evt.target.submit();\n      }\n    }, props.onInvalidSubmit);\n    const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\n\n    function handleFormReset(e) {\n      if (isEvent(e)) {\n        // Prevent default form reset behavior\n        e.preventDefault();\n      }\n\n      handleReset();\n\n      if (typeof ctx.attrs.onReset === 'function') {\n        ctx.attrs.onReset();\n      }\n    }\n\n    function handleScopedSlotSubmit(evt, onSubmit) {\n      const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\n      return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\n    }\n\n    function slotProps() {\n      return {\n        meta: meta.value,\n        errors: errors.value,\n        values: values,\n        isSubmitting: isSubmitting.value,\n        submitCount: submitCount.value,\n        controlledValues: controlledValues.value,\n        validate,\n        validateField,\n        handleSubmit: handleScopedSlotSubmit,\n        handleReset,\n        submitForm,\n        setErrors,\n        setFieldError,\n        setFieldValue,\n        setValues,\n        setFieldTouched,\n        setTouched,\n        resetForm\n      };\n    } // expose these functions and methods as part of public API\n\n\n    ctx.expose({\n      setFieldError,\n      setErrors,\n      setFieldValue,\n      setValues,\n      setFieldTouched,\n      setTouched,\n      resetForm,\n      validate,\n      validateField\n    });\n    return function renderForm() {\n      // avoid resolving the form component as itself\n      const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\n      const children = normalizeChildren(tag, ctx, slotProps);\n\n      if (!props.as) {\n        return children;\n      } // Attributes to add on a native `form` tag\n\n\n      const formAttrs = props.as === 'form' ? {\n        // Disables native validation as vee-validate will handle it.\n        novalidate: true\n      } : {};\n      return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), {\n        onSubmit,\n        onReset: handleFormReset\n      }), children);\n    };\n  }\n\n});\nconst Form = FormImpl;\n\nfunction useFieldArray(arrayPath) {\n  const form = injectWithSelf(FormContextKey, undefined);\n  const fields = ref([]); // eslint-disable-next-line @typescript-eslint/no-empty-function\n\n  const noOp = () => {};\n\n  const noOpApi = {\n    fields,\n    remove: noOp,\n    push: noOp,\n    swap: noOp,\n    insert: noOp,\n    update: noOp,\n    replace: noOp,\n    prepend: noOp,\n    move: noOp\n  };\n\n  if (!form) {\n    warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\n    return noOpApi;\n  }\n\n  if (!unref(arrayPath)) {\n    warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\n    return noOpApi;\n  }\n\n  const alreadyExists = form.fieldArrays.find(a => unref(a.path) === unref(arrayPath));\n\n  if (alreadyExists) {\n    return alreadyExists;\n  }\n\n  let entryCounter = 0;\n\n  function initFields() {\n    const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n    fields.value = currentValues.map(createEntry);\n    updateEntryFlags();\n  }\n\n  initFields();\n\n  function updateEntryFlags() {\n    const fieldsLength = fields.value.length;\n\n    for (let i = 0; i < fieldsLength; i++) {\n      const entry = fields.value[i];\n      entry.isFirst = i === 0;\n      entry.isLast = i === fieldsLength - 1;\n    }\n  }\n\n  function createEntry(value) {\n    const key = entryCounter++;\n    const entry = {\n      key,\n      value: computedDeep({\n        get() {\n          const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\n          const idx = fields.value.findIndex(e => e.key === key);\n          return idx === -1 ? value : currentValues[idx];\n        },\n\n        set(value) {\n          const idx = fields.value.findIndex(e => e.key === key);\n\n          if (idx === -1) {\n            warn(`Attempting to update a non-existent array item`);\n            return;\n          }\n\n          update(idx, value);\n        }\n\n      }),\n      isFirst: false,\n      isLast: false\n    };\n    return entry;\n  }\n\n  function remove(idx) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!pathValue || !Array.isArray(pathValue)) {\n      return;\n    }\n\n    const newValue = [...pathValue];\n    newValue.splice(idx, 1);\n    form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.splice(idx, 1);\n    updateEntryFlags();\n  }\n\n  function push(value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n\n    const newValue = [...normalizedPathValue];\n    newValue.push(value);\n    form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.push(createEntry(value));\n    updateEntryFlags();\n  }\n\n  function swap(indexA, indexB) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\n      return;\n    }\n\n    const newValue = [...pathValue];\n    const newFields = [...fields.value]; // the old switcheroo\n\n    const temp = newValue[indexA];\n    newValue[indexA] = newValue[indexB];\n    newValue[indexB] = temp;\n    const tempEntry = newFields[indexA];\n    newFields[indexA] = newFields[indexB];\n    newFields[indexB] = tempEntry;\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n\n  function insert(idx, value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!Array.isArray(pathValue) || pathValue.length < idx) {\n      return;\n    }\n\n    const newValue = [...pathValue];\n    const newFields = [...fields.value];\n    newValue.splice(idx, 0, value);\n    newFields.splice(idx, 0, createEntry(value));\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n\n  function replace(arr) {\n    const pathName = unref(arrayPath);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\n    initFields();\n  }\n\n  function update(idx, value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n\n    if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\n      return;\n    }\n\n    form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\n    form === null || form === void 0 ? void 0 : form.validate({\n      mode: 'validated-only'\n    });\n  }\n\n  function prepend(value) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\n\n    if (!Array.isArray(normalizedPathValue)) {\n      return;\n    }\n\n    const newValue = [value, ...normalizedPathValue];\n    form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value.unshift(createEntry(value));\n    updateEntryFlags();\n  }\n\n  function move(oldIdx, newIdx) {\n    const pathName = unref(arrayPath);\n    const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\n    const newValue = isNullOrUndefined(pathValue) ? [] : [...pathValue];\n\n    if (!Array.isArray(pathValue) || !(oldIdx in pathValue) || !(newIdx in pathValue)) {\n      return;\n    }\n\n    const newFields = [...fields.value];\n    const movedItem = newFields[oldIdx];\n    newFields.splice(oldIdx, 1);\n    newFields.splice(newIdx, 0, movedItem);\n    const movedValue = newValue[oldIdx];\n    newValue.splice(oldIdx, 1);\n    newValue.splice(newIdx, 0, movedValue);\n    form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\n    fields.value = newFields;\n    updateEntryFlags();\n  }\n\n  const fieldArrayCtx = {\n    fields,\n    remove,\n    push,\n    swap,\n    insert,\n    update,\n    replace,\n    prepend,\n    move\n  };\n  form.fieldArrays.push(Object.assign({\n    path: arrayPath,\n    reset: initFields\n  }, fieldArrayCtx));\n  onBeforeUnmount(() => {\n    const idx = form.fieldArrays.findIndex(i => unref(i.path) === unref(arrayPath));\n\n    if (idx >= 0) {\n      form.fieldArrays.splice(idx, 1);\n    }\n  });\n  return fieldArrayCtx;\n}\n\nconst FieldArrayImpl = defineComponent({\n  name: 'FieldArray',\n  inheritAttrs: false,\n  props: {\n    name: {\n      type: String,\n      required: true\n    }\n  },\n\n  setup(props, ctx) {\n    const {\n      push,\n      remove,\n      swap,\n      insert,\n      replace,\n      update,\n      prepend,\n      move,\n      fields\n    } = useFieldArray(toRef(props, 'name'));\n\n    function slotProps() {\n      return {\n        fields: fields.value,\n        push,\n        remove,\n        swap,\n        insert,\n        update,\n        replace,\n        prepend,\n        move\n      };\n    }\n\n    ctx.expose({\n      push,\n      remove,\n      swap,\n      insert,\n      update,\n      replace,\n      prepend,\n      move\n    });\n    return () => {\n      const children = normalizeChildren(undefined, ctx, slotProps);\n      return children;\n    };\n  }\n\n});\nconst FieldArray = FieldArrayImpl;\nconst ErrorMessageImpl = defineComponent({\n  name: 'ErrorMessage',\n  props: {\n    as: {\n      type: String,\n      default: undefined\n    },\n    name: {\n      type: String,\n      required: true\n    }\n  },\n\n  setup(props, ctx) {\n    const form = inject(FormContextKey, undefined);\n    const message = computed(() => {\n      return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\n    });\n\n    function slotProps() {\n      return {\n        message: message.value\n      };\n    }\n\n    return () => {\n      // Renders nothing if there are no messages\n      if (!message.value) {\n        return undefined;\n      }\n\n      const tag = props.as ? resolveDynamicComponent(props.as) : props.as;\n      const children = normalizeChildren(tag, ctx, slotProps);\n      const attrs = Object.assign({\n        role: 'alert'\n      }, ctx.attrs); // If no tag was specified and there are children\n      // render the slot as is without wrapping it\n\n      if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\n        return children;\n      } // If no children in slot\n      // render whatever specified and fallback to a <span> with the message in it's contents\n\n\n      if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\n        return h(tag || 'span', attrs, message.value);\n      }\n\n      return h(tag, attrs, children);\n    };\n  }\n\n});\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return function resetForm(state) {\n    if (!form) {\n      return;\n    }\n\n    return form.resetForm(state);\n  };\n}\n/**\r\n * If a field is dirty or not\r\n */\n\n\nfunction useIsFieldDirty(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n\n    return field.meta.dirty;\n  });\n}\n/**\r\n * If a field is touched or not\r\n */\n\n\nfunction useIsFieldTouched(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n\n    return field.meta.touched;\n  });\n}\n/**\r\n * If a field is validated and is valid\r\n */\n\n\nfunction useIsFieldValid(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return false;\n    }\n\n    return field.meta.valid;\n  });\n}\n/**\r\n * If the form is submitting or not\r\n */\n\n\nfunction useIsSubmitting() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * Validates a single field\r\n */\n\n\nfunction useValidateField(path) {\n  const form = injectWithSelf(FormContextKey);\n  let field = path ? undefined : inject(FieldContextKey);\n  return function validateField() {\n    if (path) {\n      field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\n    }\n\n    if (!field) {\n      warn(`field with name ${unref(path)} was not found`);\n      return Promise.resolve({\n        errors: [],\n        valid: true\n      });\n    }\n\n    return field.validate();\n  };\n}\n/**\r\n * If the form is dirty or not\r\n */\n\n\nfunction useIsFormDirty() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * If the form is touched or not\r\n */\n\n\nfunction useIsFormTouched() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * If the form has been validated and is valid\r\n */\n\n\nfunction useIsFormValid() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\n  });\n}\n/**\r\n * Validate multiple fields\r\n */\n\n\nfunction useValidateForm() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return function validateField() {\n    if (!form) {\n      return Promise.resolve({\n        results: {},\n        errors: {},\n        valid: true\n      });\n    }\n\n    return form.validate();\n  };\n}\n/**\r\n * The number of form's submission count\r\n */\n\n\nfunction useSubmitCount() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    var _a;\n\n    return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\n  });\n}\n/**\r\n * Gives access to a field's current value\r\n */\n\n\nfunction useFieldValue(path) {\n  const form = injectWithSelf(FormContextKey); // We don't want to use self injected context as it doesn't make sense\n\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\n    }\n\n    return unref(field === null || field === void 0 ? void 0 : field.value);\n  });\n}\n/**\r\n * Gives access to a form's values\r\n */\n\n\nfunction useFormValues() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.values) || {};\n  });\n}\n/**\r\n * Gives access to all form errors\r\n */\n\n\nfunction useFormErrors() {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  return computed(() => {\n    return (form === null || form === void 0 ? void 0 : form.errors.value) || {};\n  });\n}\n/**\r\n * Gives access to a single field error\r\n */\n\n\nfunction useFieldError(path) {\n  const form = injectWithSelf(FormContextKey); // We don't want to use self injected context as it doesn't make sense\n\n  const field = path ? undefined : inject(FieldContextKey);\n  return computed(() => {\n    if (path) {\n      return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\n    }\n\n    return field === null || field === void 0 ? void 0 : field.errorMessage.value;\n  });\n}\n\nfunction useSubmitForm(cb) {\n  const form = injectWithSelf(FormContextKey);\n\n  if (!form) {\n    warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\n  }\n\n  const onSubmit = form ? form.handleSubmit(cb) : undefined;\n  return function submitForm(e) {\n    if (!onSubmit) {\n      return;\n    }\n\n    return onSubmit(e);\n  };\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, IS_ABSENT, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate };","map":{"version":3,"names":["getCurrentInstance","inject","warn","warn$1","ref","watch","unref","computed","reactive","onUnmounted","nextTick","onMounted","provide","isRef","onBeforeUnmount","defineComponent","toRef","resolveDynamicComponent","h","watchEffect","markRaw","setupDevtoolsPlugin","isCallable","fn","isNullOrUndefined","value","undefined","isObject","obj","Array","isArray","isIndex","Number","toNumber","n","parseFloat","isNaN","RULES","defineRule","id","validator","guardExtend","resolveRule","Error","FormContextKey","Symbol","FieldContextKey","IS_ABSENT","isClient","window","isLocator","__locatorRef","isYupValidator","validate","hasCheckedAttr","type","isContainerValue","isEmptyContainer","length","Object","keys","isNotNestedPath","path","test","isNativeMultiSelect","el","isNativeSelect","multiple","tagName","isNativeMultiSelectNode","tag","attrs","hasTruthyBindingValue","includes","shouldHaveValueBinding","isFormSubmitEvent","evt","isEvent","target","Event","srcElement","isPropPresent","prop","isEqual","a","b","constructor","i","Map","size","entries","has","get","isFile","name","lastModified","Set","ArrayBuffer","isView","RegExp","source","flags","valueOf","prototype","toString","hasOwnProperty","call","key","File","set","val","klona","enumerable","configurable","writable","defineProperty","x","k","list","tmp","str","create","__proto__","forEach","add","Date","buffer","slice","getOwnPropertySymbols","getOwnPropertyDescriptor","getOwnPropertyNames","cleanupNonNestedPath","replace","getFromPath","object","fallback","resolvedValue","split","filter","Boolean","reduce","acc","propKey","setInPath","unset","splice","unsetPath","pathValues","map","_","idx","join","keysOf","record","injectWithSelf","symbol","def","vm","provides","message","normalizeField","field","resolveNextCheckboxValue","currentValue","checkedValue","uncheckedValue","newVal","findIndex","v","push","throttle","func","limit","inThrottle","lastResult","args","context","setTimeout","apply","debounceAsync","inner","ms","timer","resolves","clearTimeout","result","r","Promise","resolve","applyModelModifiers","modifiers","number","withLatest","onDone","latestRun","runLatest","pending","computedDeep","baseRef","newValue","deep","normalizeChildren","slotProps","slots","default","_a","_b","getBoundValue","hasValueBinding","_value","normalizeEventValue","input","files","from","options","opt","selected","disabled","selectedOption","find","normalizeRules","rules","_$$isNormalized","prev","curr","params","normalizeParams","buildParams","rule","parsedRule","parseRule","provided","mapValueToLocator","createLocator","locator","crossTable","extractLocators","DEFAULT_CONFIG","generateMessage","bails","validateOnBlur","validateOnChange","validateOnInput","validateOnModelUpdate","currentConfig","assign","getConfig","setConfig","newConf","configure","shouldBail","formData","values","_validate","errors","valid","validateFieldWithYup","ctx","form","pipeline","isValid","_generateFieldError","normalizedContext","rulesKeys","_test","error","opts","abortEarly","then","catch","err","fillTargetValues","fieldCtx","normalize","param","validateYupSchema","schema","errorObjects","results","messages","validateObjectSchema","paths","validations","_c","fieldResult","names","bailsMap","isAllValid","validationResults","all","ID_COUNTER","useFieldState","init","initialValue","setInitialValue","_useFieldValue","modelValue","errorMessage","setErrors","_useFieldErrors","meta","_useFieldMeta","MAX_SAFE_INTEGER","setState","state","touched","modelRef","resolveInitialValue","initialValues","stageInitialValue","setFieldValue","validated","dirty","immediate","flush","normalizeErrors","errorBag","setFieldErrorBag","installDevtoolsPlugin","app","process","env","NODE_ENV","label","packageName","homepage","logo","setupApiHooks","DEVTOOLS_FORMS","DEVTOOLS_FIELDS","API","refreshInspector","sendInspectorState","INSPECTOR_ID","sendInspectorTree","registerFormWithDevTools","appContext","formId","_vm","registerSingleFieldWithDevtools","COLORS","success","unknown","white","black","blue","purple","orange","gray","SELECTED_NODE","api","addInspector","icon","noSelectionText","actions","tooltip","action","console","log","resetField","resetForm","on","getInspectorTree","payload","inspectorId","forms","fields","rootNodes","mapFormForDevtoolsInspector","mapFieldForDevtoolsInspector","getInspectorState","currentTab","decodeNodeId","nodeId","buildFormState","buildFieldState","textColor","bgColor","getTagTheme","formTreeNodes","fieldsByPath","fieldInstance","buildFormTree","tree","pop","children","c","String","encodeNodeId","tags","backgroundColor","isGroup","fieldItem","encodeIndex","fieldPath","fieldGroup","indexOf","idObject","f","ff","btoa","JSON","stringify","parse","atob","isSubmitting","submitCount","fieldOrForm","useField","useCheckboxField","_useField","validateOnMount","validateOnValueUpdate","controlled","keepValueOnUnmount","modelPropName","syncVModel","controlForm","normalizeOptions","injectedForm","markedForRemoval","useVModel","handleChange","handleBlur","normalizedRules","rulesValue","extractRuleFromSchema","validateCurrentValue","mode","validateSchema","validateWithStateMutation","validateValidStateOnly","validate$1","e","shouldValidate","setTouched","isTouched","unwatchValue","lastWatchedValue","watchValue","oldVal","validateFn","setValue","handleReset","oldValue","register","unregister","dependencies","rulesVal","deps","dep","depAcc","depName","depValue","oldDeps","defaults","valueProp","standalone","fieldName","patchCheckboxApi","checked","checkedVal","handleCheckboxChange","propName","emitName","props","getCurrentModelValue","emit","propValue","modelModifiers","FieldImpl","inheritAttrs","as","required","Function","keepValue","setup","validateField","onChangeHandler","handleChangeWithModel","handleInput","onInputHandler","handleInputWithModel","fieldProps","resolveValidationTriggers","baseOnBlur","onBlur","baseOnInput","onInput","baseOnChange","onChange","resolveTag","expose","reset","_d","Field","FORM_COUNTER","useForm","controlledModelPaths","RESET_LOCK","fieldArrays","formValues","setErrorBag","useErrorBag","initialErrors","bag","getFirstFieldAtPath","fieldOrGroup","fieldExists","fieldNames","fieldBailsMap","keepValuesOnUnmount","originalInitialValues","setInitialValues","useFormInitialValues","useFormMeta","controlledValues","validationSchema","debouncedSilentValidation","_validateSchema","debouncedValidation","formResult","fieldsById","formCtx","currentErrorsPaths","validation","setFieldError","applyFieldMutation","wasValidated","some","makeSubmissionFactory","onlyControlled","submitHandlerFactory","onValidationError","submissionHandler","preventDefault","stopPropagation","setFieldTouched","setValues","returnVal","handleSubmitImpl","handleSubmit","withControlled","registerField","unregisterField","unsetInitialValue","setFieldInitialValue","useFieldModel","isFieldGroup","mutation","mutateAllFields","force","clonedValue","createModel","newValues","insertFieldAtPath","rawField","fieldAtPath","removeFieldFromPath","newPath","oldPath","initialErrorMessage","shouldKeepValue","currentGroupValue","isSameGroup","valueIdx","every","updateOriginal","schemaValue","submitForm","submit","initialTouched","currentValues","MERGE_STRATEGIES","isDirty","calculateFlags","flat","flag","mergeMethod","providedValues","updateFields","wasTouched","normalizeErrorItem","FormImpl","onSubmit","onInvalidSubmit","keepValues","handleFormReset","onReset","handleScopedSlotSubmit","onSuccess","renderForm","formAttrs","novalidate","Form","useFieldArray","arrayPath","noOp","noOpApi","remove","swap","insert","update","prepend","move","alreadyExists","entryCounter","initFields","createEntry","updateEntryFlags","fieldsLength","entry","isFirst","isLast","pathName","pathValue","normalizedPathValue","indexA","indexB","newFields","temp","tempEntry","arr","unshift","oldIdx","newIdx","movedItem","movedValue","fieldArrayCtx","FieldArrayImpl","FieldArray","ErrorMessageImpl","role","ErrorMessage","useResetForm","useIsFieldDirty","useIsFieldTouched","useIsFieldValid","useIsSubmitting","useValidateField","useIsFormDirty","useIsFormTouched","useIsFormValid","useValidateForm","useSubmitCount","useFieldValue","useFormValues","useFormErrors","useFieldError","useSubmitForm","cb"],"sources":["/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/vee-validate/dist/vee-validate.esm.js"],"sourcesContent":["/**\n  * vee-validate v4.7.3\n  * (c) 2022 Abdelrahman Awad\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, warn as warn$1, ref, watch, unref, computed, reactive, onUnmounted, nextTick, onMounted, provide, isRef, onBeforeUnmount, defineComponent, toRef, resolveDynamicComponent, h, watchEffect, markRaw } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nfunction isCallable(fn) {\r\n    return typeof fn === 'function';\r\n}\r\nfunction isNullOrUndefined(value) {\r\n    return value === null || value === undefined;\r\n}\r\nconst isObject = (obj) => obj !== null && !!obj && typeof obj === 'object' && !Array.isArray(obj);\r\nfunction isIndex(value) {\r\n    return Number(value) >= 0;\r\n}\r\nfunction toNumber(value) {\r\n    const n = parseFloat(value);\r\n    return isNaN(n) ? value : n;\r\n}\n\nconst RULES = {};\r\n/**\r\n * Adds a custom validator to the list of validation rules.\r\n */\r\nfunction defineRule(id, validator) {\r\n    // makes sure new rules are properly formatted.\r\n    guardExtend(id, validator);\r\n    RULES[id] = validator;\r\n}\r\n/**\r\n * Gets an already defined rule\r\n */\r\nfunction resolveRule(id) {\r\n    return RULES[id];\r\n}\r\n/**\r\n * Guards from extension violations.\r\n */\r\nfunction guardExtend(id, validator) {\r\n    if (isCallable(validator)) {\r\n        return;\r\n    }\r\n    throw new Error(`Extension Error: The validator '${id}' must be a function.`);\r\n}\n\nconst FormContextKey = Symbol('vee-validate-form');\r\nconst FieldContextKey = Symbol('vee-validate-field-instance');\r\nconst IS_ABSENT = Symbol('Default empty value');\n\nconst isClient = typeof window !== 'undefined';\r\nfunction isLocator(value) {\r\n    return isCallable(value) && !!value.__locatorRef;\r\n}\r\nfunction isYupValidator(value) {\r\n    return !!value && isCallable(value.validate);\r\n}\r\nfunction hasCheckedAttr(type) {\r\n    return type === 'checkbox' || type === 'radio';\r\n}\r\nfunction isContainerValue(value) {\r\n    return isObject(value) || Array.isArray(value);\r\n}\r\n/**\r\n * True if the value is an empty object or array\r\n */\r\nfunction isEmptyContainer(value) {\r\n    if (Array.isArray(value)) {\r\n        return value.length === 0;\r\n    }\r\n    return isObject(value) && Object.keys(value).length === 0;\r\n}\r\n/**\r\n * Checks if the path opted out of nested fields using `[fieldName]` syntax\r\n */\r\nfunction isNotNestedPath(path) {\r\n    return /^\\[.+\\]$/i.test(path);\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 multi-select input element\r\n */\r\nfunction isNativeMultiSelect(el) {\r\n    return isNativeSelect(el) && el.multiple;\r\n}\r\n/**\r\n * Checks if an element is a native HTML5 select input element\r\n */\r\nfunction isNativeSelect(el) {\r\n    return el.tagName === 'SELECT';\r\n}\r\n/**\r\n * Checks if a tag name with attrs object will render a native multi-select element\r\n */\r\nfunction isNativeMultiSelectNode(tag, attrs) {\r\n    // The falsy value array is the values that Vue won't add the `multiple` prop if it has one of these values\r\n    const hasTruthyBindingValue = ![false, null, undefined, 0].includes(attrs.multiple) && !Number.isNaN(attrs.multiple);\r\n    return tag === 'select' && 'multiple' in attrs && hasTruthyBindingValue;\r\n}\r\n/**\r\n * Checks if a node should have a `:value` binding or not\r\n *\r\n * These nodes should not have a value binding\r\n * For files, because they are not reactive\r\n * For multi-selects because the value binding will reset the value\r\n */\r\nfunction shouldHaveValueBinding(tag, attrs) {\r\n    return !isNativeMultiSelectNode(tag, attrs) && attrs.type !== 'file' && !hasCheckedAttr(attrs.type);\r\n}\r\nfunction isFormSubmitEvent(evt) {\r\n    return isEvent(evt) && evt.target && 'submit' in evt.target;\r\n}\r\nfunction isEvent(evt) {\r\n    if (!evt) {\r\n        return false;\r\n    }\r\n    if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {\r\n        return true;\r\n    }\r\n    // this is for IE and Cypress #3161\r\n    /* istanbul ignore next */\r\n    if (evt && evt.srcElement) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction isPropPresent(obj, prop) {\r\n    return prop in obj && obj[prop] !== IS_ABSENT;\r\n}\r\n/**\r\n * Compares if two values are the same borrowed from:\r\n * https://github.com/epoberezkin/fast-deep-equal\r\n * We added a case for file matching since `Object.keys` doesn't work with Files.\r\n * */\r\nfunction isEqual(a, b) {\r\n    if (a === b)\r\n        return true;\r\n    if (a && b && typeof a === 'object' && typeof b === 'object') {\r\n        if (a.constructor !== b.constructor)\r\n            return false;\r\n        // eslint-disable-next-line no-var\r\n        var length, i, keys;\r\n        if (Array.isArray(a)) {\r\n            length = a.length;\r\n            // eslint-disable-next-line eqeqeq\r\n            if (length != b.length)\r\n                return false;\r\n            for (i = length; i-- !== 0;)\r\n                if (!isEqual(a[i], b[i]))\r\n                    return false;\r\n            return true;\r\n        }\r\n        if (a instanceof Map && b instanceof Map) {\r\n            if (a.size !== b.size)\r\n                return false;\r\n            for (i of a.entries())\r\n                if (!b.has(i[0]))\r\n                    return false;\r\n            for (i of a.entries())\r\n                if (!isEqual(i[1], b.get(i[0])))\r\n                    return false;\r\n            return true;\r\n        }\r\n        // We added this part for file comparison, arguably a little naive but should work for most cases.\r\n        // #3911\r\n        if (isFile(a) && isFile(b)) {\r\n            if (a.size !== b.size)\r\n                return false;\r\n            if (a.name !== b.name)\r\n                return false;\r\n            if (a.lastModified !== b.lastModified)\r\n                return false;\r\n            if (a.type !== b.type)\r\n                return false;\r\n            return true;\r\n        }\r\n        if (a instanceof Set && b instanceof Set) {\r\n            if (a.size !== b.size)\r\n                return false;\r\n            for (i of a.entries())\r\n                if (!b.has(i[0]))\r\n                    return false;\r\n            return true;\r\n        }\r\n        if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\r\n            length = a.length;\r\n            // eslint-disable-next-line eqeqeq\r\n            if (length != b.length)\r\n                return false;\r\n            for (i = length; i-- !== 0;)\r\n                if (a[i] !== b[i])\r\n                    return false;\r\n            return true;\r\n        }\r\n        if (a.constructor === RegExp)\r\n            return a.source === b.source && a.flags === b.flags;\r\n        if (a.valueOf !== Object.prototype.valueOf)\r\n            return a.valueOf() === b.valueOf();\r\n        if (a.toString !== Object.prototype.toString)\r\n            return a.toString() === b.toString();\r\n        keys = Object.keys(a);\r\n        length = keys.length;\r\n        if (length !== Object.keys(b).length)\r\n            return false;\r\n        for (i = length; i-- !== 0;)\r\n            if (!Object.prototype.hasOwnProperty.call(b, keys[i]))\r\n                return false;\r\n        for (i = length; i-- !== 0;) {\r\n            // eslint-disable-next-line no-var\r\n            var key = keys[i];\r\n            if (!isEqual(a[key], b[key]))\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n    // true if both NaN, false otherwise\r\n    // eslint-disable-next-line no-self-compare\r\n    return a !== a && b !== b;\r\n}\r\nfunction isFile(a) {\r\n    if (!isClient) {\r\n        return false;\r\n    }\r\n    return a instanceof File;\r\n}\n\nfunction set(obj, key, val) {\n\tif (typeof val.value === 'object') val.value = klona(val.value);\n\tif (!val.enumerable || val.get || val.set || !val.configurable || !val.writable || key === '__proto__') {\n\t\tObject.defineProperty(obj, key, val);\n\t} else obj[key] = val.value;\n}\n\nfunction klona(x) {\n\tif (typeof x !== 'object') return x;\n\n\tvar i=0, k, list, tmp, str=Object.prototype.toString.call(x);\n\n\tif (str === '[object Object]') {\n\t\ttmp = Object.create(x.__proto__ || null);\n\t} else if (str === '[object Array]') {\n\t\ttmp = Array(x.length);\n\t} else if (str === '[object Set]') {\n\t\ttmp = new Set;\n\t\tx.forEach(function (val) {\n\t\t\ttmp.add(klona(val));\n\t\t});\n\t} else if (str === '[object Map]') {\n\t\ttmp = new Map;\n\t\tx.forEach(function (val, key) {\n\t\t\ttmp.set(klona(key), klona(val));\n\t\t});\n\t} else if (str === '[object Date]') {\n\t\ttmp = new Date(+x);\n\t} else if (str === '[object RegExp]') {\n\t\ttmp = new RegExp(x.source, x.flags);\n\t} else if (str === '[object DataView]') {\n\t\ttmp = new x.constructor( klona(x.buffer) );\n\t} else if (str === '[object ArrayBuffer]') {\n\t\ttmp = x.slice(0);\n\t} else if (str.slice(-6) === 'Array]') {\n\t\t// ArrayBuffer.isView(x)\n\t\t// ~> `new` bcuz `Buffer.slice` => ref\n\t\ttmp = new x.constructor(x);\n\t}\n\n\tif (tmp) {\n\t\tfor (list=Object.getOwnPropertySymbols(x); i < list.length; i++) {\n\t\t\tset(tmp, list[i], Object.getOwnPropertyDescriptor(x, list[i]));\n\t\t}\n\n\t\tfor (i=0, list=Object.getOwnPropertyNames(x); i < list.length; i++) {\n\t\t\tif (Object.hasOwnProperty.call(tmp, k=list[i]) && tmp[k] === x[k]) continue;\n\t\t\tset(tmp, k, Object.getOwnPropertyDescriptor(x, k));\n\t\t}\n\t}\n\n\treturn tmp || x;\n}\n\nfunction cleanupNonNestedPath(path) {\r\n    if (isNotNestedPath(path)) {\r\n        return path.replace(/\\[|\\]/gi, '');\r\n    }\r\n    return path;\r\n}\r\nfunction getFromPath(object, path, fallback) {\r\n    if (!object) {\r\n        return fallback;\r\n    }\r\n    if (isNotNestedPath(path)) {\r\n        return object[cleanupNonNestedPath(path)];\r\n    }\r\n    const resolvedValue = (path || '')\r\n        .split(/\\.|\\[(\\d+)\\]/)\r\n        .filter(Boolean)\r\n        .reduce((acc, propKey) => {\r\n        if (isContainerValue(acc) && propKey in acc) {\r\n            return acc[propKey];\r\n        }\r\n        return fallback;\r\n    }, object);\r\n    return resolvedValue;\r\n}\r\n/**\r\n * Sets a nested property value in a path, creates the path properties if it doesn't exist\r\n */\r\nfunction setInPath(object, path, value) {\r\n    if (isNotNestedPath(path)) {\r\n        object[cleanupNonNestedPath(path)] = value;\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, set it\r\n        if (i === keys.length - 1) {\r\n            acc[keys[i]] = value;\r\n            return;\r\n        }\r\n        // Key does not exist, create a container for it\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            // container can be either an object or an array depending on the next key if it exists\r\n            acc[keys[i]] = isIndex(keys[i + 1]) ? [] : {};\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n}\r\nfunction unset(object, key) {\r\n    if (Array.isArray(object) && isIndex(key)) {\r\n        object.splice(Number(key), 1);\r\n        return;\r\n    }\r\n    if (isObject(object)) {\r\n        delete object[key];\r\n    }\r\n}\r\n/**\r\n * Removes a nested property from object\r\n */\r\nfunction unsetPath(object, path) {\r\n    if (isNotNestedPath(path)) {\r\n        delete object[cleanupNonNestedPath(path)];\r\n        return;\r\n    }\r\n    const keys = path.split(/\\.|\\[(\\d+)\\]/).filter(Boolean);\r\n    let acc = object;\r\n    for (let i = 0; i < keys.length; i++) {\r\n        // Last key, unset it\r\n        if (i === keys.length - 1) {\r\n            unset(acc, keys[i]);\r\n            break;\r\n        }\r\n        // Key does not exist, exit\r\n        if (!(keys[i] in acc) || isNullOrUndefined(acc[keys[i]])) {\r\n            break;\r\n        }\r\n        acc = acc[keys[i]];\r\n    }\r\n    const pathValues = keys.map((_, idx) => {\r\n        return getFromPath(object, keys.slice(0, idx).join('.'));\r\n    });\r\n    for (let i = pathValues.length - 1; i >= 0; i--) {\r\n        if (!isEmptyContainer(pathValues[i])) {\r\n            continue;\r\n        }\r\n        if (i === 0) {\r\n            unset(object, keys[0]);\r\n            continue;\r\n        }\r\n        unset(pathValues[i - 1], keys[i - 1]);\r\n    }\r\n}\r\n/**\r\n * A typed version of Object.keys\r\n */\r\nfunction keysOf(record) {\r\n    return Object.keys(record);\r\n}\r\n// Uses same component provide as its own injections\r\n// Due to changes in https://github.com/vuejs/vue-next/pull/2424\r\nfunction injectWithSelf(symbol, def = undefined) {\r\n    const vm = getCurrentInstance();\r\n    return (vm === null || vm === void 0 ? void 0 : vm.provides[symbol]) || inject(symbol, def);\r\n}\r\nfunction warn(message) {\r\n    warn$1(`[vee-validate]: ${message}`);\r\n}\r\n/**\r\n * Ensures we deal with a singular field value\r\n */\r\nfunction normalizeField(field) {\r\n    if (Array.isArray(field)) {\r\n        return field[0];\r\n    }\r\n    return field;\r\n}\r\nfunction resolveNextCheckboxValue(currentValue, checkedValue, uncheckedValue) {\r\n    if (Array.isArray(currentValue)) {\r\n        const newVal = [...currentValue];\r\n        // Use isEqual since checked object values can possibly fail the equality check #3883\r\n        const idx = newVal.findIndex(v => isEqual(v, checkedValue));\r\n        idx >= 0 ? newVal.splice(idx, 1) : newVal.push(checkedValue);\r\n        return newVal;\r\n    }\r\n    return isEqual(currentValue, checkedValue) ? uncheckedValue : checkedValue;\r\n}\r\n/**\r\n * Creates a throttled function that only invokes the provided function (`func`) at most once per within a given number of milliseconds\r\n * (`limit`)\r\n */\r\nfunction throttle(func, limit) {\r\n    let inThrottle;\r\n    let lastResult;\r\n    return function (...args) {\r\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\r\n        const context = this;\r\n        if (!inThrottle) {\r\n            inThrottle = true;\r\n            setTimeout(() => (inThrottle = false), limit);\r\n            lastResult = func.apply(context, args);\r\n        }\r\n        return lastResult;\r\n    };\r\n}\r\nfunction debounceAsync(inner, ms = 0) {\r\n    let timer = null;\r\n    let resolves = [];\r\n    return function (...args) {\r\n        // Run the function after a certain amount of time\r\n        if (timer) {\r\n            window.clearTimeout(timer);\r\n        }\r\n        timer = window.setTimeout(() => {\r\n            // Get the result of the inner function, then apply it to the resolve function of\r\n            // each promise that has been created since the last time the inner function was run\r\n            const result = inner(...args);\r\n            resolves.forEach(r => r(result));\r\n            resolves = [];\r\n        }, ms);\r\n        return new Promise(resolve => resolves.push(resolve));\r\n    };\r\n}\r\nfunction applyModelModifiers(value, modifiers) {\r\n    if (!isObject(modifiers)) {\r\n        return value;\r\n    }\r\n    if (modifiers.number) {\r\n        return toNumber(value);\r\n    }\r\n    return value;\r\n}\r\nfunction withLatest(fn, onDone) {\r\n    let latestRun;\r\n    return async function runLatest(...args) {\r\n        const pending = fn(...args);\r\n        latestRun = pending;\r\n        const result = await pending;\r\n        if (pending !== latestRun) {\r\n            return result;\r\n        }\r\n        latestRun = undefined;\r\n        onDone(result, args);\r\n        return result;\r\n    };\r\n}\r\nfunction computedDeep({ get, set }) {\r\n    const baseRef = ref(klona(get()));\r\n    watch(get, newValue => {\r\n        if (isEqual(newValue, baseRef.value)) {\r\n            return;\r\n        }\r\n        baseRef.value = klona(newValue);\r\n    }, {\r\n        deep: true,\r\n    });\r\n    watch(baseRef, newValue => {\r\n        if (isEqual(newValue, get())) {\r\n            return;\r\n        }\r\n        set(klona(newValue));\r\n    }, {\r\n        deep: true,\r\n    });\r\n    return baseRef;\r\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\r\nconst normalizeChildren = (tag, context, slotProps) => {\r\n    if (!context.slots.default) {\r\n        return context.slots.default;\r\n    }\r\n    if (typeof tag === 'string' || !tag) {\r\n        return context.slots.default(slotProps());\r\n    }\r\n    return {\r\n        default: () => { var _a, _b; return (_b = (_a = context.slots).default) === null || _b === void 0 ? void 0 : _b.call(_a, slotProps()); },\r\n    };\r\n};\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction getBoundValue(el) {\r\n    if (hasValueBinding(el)) {\r\n        return el._value;\r\n    }\r\n    return undefined;\r\n}\r\n/**\r\n * Vue adds a `_value` prop at the moment on the input elements to store the REAL value on them, real values are different than the `value` attribute\r\n * as they do not get casted to strings unlike `el.value` which preserves user-code behavior\r\n */\r\nfunction hasValueBinding(el) {\r\n    return '_value' in el;\r\n}\n\nfunction normalizeEventValue(value) {\r\n    if (!isEvent(value)) {\r\n        return value;\r\n    }\r\n    const input = value.target;\r\n    // Vue sets the current bound value on `_value` prop\r\n    // for checkboxes it it should fetch the value binding type as is (boolean instead of string)\r\n    if (hasCheckedAttr(input.type) && hasValueBinding(input)) {\r\n        return getBoundValue(input);\r\n    }\r\n    if (input.type === 'file' && input.files) {\r\n        const files = Array.from(input.files);\r\n        return input.multiple ? files : files[0];\r\n    }\r\n    if (isNativeMultiSelect(input)) {\r\n        return Array.from(input.options)\r\n            .filter(opt => opt.selected && !opt.disabled)\r\n            .map(getBoundValue);\r\n    }\r\n    // makes sure we get the actual `option` bound value\r\n    // #3440\r\n    if (isNativeSelect(input)) {\r\n        const selectedOption = Array.from(input.options).find(opt => opt.selected);\r\n        return selectedOption ? getBoundValue(selectedOption) : input.value;\r\n    }\r\n    return input.value;\r\n}\n\n/**\r\n * Normalizes the given rules expression.\r\n */\r\nfunction normalizeRules(rules) {\r\n    const acc = {};\r\n    Object.defineProperty(acc, '_$$isNormalized', {\r\n        value: true,\r\n        writable: false,\r\n        enumerable: false,\r\n        configurable: false,\r\n    });\r\n    if (!rules) {\r\n        return acc;\r\n    }\r\n    // Object is already normalized, skip.\r\n    if (isObject(rules) && rules._$$isNormalized) {\r\n        return rules;\r\n    }\r\n    if (isObject(rules)) {\r\n        return Object.keys(rules).reduce((prev, curr) => {\r\n            const params = normalizeParams(rules[curr]);\r\n            if (rules[curr] !== false) {\r\n                prev[curr] = buildParams(params);\r\n            }\r\n            return prev;\r\n        }, acc);\r\n    }\r\n    /* istanbul ignore if */\r\n    if (typeof rules !== 'string') {\r\n        return acc;\r\n    }\r\n    return rules.split('|').reduce((prev, rule) => {\r\n        const parsedRule = parseRule(rule);\r\n        if (!parsedRule.name) {\r\n            return prev;\r\n        }\r\n        prev[parsedRule.name] = buildParams(parsedRule.params);\r\n        return prev;\r\n    }, acc);\r\n}\r\n/**\r\n * Normalizes a rule param.\r\n */\r\nfunction normalizeParams(params) {\r\n    if (params === true) {\r\n        return [];\r\n    }\r\n    if (Array.isArray(params)) {\r\n        return params;\r\n    }\r\n    if (isObject(params)) {\r\n        return params;\r\n    }\r\n    return [params];\r\n}\r\nfunction buildParams(provided) {\r\n    const mapValueToLocator = (value) => {\r\n        // A target param using interpolation\r\n        if (typeof value === 'string' && value[0] === '@') {\r\n            return createLocator(value.slice(1));\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(provided)) {\r\n        return provided.map(mapValueToLocator);\r\n    }\r\n    // #3073\r\n    if (provided instanceof RegExp) {\r\n        return [provided];\r\n    }\r\n    return Object.keys(provided).reduce((prev, key) => {\r\n        prev[key] = mapValueToLocator(provided[key]);\r\n        return prev;\r\n    }, {});\r\n}\r\n/**\r\n * Parses a rule string expression.\r\n */\r\nconst parseRule = (rule) => {\r\n    let params = [];\r\n    const name = rule.split(':')[0];\r\n    if (rule.includes(':')) {\r\n        params = rule.split(':').slice(1).join(':').split(',');\r\n    }\r\n    return { name, params };\r\n};\r\nfunction createLocator(value) {\r\n    const locator = (crossTable) => {\r\n        const val = getFromPath(crossTable, value) || crossTable[value];\r\n        return val;\r\n    };\r\n    locator.__locatorRef = value;\r\n    return locator;\r\n}\r\nfunction extractLocators(params) {\r\n    if (Array.isArray(params)) {\r\n        return params.filter(isLocator);\r\n    }\r\n    return keysOf(params)\r\n        .filter(key => isLocator(params[key]))\r\n        .map(key => params[key]);\r\n}\n\nconst DEFAULT_CONFIG = {\r\n    generateMessage: ({ field }) => `${field} is not valid.`,\r\n    bails: true,\r\n    validateOnBlur: true,\r\n    validateOnChange: true,\r\n    validateOnInput: false,\r\n    validateOnModelUpdate: true,\r\n};\r\nlet currentConfig = Object.assign({}, DEFAULT_CONFIG);\r\nconst getConfig = () => currentConfig;\r\nconst setConfig = (newConf) => {\r\n    currentConfig = Object.assign(Object.assign({}, currentConfig), newConf);\r\n};\r\nconst configure = setConfig;\n\n/**\r\n * Validates a value against the rules.\r\n */\r\nasync function validate(value, rules, options = {}) {\r\n    const shouldBail = options === null || options === void 0 ? void 0 : options.bails;\r\n    const field = {\r\n        name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',\r\n        rules,\r\n        bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,\r\n        formData: (options === null || options === void 0 ? void 0 : options.values) || {},\r\n    };\r\n    const result = await _validate(field, value);\r\n    const errors = result.errors;\r\n    return {\r\n        errors,\r\n        valid: !errors.length,\r\n    };\r\n}\r\n/**\r\n * Starts the validation process.\r\n */\r\nasync function _validate(field, value) {\r\n    if (isYupValidator(field.rules)) {\r\n        return validateFieldWithYup(value, field.rules, { bails: field.bails });\r\n    }\r\n    // if a generic function or chain of generic functions\r\n    if (isCallable(field.rules) || Array.isArray(field.rules)) {\r\n        const ctx = {\r\n            field: field.name,\r\n            form: field.formData,\r\n            value: value,\r\n        };\r\n        // Normalize the pipeline\r\n        const pipeline = Array.isArray(field.rules) ? field.rules : [field.rules];\r\n        const length = pipeline.length;\r\n        const errors = [];\r\n        for (let i = 0; i < length; i++) {\r\n            const rule = pipeline[i];\r\n            const result = await rule(value, ctx);\r\n            const isValid = typeof result !== 'string' && result;\r\n            if (isValid) {\r\n                continue;\r\n            }\r\n            const message = typeof result === 'string' ? result : _generateFieldError(ctx);\r\n            errors.push(message);\r\n            if (field.bails) {\r\n                return {\r\n                    errors,\r\n                };\r\n            }\r\n        }\r\n        return {\r\n            errors,\r\n        };\r\n    }\r\n    const normalizedContext = Object.assign(Object.assign({}, field), { rules: normalizeRules(field.rules) });\r\n    const errors = [];\r\n    const rulesKeys = Object.keys(normalizedContext.rules);\r\n    const length = rulesKeys.length;\r\n    for (let i = 0; i < length; i++) {\r\n        const rule = rulesKeys[i];\r\n        const result = await _test(normalizedContext, value, {\r\n            name: rule,\r\n            params: normalizedContext.rules[rule],\r\n        });\r\n        if (result.error) {\r\n            errors.push(result.error);\r\n            if (field.bails) {\r\n                return {\r\n                    errors,\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Handles yup validation\r\n */\r\nasync function validateFieldWithYup(value, validator, opts) {\r\n    var _a;\r\n    const errors = await validator\r\n        .validate(value, {\r\n        abortEarly: (_a = opts.bails) !== null && _a !== void 0 ? _a : true,\r\n    })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name === 'ValidationError') {\r\n            return err.errors;\r\n        }\r\n        // re-throw the error so we don't hide it\r\n        throw err;\r\n    });\r\n    return {\r\n        errors,\r\n    };\r\n}\r\n/**\r\n * Tests a single input value against a rule.\r\n */\r\nasync function _test(field, value, rule) {\r\n    const validator = resolveRule(rule.name);\r\n    if (!validator) {\r\n        throw new Error(`No such validator '${rule.name}' exists.`);\r\n    }\r\n    const params = fillTargetValues(rule.params, field.formData);\r\n    const ctx = {\r\n        field: field.name,\r\n        value,\r\n        form: field.formData,\r\n        rule: Object.assign(Object.assign({}, rule), { params }),\r\n    };\r\n    const result = await validator(value, params, ctx);\r\n    if (typeof result === 'string') {\r\n        return {\r\n            error: result,\r\n        };\r\n    }\r\n    return {\r\n        error: result ? undefined : _generateFieldError(ctx),\r\n    };\r\n}\r\n/**\r\n * Generates error messages.\r\n */\r\nfunction _generateFieldError(fieldCtx) {\r\n    const message = getConfig().generateMessage;\r\n    if (!message) {\r\n        return 'Field is invalid';\r\n    }\r\n    return message(fieldCtx);\r\n}\r\nfunction fillTargetValues(params, crossTable) {\r\n    const normalize = (value) => {\r\n        if (isLocator(value)) {\r\n            return value(crossTable);\r\n        }\r\n        return value;\r\n    };\r\n    if (Array.isArray(params)) {\r\n        return params.map(normalize);\r\n    }\r\n    return Object.keys(params).reduce((acc, param) => {\r\n        acc[param] = normalize(params[param]);\r\n        return acc;\r\n    }, {});\r\n}\r\nasync function validateYupSchema(schema, values) {\r\n    const errorObjects = await schema\r\n        .validate(values, { abortEarly: false })\r\n        .then(() => [])\r\n        .catch((err) => {\r\n        // Yup errors have a name prop one them.\r\n        // https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string\r\n        if (err.name !== 'ValidationError') {\r\n            throw err;\r\n        }\r\n        // list of aggregated errors\r\n        return err.inner || [];\r\n    });\r\n    const results = {};\r\n    const errors = {};\r\n    for (const error of errorObjects) {\r\n        const messages = error.errors;\r\n        results[error.path] = { valid: !messages.length, errors: messages };\r\n        if (messages.length) {\r\n            errors[error.path] = messages[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: !errorObjects.length,\r\n        results,\r\n        errors,\r\n    };\r\n}\r\nasync function validateObjectSchema(schema, values, opts) {\r\n    const paths = keysOf(schema);\r\n    const validations = paths.map(async (path) => {\r\n        var _a, _b, _c;\r\n        const fieldResult = await validate(getFromPath(values, path), schema[path], {\r\n            name: ((_a = opts === null || opts === void 0 ? void 0 : opts.names) === null || _a === void 0 ? void 0 : _a[path]) || path,\r\n            values: values,\r\n            bails: (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.bailsMap) === null || _b === void 0 ? void 0 : _b[path]) !== null && _c !== void 0 ? _c : true,\r\n        });\r\n        return Object.assign(Object.assign({}, fieldResult), { path });\r\n    });\r\n    let isAllValid = true;\r\n    const validationResults = await Promise.all(validations);\r\n    const results = {};\r\n    const errors = {};\r\n    for (const result of validationResults) {\r\n        results[result.path] = {\r\n            valid: result.valid,\r\n            errors: result.errors,\r\n        };\r\n        if (!result.valid) {\r\n            isAllValid = false;\r\n            errors[result.path] = result.errors[0];\r\n        }\r\n    }\r\n    return {\r\n        valid: isAllValid,\r\n        results,\r\n        errors,\r\n    };\r\n}\n\nlet ID_COUNTER = 0;\r\nfunction useFieldState(path, init) {\r\n    const { value, initialValue, setInitialValue } = _useFieldValue(path, init.modelValue, init.form);\r\n    const { errorMessage, errors, setErrors } = _useFieldErrors(path, init.form);\r\n    const meta = _useFieldMeta(value, initialValue, errors);\r\n    const id = ID_COUNTER >= Number.MAX_SAFE_INTEGER ? 0 : ++ID_COUNTER;\r\n    function setState(state) {\r\n        var _a;\r\n        if ('value' in state) {\r\n            value.value = state.value;\r\n        }\r\n        if ('errors' in state) {\r\n            setErrors(state.errors);\r\n        }\r\n        if ('touched' in state) {\r\n            meta.touched = (_a = state.touched) !== null && _a !== void 0 ? _a : meta.touched;\r\n        }\r\n        if ('initialValue' in state) {\r\n            setInitialValue(state.initialValue);\r\n        }\r\n    }\r\n    return {\r\n        id,\r\n        path,\r\n        value,\r\n        initialValue,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        setState,\r\n    };\r\n}\r\n/**\r\n * Creates the field value and resolves the initial value\r\n */\r\nfunction _useFieldValue(path, modelValue, form) {\r\n    const modelRef = ref(unref(modelValue));\r\n    function resolveInitialValue() {\r\n        if (!form) {\r\n            return unref(modelRef);\r\n        }\r\n        return getFromPath(form.meta.value.initialValues, unref(path), unref(modelRef));\r\n    }\r\n    function setInitialValue(value) {\r\n        if (!form) {\r\n            modelRef.value = value;\r\n            return;\r\n        }\r\n        form.stageInitialValue(unref(path), value, true);\r\n    }\r\n    const initialValue = computed(resolveInitialValue);\r\n    // if no form is associated, use a regular ref.\r\n    if (!form) {\r\n        const value = ref(resolveInitialValue());\r\n        return {\r\n            value,\r\n            initialValue,\r\n            setInitialValue,\r\n        };\r\n    }\r\n    // to set the initial value, first check if there is a current value, if there is then use it.\r\n    // otherwise use the configured initial value if it exists.\r\n    // prioritize model value over form values\r\n    // #3429\r\n    const currentValue = modelValue ? unref(modelValue) : getFromPath(form.values, unref(path), unref(initialValue));\r\n    form.stageInitialValue(unref(path), currentValue, true);\r\n    // otherwise use a computed setter that triggers the `setFieldValue`\r\n    const value = computed({\r\n        get() {\r\n            return getFromPath(form.values, unref(path));\r\n        },\r\n        set(newVal) {\r\n            form.setFieldValue(unref(path), newVal);\r\n        },\r\n    });\r\n    return {\r\n        value,\r\n        initialValue,\r\n        setInitialValue,\r\n    };\r\n}\r\n/**\r\n * Creates meta flags state and some associated effects with them\r\n */\r\nfunction _useFieldMeta(currentValue, initialValue, errors) {\r\n    const meta = reactive({\r\n        touched: false,\r\n        pending: false,\r\n        valid: true,\r\n        validated: !!unref(errors).length,\r\n        initialValue: computed(() => unref(initialValue)),\r\n        dirty: computed(() => {\r\n            return !isEqual(unref(currentValue), unref(initialValue));\r\n        }),\r\n    });\r\n    watch(errors, value => {\r\n        meta.valid = !value.length;\r\n    }, {\r\n        immediate: true,\r\n        flush: 'sync',\r\n    });\r\n    return meta;\r\n}\r\n/**\r\n * Creates the error message state for the field state\r\n */\r\nfunction _useFieldErrors(path, form) {\r\n    function normalizeErrors(messages) {\r\n        if (!messages) {\r\n            return [];\r\n        }\r\n        return Array.isArray(messages) ? messages : [messages];\r\n    }\r\n    if (!form) {\r\n        const errors = ref([]);\r\n        return {\r\n            errors,\r\n            errorMessage: computed(() => errors.value[0]),\r\n            setErrors: (messages) => {\r\n                errors.value = normalizeErrors(messages);\r\n            },\r\n        };\r\n    }\r\n    const errors = computed(() => form.errorBag.value[unref(path)] || []);\r\n    return {\r\n        errors,\r\n        errorMessage: computed(() => errors.value[0]),\r\n        setErrors: (messages) => {\r\n            form.setFieldErrorBag(unref(path), normalizeErrors(messages));\r\n        },\r\n    };\r\n}\n\nfunction installDevtoolsPlugin(app) {\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        setupDevtoolsPlugin({\r\n            id: 'vee-validate-devtools-plugin',\r\n            label: 'VeeValidate Plugin',\r\n            packageName: 'vee-validate',\r\n            homepage: 'https://vee-validate.logaretm.com/v4',\r\n            app,\r\n            logo: 'https://vee-validate.logaretm.com/v4/logo.png',\r\n        }, setupApiHooks);\r\n    }\r\n}\r\nconst DEVTOOLS_FORMS = {};\r\nconst DEVTOOLS_FIELDS = {};\r\nlet API;\r\nconst refreshInspector = throttle(() => {\r\n    setTimeout(async () => {\r\n        await nextTick();\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorState(INSPECTOR_ID);\r\n        API === null || API === void 0 ? void 0 : API.sendInspectorTree(INSPECTOR_ID);\r\n    }, 100);\r\n}, 100);\r\nfunction registerFormWithDevTools(form) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FORMS[form.formId] = Object.assign({}, form);\r\n    DEVTOOLS_FORMS[form.formId]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FORMS[form.formId];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nfunction registerSingleFieldWithDevtools(field) {\r\n    const vm = getCurrentInstance();\r\n    if (!API) {\r\n        const app = vm === null || vm === void 0 ? void 0 : vm.appContext.app;\r\n        if (!app) {\r\n            return;\r\n        }\r\n        installDevtoolsPlugin(app);\r\n    }\r\n    DEVTOOLS_FIELDS[field.id] = Object.assign({}, field);\r\n    DEVTOOLS_FIELDS[field.id]._vm = vm;\r\n    onUnmounted(() => {\r\n        delete DEVTOOLS_FIELDS[field.id];\r\n        refreshInspector();\r\n    });\r\n    refreshInspector();\r\n}\r\nconst INSPECTOR_ID = 'vee-validate-inspector';\r\nconst COLORS = {\r\n    error: 0xbd4b4b,\r\n    success: 0x06d77b,\r\n    unknown: 0x54436b,\r\n    white: 0xffffff,\r\n    black: 0x000000,\r\n    blue: 0x035397,\r\n    purple: 0xb980f0,\r\n    orange: 0xf5a962,\r\n    gray: 0xbbbfca,\r\n};\r\nlet SELECTED_NODE = null;\r\nfunction setupApiHooks(api) {\r\n    API = api;\r\n    api.addInspector({\r\n        id: INSPECTOR_ID,\r\n        icon: 'rule',\r\n        label: 'vee-validate',\r\n        noSelectionText: 'Select a vee-validate node to inspect',\r\n        actions: [\r\n            {\r\n                icon: 'done_outline',\r\n                tooltip: 'Validate selected item',\r\n                action: async () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    const result = await SELECTED_NODE.validate();\r\n                    console.log(result);\r\n                },\r\n            },\r\n            {\r\n                icon: 'delete_sweep',\r\n                tooltip: 'Clear validation state of the selected item',\r\n                action: () => {\r\n                    if (!SELECTED_NODE) {\r\n                        console.error('There is not a valid selected vee-validate node or component');\r\n                        return;\r\n                    }\r\n                    if ('id' in SELECTED_NODE) {\r\n                        SELECTED_NODE.resetField();\r\n                        return;\r\n                    }\r\n                    SELECTED_NODE.resetForm();\r\n                },\r\n            },\r\n        ],\r\n    });\r\n    api.on.getInspectorTree(payload => {\r\n        if (payload.inspectorId !== INSPECTOR_ID) {\r\n            return;\r\n        }\r\n        const forms = Object.values(DEVTOOLS_FORMS);\r\n        const fields = Object.values(DEVTOOLS_FIELDS);\r\n        payload.rootNodes = [\r\n            ...forms.map(mapFormForDevtoolsInspector),\r\n            ...fields.map(field => mapFieldForDevtoolsInspector(field)),\r\n        ];\r\n    });\r\n    api.on.getInspectorState((payload, ctx) => {\r\n        if (payload.inspectorId !== INSPECTOR_ID || ctx.currentTab !== `custom-inspector:${INSPECTOR_ID}`) {\r\n            return;\r\n        }\r\n        const { form, field, type } = decodeNodeId(payload.nodeId);\r\n        if (form && type === 'form') {\r\n            payload.state = buildFormState(form);\r\n            SELECTED_NODE = form;\r\n            return;\r\n        }\r\n        if (field && type === 'field') {\r\n            payload.state = buildFieldState(field);\r\n            SELECTED_NODE = field;\r\n            return;\r\n        }\r\n        SELECTED_NODE = null;\r\n    });\r\n}\r\nfunction mapFormForDevtoolsInspector(form) {\r\n    const { textColor, bgColor } = getTagTheme(form);\r\n    const formTreeNodes = {};\r\n    Object.values(form.fieldsByPath.value).forEach(field => {\r\n        const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n        if (!fieldInstance) {\r\n            return;\r\n        }\r\n        setInPath(formTreeNodes, unref(fieldInstance.name), mapFieldForDevtoolsInspector(fieldInstance, form));\r\n    });\r\n    function buildFormTree(tree, path = []) {\r\n        const key = [...path].pop();\r\n        if ('id' in tree) {\r\n            return Object.assign(Object.assign({}, tree), { label: key || tree.label });\r\n        }\r\n        if (isObject(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: key || '',\r\n                children: Object.keys(tree).map(key => buildFormTree(tree[key], [...path, key])),\r\n            };\r\n        }\r\n        if (Array.isArray(tree)) {\r\n            return {\r\n                id: `${path.join('.')}`,\r\n                label: `${key}[]`,\r\n                children: tree.map((c, idx) => buildFormTree(c, [...path, String(idx)])),\r\n            };\r\n        }\r\n        return { id: '', label: '', children: [] };\r\n    }\r\n    const { children } = buildFormTree(formTreeNodes);\r\n    return {\r\n        id: encodeNodeId(form),\r\n        label: 'Form',\r\n        children,\r\n        tags: [\r\n            {\r\n                label: 'Form',\r\n                textColor,\r\n                backgroundColor: bgColor,\r\n            },\r\n            {\r\n                label: `${Object.keys(form.fieldsByPath.value).length} fields`,\r\n                textColor: COLORS.white,\r\n                backgroundColor: COLORS.unknown,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction mapFieldForDevtoolsInspector(field, form) {\r\n    const fieldInstance = normalizeField(field);\r\n    const { textColor, bgColor } = getTagTheme(fieldInstance);\r\n    const isGroup = Array.isArray(field) && field.length > 1;\r\n    return {\r\n        id: encodeNodeId(form, fieldInstance, !isGroup),\r\n        label: unref(fieldInstance.name),\r\n        children: Array.isArray(field) ? field.map(fieldItem => mapFieldForDevtoolsInspector(fieldItem, form)) : undefined,\r\n        tags: [\r\n            isGroup\r\n                ? undefined\r\n                : {\r\n                    label: 'Field',\r\n                    textColor,\r\n                    backgroundColor: bgColor,\r\n                },\r\n            !form\r\n                ? {\r\n                    label: 'Standalone',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.gray,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'checkbox'\r\n                ? {\r\n                    label: 'Checkbox',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.blue,\r\n                }\r\n                : undefined,\r\n            !isGroup && fieldInstance.type === 'radio'\r\n                ? {\r\n                    label: 'Radio',\r\n                    textColor: COLORS.white,\r\n                    backgroundColor: COLORS.purple,\r\n                }\r\n                : undefined,\r\n            isGroup\r\n                ? {\r\n                    label: 'Group',\r\n                    textColor: COLORS.black,\r\n                    backgroundColor: COLORS.orange,\r\n                }\r\n                : undefined,\r\n        ].filter(Boolean),\r\n    };\r\n}\r\nfunction encodeNodeId(form, field, encodeIndex = true) {\r\n    const fieldPath = form ? unref(field === null || field === void 0 ? void 0 : field.name) : field === null || field === void 0 ? void 0 : field.id;\r\n    const fieldGroup = fieldPath ? form === null || form === void 0 ? void 0 : form.fieldsByPath.value[fieldPath] : undefined;\r\n    let idx;\r\n    if (encodeIndex && field && Array.isArray(fieldGroup)) {\r\n        idx = fieldGroup.indexOf(field);\r\n    }\r\n    const idObject = { f: form === null || form === void 0 ? void 0 : form.formId, ff: fieldPath, idx, type: field ? 'field' : 'form' };\r\n    return btoa(JSON.stringify(idObject));\r\n}\r\nfunction decodeNodeId(nodeId) {\r\n    try {\r\n        const idObject = JSON.parse(atob(nodeId));\r\n        const form = DEVTOOLS_FORMS[idObject.f];\r\n        if (!form && idObject.ff) {\r\n            const field = DEVTOOLS_FIELDS[idObject.ff];\r\n            if (!field) {\r\n                return {};\r\n            }\r\n            return {\r\n                type: idObject.type,\r\n                field,\r\n            };\r\n        }\r\n        if (!form) {\r\n            return {};\r\n        }\r\n        const fieldGroup = form.fieldsByPath.value[idObject.ff];\r\n        return {\r\n            type: idObject.type,\r\n            form,\r\n            field: Array.isArray(fieldGroup) ? fieldGroup[idObject.idx || 0] : fieldGroup,\r\n        };\r\n    }\r\n    catch (err) {\r\n        // console.error(`Devtools: [vee-validate] Failed to parse node id ${nodeId}`);\r\n    }\r\n    return {};\r\n}\r\nfunction buildFieldState(field) {\r\n    const { errors, meta, value } = field;\r\n    return {\r\n        'Field state': [\r\n            { key: 'errors', value: errors.value },\r\n            {\r\n                key: 'initialValue',\r\n                value: meta.initialValue,\r\n            },\r\n            {\r\n                key: 'currentValue',\r\n                value: value.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.valid,\r\n            },\r\n        ],\r\n    };\r\n}\r\nfunction buildFormState(form) {\r\n    const { errorBag, meta, values, isSubmitting, submitCount } = form;\r\n    return {\r\n        'Form state': [\r\n            {\r\n                key: 'submitCount',\r\n                value: submitCount.value,\r\n            },\r\n            {\r\n                key: 'isSubmitting',\r\n                value: isSubmitting.value,\r\n            },\r\n            {\r\n                key: 'touched',\r\n                value: meta.value.touched,\r\n            },\r\n            {\r\n                key: 'dirty',\r\n                value: meta.value.dirty,\r\n            },\r\n            {\r\n                key: 'valid',\r\n                value: meta.value.valid,\r\n            },\r\n            {\r\n                key: 'initialValues',\r\n                value: meta.value.initialValues,\r\n            },\r\n            {\r\n                key: 'currentValues',\r\n                value: values,\r\n            },\r\n            {\r\n                key: 'errors',\r\n                value: keysOf(errorBag.value).reduce((acc, key) => {\r\n                    var _a;\r\n                    const message = (_a = errorBag.value[key]) === null || _a === void 0 ? void 0 : _a[0];\r\n                    if (message) {\r\n                        acc[key] = message;\r\n                    }\r\n                    return acc;\r\n                }, {}),\r\n            },\r\n        ],\r\n    };\r\n}\r\n/**\r\n * Resolves the tag color based on the form state\r\n */\r\nfunction getTagTheme(fieldOrForm) {\r\n    // const fallbackColors = {\r\n    //   bgColor: COLORS.unknown,\r\n    //   textColor: COLORS.white,\r\n    // };\r\n    const isValid = 'id' in fieldOrForm ? fieldOrForm.meta.valid : fieldOrForm.meta.value.valid;\r\n    return {\r\n        bgColor: isValid ? COLORS.success : COLORS.error,\r\n        textColor: isValid ? COLORS.black : COLORS.white,\r\n    };\r\n}\n\n/**\r\n * Creates a field composite.\r\n */\r\nfunction useField(name, rules, opts) {\r\n    if (hasCheckedAttr(opts === null || opts === void 0 ? void 0 : opts.type)) {\r\n        return useCheckboxField(name, rules, opts);\r\n    }\r\n    return _useField(name, rules, opts);\r\n}\r\nfunction _useField(name, rules, opts) {\r\n    const { initialValue: modelValue, validateOnMount, bails, type, checkedValue, label, validateOnValueUpdate, uncheckedValue, controlled, keepValueOnUnmount, modelPropName, syncVModel, form: controlForm, } = normalizeOptions(unref(name), opts);\r\n    const injectedForm = controlled ? injectWithSelf(FormContextKey) : undefined;\r\n    const form = controlForm || injectedForm;\r\n    // a flag indicating if the field is about to be removed/unmounted.\r\n    let markedForRemoval = false;\r\n    const { id, value, initialValue, meta, setState, errors, errorMessage } = useFieldState(name, {\r\n        modelValue,\r\n        form,\r\n    });\r\n    if (syncVModel) {\r\n        useVModel({ value, prop: modelPropName, handleChange });\r\n    }\r\n    /**\r\n     * Handles common onBlur meta update\r\n     */\r\n    const handleBlur = () => {\r\n        meta.touched = true;\r\n    };\r\n    const normalizedRules = computed(() => {\r\n        let rulesValue = unref(rules);\r\n        const schema = unref(form === null || form === void 0 ? void 0 : form.schema);\r\n        if (schema && !isYupValidator(schema)) {\r\n            rulesValue = extractRuleFromSchema(schema, unref(name)) || rulesValue;\r\n        }\r\n        if (isYupValidator(rulesValue) || isCallable(rulesValue) || Array.isArray(rulesValue)) {\r\n            return rulesValue;\r\n        }\r\n        return normalizeRules(rulesValue);\r\n    });\r\n    async function validateCurrentValue(mode) {\r\n        var _a, _b;\r\n        if (form === null || form === void 0 ? void 0 : form.validateSchema) {\r\n            return (_a = (await form.validateSchema(mode)).results[unref(name)]) !== null && _a !== void 0 ? _a : { valid: true, errors: [] };\r\n        }\r\n        return validate(value.value, normalizedRules.value, {\r\n            name: unref(label) || unref(name),\r\n            values: (_b = form === null || form === void 0 ? void 0 : form.values) !== null && _b !== void 0 ? _b : {},\r\n            bails,\r\n        });\r\n    }\r\n    const validateWithStateMutation = withLatest(async () => {\r\n        meta.pending = true;\r\n        meta.validated = true;\r\n        return validateCurrentValue('validated-only');\r\n    }, result => {\r\n        if (markedForRemoval) {\r\n            result.valid = true;\r\n            result.errors = [];\r\n        }\r\n        setState({ errors: result.errors });\r\n        meta.pending = false;\r\n        return result;\r\n    });\r\n    const validateValidStateOnly = withLatest(async () => {\r\n        return validateCurrentValue('silent');\r\n    }, result => {\r\n        if (markedForRemoval) {\r\n            result.valid = true;\r\n        }\r\n        meta.valid = result.valid;\r\n        return result;\r\n    });\r\n    function validate$1(opts) {\r\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'silent') {\r\n            return validateValidStateOnly();\r\n        }\r\n        return validateWithStateMutation();\r\n    }\r\n    // Common input/change event handler\r\n    function handleChange(e, shouldValidate = true) {\r\n        const newValue = normalizeEventValue(e);\r\n        value.value = newValue;\r\n        if (!validateOnValueUpdate && shouldValidate) {\r\n            validateWithStateMutation();\r\n        }\r\n    }\r\n    // Runs the initial validation\r\n    onMounted(() => {\r\n        if (validateOnMount) {\r\n            return validateWithStateMutation();\r\n        }\r\n        // validate self initially if no form was handling this\r\n        // forms should have their own initial silent validation run to make things more efficient\r\n        if (!form || !form.validateSchema) {\r\n            validateValidStateOnly();\r\n        }\r\n    });\r\n    function setTouched(isTouched) {\r\n        meta.touched = isTouched;\r\n    }\r\n    let unwatchValue;\r\n    let lastWatchedValue = klona(value.value);\r\n    function watchValue() {\r\n        unwatchValue = watch(value, (val, oldVal) => {\r\n            if (isEqual(val, oldVal) && isEqual(val, lastWatchedValue)) {\r\n                return;\r\n            }\r\n            const validateFn = validateOnValueUpdate ? validateWithStateMutation : validateValidStateOnly;\r\n            validateFn();\r\n            lastWatchedValue = klona(val);\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    watchValue();\r\n    function resetField(state) {\r\n        var _a;\r\n        unwatchValue === null || unwatchValue === void 0 ? void 0 : unwatchValue();\r\n        const newValue = state && 'value' in state ? state.value : initialValue.value;\r\n        setState({\r\n            value: klona(newValue),\r\n            initialValue: klona(newValue),\r\n            touched: (_a = state === null || state === void 0 ? void 0 : state.touched) !== null && _a !== void 0 ? _a : false,\r\n            errors: (state === null || state === void 0 ? void 0 : state.errors) || [],\r\n        });\r\n        meta.pending = false;\r\n        meta.validated = false;\r\n        validateValidStateOnly();\r\n        // need to watch at next tick to avoid triggering the value watcher\r\n        nextTick(() => {\r\n            watchValue();\r\n        });\r\n    }\r\n    function setValue(newValue) {\r\n        value.value = newValue;\r\n    }\r\n    function setErrors(errors) {\r\n        setState({ errors: Array.isArray(errors) ? errors : [errors] });\r\n    }\r\n    const field = {\r\n        id,\r\n        name,\r\n        label,\r\n        value,\r\n        meta,\r\n        errors,\r\n        errorMessage,\r\n        type,\r\n        checkedValue,\r\n        uncheckedValue,\r\n        bails,\r\n        keepValueOnUnmount,\r\n        resetField,\r\n        handleReset: () => resetField(),\r\n        validate: validate$1,\r\n        handleChange,\r\n        handleBlur,\r\n        setState,\r\n        setTouched,\r\n        setErrors,\r\n        setValue,\r\n    };\r\n    provide(FieldContextKey, field);\r\n    if (isRef(rules) && typeof unref(rules) !== 'function') {\r\n        watch(rules, (value, oldValue) => {\r\n            if (isEqual(value, oldValue)) {\r\n                return;\r\n            }\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        field._vm = getCurrentInstance();\r\n        watch(() => (Object.assign(Object.assign({ errors: errors.value }, meta), { value: value.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n        if (!form) {\r\n            registerSingleFieldWithDevtools(field);\r\n        }\r\n    }\r\n    // if no associated form return the field API immediately\r\n    if (!form) {\r\n        return field;\r\n    }\r\n    // associate the field with the given form\r\n    form.register(field);\r\n    onBeforeUnmount(() => {\r\n        markedForRemoval = true;\r\n        form.unregister(field);\r\n    });\r\n    // extract cross-field dependencies in a computed prop\r\n    const dependencies = computed(() => {\r\n        const rulesVal = normalizedRules.value;\r\n        // is falsy, a function schema or a yup schema\r\n        if (!rulesVal || isCallable(rulesVal) || isYupValidator(rulesVal) || Array.isArray(rulesVal)) {\r\n            return {};\r\n        }\r\n        return Object.keys(rulesVal).reduce((acc, rule) => {\r\n            const deps = extractLocators(rulesVal[rule])\r\n                .map((dep) => dep.__locatorRef)\r\n                .reduce((depAcc, depName) => {\r\n                const depValue = getFromPath(form.values, depName) || form.values[depName];\r\n                if (depValue !== undefined) {\r\n                    depAcc[depName] = depValue;\r\n                }\r\n                return depAcc;\r\n            }, {});\r\n            Object.assign(acc, deps);\r\n            return acc;\r\n        }, {});\r\n    });\r\n    // Adds a watcher that runs the validation whenever field dependencies change\r\n    watch(dependencies, (deps, oldDeps) => {\r\n        // Skip if no dependencies or if the field wasn't manipulated\r\n        if (!Object.keys(deps).length) {\r\n            return;\r\n        }\r\n        const shouldValidate = !isEqual(deps, oldDeps);\r\n        if (shouldValidate) {\r\n            meta.validated ? validateWithStateMutation() : validateValidStateOnly();\r\n        }\r\n    });\r\n    return field;\r\n}\r\n/**\r\n * Normalizes partial field options to include the full options\r\n */\r\nfunction normalizeOptions(name, opts) {\r\n    const defaults = () => ({\r\n        initialValue: undefined,\r\n        validateOnMount: false,\r\n        bails: true,\r\n        label: name,\r\n        validateOnValueUpdate: true,\r\n        keepValueOnUnmount: undefined,\r\n        modelPropName: 'modelValue',\r\n        syncVModel: true,\r\n        controlled: true,\r\n    });\r\n    if (!opts) {\r\n        return defaults();\r\n    }\r\n    // TODO: Deprecate this in next major release\r\n    const checkedValue = 'valueProp' in opts ? opts.valueProp : opts.checkedValue;\r\n    const controlled = 'standalone' in opts ? !opts.standalone : opts.controlled;\r\n    return Object.assign(Object.assign(Object.assign({}, defaults()), (opts || {})), { controlled: controlled !== null && controlled !== void 0 ? controlled : true, checkedValue });\r\n}\r\n/**\r\n * Extracts the validation rules from a schema\r\n */\r\nfunction extractRuleFromSchema(schema, fieldName) {\r\n    // no schema at all\r\n    if (!schema) {\r\n        return undefined;\r\n    }\r\n    // there is a key on the schema object for this field\r\n    return schema[fieldName];\r\n}\r\nfunction useCheckboxField(name, rules, opts) {\r\n    const form = !(opts === null || opts === void 0 ? void 0 : opts.standalone) ? injectWithSelf(FormContextKey) : undefined;\r\n    const checkedValue = opts === null || opts === void 0 ? void 0 : opts.checkedValue;\r\n    const uncheckedValue = opts === null || opts === void 0 ? void 0 : opts.uncheckedValue;\r\n    function patchCheckboxApi(field) {\r\n        const handleChange = field.handleChange;\r\n        const checked = computed(() => {\r\n            const currentValue = unref(field.value);\r\n            const checkedVal = unref(checkedValue);\r\n            return Array.isArray(currentValue)\r\n                ? currentValue.findIndex(v => isEqual(v, checkedVal)) >= 0\r\n                : isEqual(checkedVal, currentValue);\r\n        });\r\n        function handleCheckboxChange(e, shouldValidate = true) {\r\n            var _a;\r\n            if (checked.value === ((_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.checked)) {\r\n                if (shouldValidate) {\r\n                    field.validate();\r\n                }\r\n                return;\r\n            }\r\n            let newValue = normalizeEventValue(e);\r\n            // Single checkbox field without a form to toggle it's value\r\n            if (!form) {\r\n                newValue = resolveNextCheckboxValue(unref(field.value), unref(checkedValue), unref(uncheckedValue));\r\n            }\r\n            handleChange(newValue, shouldValidate);\r\n        }\r\n        return Object.assign(Object.assign({}, field), { checked,\r\n            checkedValue,\r\n            uncheckedValue, handleChange: handleCheckboxChange });\r\n    }\r\n    return patchCheckboxApi(_useField(name, rules, opts));\r\n}\r\nfunction useVModel({ prop, value, handleChange }) {\r\n    const vm = getCurrentInstance();\r\n    /* istanbul ignore next */\r\n    if (!vm) {\r\n        if ((process.env.NODE_ENV !== 'production')) {\r\n            console.warn('Failed to setup model events because `useField` was not called in setup.');\r\n        }\r\n        return;\r\n    }\r\n    const propName = prop || 'modelValue';\r\n    const emitName = `update:${propName}`;\r\n    // Component doesn't have a model prop setup (must be defined on the props)\r\n    if (!(propName in vm.props)) {\r\n        return;\r\n    }\r\n    watch(value, newValue => {\r\n        if (isEqual(newValue, getCurrentModelValue(vm, propName))) {\r\n            return;\r\n        }\r\n        vm.emit(emitName, newValue);\r\n    });\r\n    watch(() => getCurrentModelValue(vm, propName), propValue => {\r\n        if (propValue === IS_ABSENT && value.value === undefined) {\r\n            return;\r\n        }\r\n        const newValue = propValue === IS_ABSENT ? undefined : propValue;\r\n        if (isEqual(newValue, applyModelModifiers(value.value, vm.props.modelModifiers))) {\r\n            return;\r\n        }\r\n        handleChange(newValue);\r\n    });\r\n}\r\nfunction getCurrentModelValue(vm, propName) {\r\n    return vm.props[propName];\r\n}\n\nconst FieldImpl = defineComponent({\r\n    name: 'Field',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: [String, Object],\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n        rules: {\r\n            type: [Object, String, Function],\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        validateOnBlur: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnChange: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnInput: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        validateOnModelUpdate: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n        bails: {\r\n            type: Boolean,\r\n            default: () => getConfig().bails,\r\n        },\r\n        label: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        uncheckedValue: {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        modelValue: {\r\n            type: null,\r\n            default: IS_ABSENT,\r\n        },\r\n        modelModifiers: {\r\n            type: null,\r\n            default: () => ({}),\r\n        },\r\n        'onUpdate:modelValue': {\r\n            type: null,\r\n            default: undefined,\r\n        },\r\n        standalone: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        keepValue: {\r\n            type: Boolean,\r\n            default: undefined,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const rules = toRef(props, 'rules');\r\n        const name = toRef(props, 'name');\r\n        const label = toRef(props, 'label');\r\n        const uncheckedValue = toRef(props, 'uncheckedValue');\r\n        const keepValue = toRef(props, 'keepValue');\r\n        const { errors, value, errorMessage, validate: validateField, handleChange, handleBlur, setTouched, resetField, handleReset, meta, checked, setErrors, } = useField(name, rules, {\r\n            validateOnMount: props.validateOnMount,\r\n            bails: props.bails,\r\n            standalone: props.standalone,\r\n            type: ctx.attrs.type,\r\n            initialValue: resolveInitialValue(props, ctx),\r\n            // Only for checkboxes and radio buttons\r\n            checkedValue: ctx.attrs.value,\r\n            uncheckedValue,\r\n            label,\r\n            validateOnValueUpdate: false,\r\n            keepValueOnUnmount: keepValue,\r\n        });\r\n        // If there is a v-model applied on the component we need to emit the `update:modelValue` whenever the value binding changes\r\n        const onChangeHandler = function handleChangeWithModel(e, shouldValidate = true) {\r\n            handleChange(e, shouldValidate);\r\n            ctx.emit('update:modelValue', value.value);\r\n        };\r\n        const handleInput = (e) => {\r\n            if (!hasCheckedAttr(ctx.attrs.type)) {\r\n                value.value = normalizeEventValue(e);\r\n            }\r\n        };\r\n        const onInputHandler = function handleInputWithModel(e) {\r\n            handleInput(e);\r\n            ctx.emit('update:modelValue', value.value);\r\n        };\r\n        const fieldProps = computed(() => {\r\n            const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = resolveValidationTriggers(props);\r\n            const baseOnBlur = [handleBlur, ctx.attrs.onBlur, validateOnBlur ? validateField : undefined].filter(Boolean);\r\n            const baseOnInput = [(e) => onChangeHandler(e, validateOnInput), ctx.attrs.onInput].filter(Boolean);\r\n            const baseOnChange = [(e) => onChangeHandler(e, validateOnChange), ctx.attrs.onChange].filter(Boolean);\r\n            const attrs = {\r\n                name: props.name,\r\n                onBlur: baseOnBlur,\r\n                onInput: baseOnInput,\r\n                onChange: baseOnChange,\r\n            };\r\n            attrs['onUpdate:modelValue'] = e => onChangeHandler(e, validateOnModelUpdate);\r\n            if (hasCheckedAttr(ctx.attrs.type) && checked) {\r\n                attrs.checked = checked.value;\r\n            }\r\n            const tag = resolveTag(props, ctx);\r\n            if (shouldHaveValueBinding(tag, ctx.attrs)) {\r\n                attrs.value = value.value;\r\n            }\r\n            return attrs;\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                field: fieldProps.value,\r\n                value: value.value,\r\n                meta,\r\n                errors: errors.value,\r\n                errorMessage: errorMessage.value,\r\n                validate: validateField,\r\n                resetField,\r\n                handleChange: onChangeHandler,\r\n                handleInput: onInputHandler,\r\n                handleReset,\r\n                handleBlur,\r\n                setTouched,\r\n                setErrors,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            setErrors,\r\n            setTouched,\r\n            reset: resetField,\r\n            validate: validateField,\r\n            handleChange,\r\n        });\r\n        return () => {\r\n            const tag = resolveDynamicComponent(resolveTag(props, ctx));\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (tag) {\r\n                return h(tag, Object.assign(Object.assign({}, ctx.attrs), fieldProps.value), children);\r\n            }\r\n            return children;\r\n        };\r\n    },\r\n});\r\nfunction resolveTag(props, ctx) {\r\n    let tag = props.as || '';\r\n    if (!props.as && !ctx.slots.default) {\r\n        tag = 'input';\r\n    }\r\n    return tag;\r\n}\r\nfunction resolveValidationTriggers(props) {\r\n    var _a, _b, _c, _d;\r\n    const { validateOnInput, validateOnChange, validateOnBlur, validateOnModelUpdate } = getConfig();\r\n    return {\r\n        validateOnInput: (_a = props.validateOnInput) !== null && _a !== void 0 ? _a : validateOnInput,\r\n        validateOnChange: (_b = props.validateOnChange) !== null && _b !== void 0 ? _b : validateOnChange,\r\n        validateOnBlur: (_c = props.validateOnBlur) !== null && _c !== void 0 ? _c : validateOnBlur,\r\n        validateOnModelUpdate: (_d = props.validateOnModelUpdate) !== null && _d !== void 0 ? _d : validateOnModelUpdate,\r\n    };\r\n}\r\nfunction resolveInitialValue(props, ctx) {\r\n    // Gets the initial value either from `value` prop/attr or `v-model` binding (modelValue)\r\n    // For checkboxes and radio buttons it will always be the model value not the `value` attribute\r\n    if (!hasCheckedAttr(ctx.attrs.type)) {\r\n        return isPropPresent(props, 'modelValue') ? props.modelValue : ctx.attrs.value;\r\n    }\r\n    return isPropPresent(props, 'modelValue') ? props.modelValue : undefined;\r\n}\r\nconst Field = FieldImpl;\n\nlet FORM_COUNTER = 0;\r\nfunction useForm(opts) {\r\n    var _a;\r\n    const formId = FORM_COUNTER++;\r\n    const controlledModelPaths = new Set();\r\n    // Prevents fields from double resetting their values, which causes checkboxes to toggle their initial value\r\n    // TODO: This won't be needed if we centralize all the state inside the `form` for form inputs\r\n    let RESET_LOCK = false;\r\n    // A lookup containing fields or field groups\r\n    const fieldsByPath = ref({});\r\n    // If the form is currently submitting\r\n    const isSubmitting = ref(false);\r\n    // The number of times the user tried to submit the form\r\n    const submitCount = ref(0);\r\n    // field arrays managed by this form\r\n    const fieldArrays = [];\r\n    // a private ref for all form values\r\n    const formValues = reactive(klona(unref(opts === null || opts === void 0 ? void 0 : opts.initialValues) || {}));\r\n    // the source of errors for the form fields\r\n    const { errorBag, setErrorBag, setFieldErrorBag } = useErrorBag(opts === null || opts === void 0 ? void 0 : opts.initialErrors);\r\n    // Gets the first error of each field\r\n    const errors = computed(() => {\r\n        return keysOf(errorBag.value).reduce((acc, key) => {\r\n            const bag = errorBag.value[key];\r\n            if (bag && bag.length) {\r\n                acc[key] = bag[0];\r\n            }\r\n            return acc;\r\n        }, {});\r\n    });\r\n    function getFirstFieldAtPath(path) {\r\n        const fieldOrGroup = fieldsByPath.value[path];\r\n        return Array.isArray(fieldOrGroup) ? fieldOrGroup[0] : fieldOrGroup;\r\n    }\r\n    function fieldExists(path) {\r\n        return !!fieldsByPath.value[path];\r\n    }\r\n    /**\r\n     * Holds a computed reference to all fields names and labels\r\n     */\r\n    const fieldNames = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((names, path) => {\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                names[path] = unref(field.label || field.name) || '';\r\n            }\r\n            return names;\r\n        }, {});\r\n    });\r\n    const fieldBailsMap = computed(() => {\r\n        return keysOf(fieldsByPath.value).reduce((map, path) => {\r\n            var _a;\r\n            const field = getFirstFieldAtPath(path);\r\n            if (field) {\r\n                map[path] = (_a = field.bails) !== null && _a !== void 0 ? _a : true;\r\n            }\r\n            return map;\r\n        }, {});\r\n    });\r\n    // mutable non-reactive reference to initial errors\r\n    // we need this to process initial errors then unset them\r\n    const initialErrors = Object.assign({}, ((opts === null || opts === void 0 ? void 0 : opts.initialErrors) || {}));\r\n    const keepValuesOnUnmount = (_a = opts === null || opts === void 0 ? void 0 : opts.keepValuesOnUnmount) !== null && _a !== void 0 ? _a : false;\r\n    // initial form values\r\n    const { initialValues, originalInitialValues, setInitialValues } = useFormInitialValues(fieldsByPath, formValues, opts === null || opts === void 0 ? void 0 : opts.initialValues);\r\n    // form meta aggregations\r\n    const meta = useFormMeta(fieldsByPath, formValues, originalInitialValues, errors);\r\n    const controlledValues = computed(() => {\r\n        return [...controlledModelPaths, ...keysOf(fieldsByPath.value)].reduce((acc, path) => {\r\n            const value = getFromPath(formValues, path);\r\n            setInPath(acc, path, value);\r\n            return acc;\r\n        }, {});\r\n    });\r\n    const schema = opts === null || opts === void 0 ? void 0 : opts.validationSchema;\r\n    /**\r\n     * Batches validation runs in 5ms batches\r\n     * Must have two distinct batch queues to make sure they don't override each other settings #3783\r\n     */\r\n    const debouncedSilentValidation = debounceAsync(_validateSchema, 5);\r\n    const debouncedValidation = debounceAsync(_validateSchema, 5);\r\n    const validateSchema = withLatest(async (mode) => {\r\n        return (await mode) === 'silent' ? debouncedSilentValidation() : debouncedValidation();\r\n    }, (formResult, [mode]) => {\r\n        // fields by id lookup\r\n        const fieldsById = formCtx.fieldsByPath.value || {};\r\n        // errors fields names, we need it to also check if custom errors are updated\r\n        const currentErrorsPaths = keysOf(formCtx.errorBag.value);\r\n        // collect all the keys from the schema and all fields\r\n        // this ensures we have a complete keymap of all the fields\r\n        const paths = [\r\n            ...new Set([...keysOf(formResult.results), ...keysOf(fieldsById), ...currentErrorsPaths]),\r\n        ];\r\n        // aggregates the paths into a single result object while applying the results on the fields\r\n        return paths.reduce((validation, path) => {\r\n            const field = fieldsById[path];\r\n            const messages = (formResult.results[path] || { errors: [] }).errors;\r\n            const fieldResult = {\r\n                errors: messages,\r\n                valid: !messages.length,\r\n            };\r\n            validation.results[path] = fieldResult;\r\n            if (!fieldResult.valid) {\r\n                validation.errors[path] = fieldResult.errors[0];\r\n            }\r\n            // field not rendered\r\n            if (!field) {\r\n                setFieldError(path, messages);\r\n                return validation;\r\n            }\r\n            // always update the valid flag regardless of the mode\r\n            applyFieldMutation(field, f => (f.meta.valid = fieldResult.valid));\r\n            if (mode === 'silent') {\r\n                return validation;\r\n            }\r\n            const wasValidated = Array.isArray(field) ? field.some(f => f.meta.validated) : field.meta.validated;\r\n            if (mode === 'validated-only' && !wasValidated) {\r\n                return validation;\r\n            }\r\n            applyFieldMutation(field, f => f.setState({ errors: fieldResult.errors }));\r\n            return validation;\r\n        }, { valid: formResult.valid, results: {}, errors: {} });\r\n    });\r\n    function makeSubmissionFactory(onlyControlled) {\r\n        return function submitHandlerFactory(fn, onValidationError) {\r\n            return function submissionHandler(e) {\r\n                if (e instanceof Event) {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                }\r\n                // Touch all fields\r\n                setTouched(keysOf(fieldsByPath.value).reduce((acc, field) => {\r\n                    acc[field] = true;\r\n                    return acc;\r\n                }, {}));\r\n                isSubmitting.value = true;\r\n                submitCount.value++;\r\n                return validate()\r\n                    .then(result => {\r\n                    const values = klona(formValues);\r\n                    if (result.valid && typeof fn === 'function') {\r\n                        const controlled = klona(controlledValues.value);\r\n                        return fn(onlyControlled ? controlled : values, {\r\n                            evt: e,\r\n                            controlledValues: controlled,\r\n                            setErrors,\r\n                            setFieldError,\r\n                            setTouched,\r\n                            setFieldTouched,\r\n                            setValues,\r\n                            setFieldValue,\r\n                            resetForm,\r\n                        });\r\n                    }\r\n                    if (!result.valid && typeof onValidationError === 'function') {\r\n                        onValidationError({\r\n                            values,\r\n                            evt: e,\r\n                            errors: result.errors,\r\n                            results: result.results,\r\n                        });\r\n                    }\r\n                })\r\n                    .then(returnVal => {\r\n                    isSubmitting.value = false;\r\n                    return returnVal;\r\n                }, err => {\r\n                    isSubmitting.value = false;\r\n                    // re-throw the err so it doesn't go silent\r\n                    throw err;\r\n                });\r\n            };\r\n        };\r\n    }\r\n    const handleSubmitImpl = makeSubmissionFactory(false);\r\n    const handleSubmit = handleSubmitImpl;\r\n    handleSubmit.withControlled = makeSubmissionFactory(true);\r\n    const formCtx = {\r\n        formId,\r\n        fieldsByPath,\r\n        values: formValues,\r\n        controlledValues,\r\n        errorBag,\r\n        errors,\r\n        schema,\r\n        submitCount,\r\n        meta,\r\n        isSubmitting,\r\n        fieldArrays,\r\n        keepValuesOnUnmount,\r\n        validateSchema: unref(schema) ? validateSchema : undefined,\r\n        validate,\r\n        register: registerField,\r\n        unregister: unregisterField,\r\n        setFieldErrorBag,\r\n        validateField,\r\n        setFieldValue,\r\n        setValues,\r\n        setErrors,\r\n        setFieldError,\r\n        setFieldTouched,\r\n        setTouched,\r\n        resetForm,\r\n        handleSubmit,\r\n        stageInitialValue,\r\n        unsetInitialValue,\r\n        setFieldInitialValue,\r\n        useFieldModel,\r\n    };\r\n    function isFieldGroup(fieldOrGroup) {\r\n        return Array.isArray(fieldOrGroup);\r\n    }\r\n    function applyFieldMutation(fieldOrGroup, mutation) {\r\n        if (Array.isArray(fieldOrGroup)) {\r\n            return fieldOrGroup.forEach(mutation);\r\n        }\r\n        return mutation(fieldOrGroup);\r\n    }\r\n    function mutateAllFields(mutation) {\r\n        Object.values(fieldsByPath.value).forEach(field => {\r\n            if (!field) {\r\n                return;\r\n            }\r\n            // avoid resetting the field values, because they should've been reset already.\r\n            applyFieldMutation(field, mutation);\r\n        });\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldError(field, message) {\r\n        setFieldErrorBag(field, message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrors(fields) {\r\n        setErrorBag(fields);\r\n    }\r\n    /**\r\n     * Sets a single field value\r\n     */\r\n    function setFieldValue(field, value, { force } = { force: false }) {\r\n        var _a;\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        const clonedValue = klona(value);\r\n        // field wasn't found, create a virtual field as a placeholder\r\n        if (!fieldInstance) {\r\n            setInPath(formValues, field, clonedValue);\r\n            return;\r\n        }\r\n        if (isFieldGroup(fieldInstance) && ((_a = fieldInstance[0]) === null || _a === void 0 ? void 0 : _a.type) === 'checkbox' && !Array.isArray(value)) {\r\n            // Multiple checkboxes, and only one of them got updated\r\n            const newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field) || [], value, undefined));\r\n            setInPath(formValues, field, newValue);\r\n            return;\r\n        }\r\n        let newValue = clonedValue;\r\n        // Single Checkbox: toggles the field value unless the field is being reset then force it\r\n        if (!isFieldGroup(fieldInstance) && fieldInstance.type === 'checkbox' && !force && !RESET_LOCK) {\r\n            newValue = klona(resolveNextCheckboxValue(getFromPath(formValues, field), value, unref(fieldInstance.uncheckedValue)));\r\n        }\r\n        setInPath(formValues, field, newValue);\r\n    }\r\n    /**\r\n     * Sets multiple fields values\r\n     */\r\n    function setValues(fields) {\r\n        // clean up old values\r\n        keysOf(formValues).forEach(key => {\r\n            delete formValues[key];\r\n        });\r\n        // set up new values\r\n        keysOf(fields).forEach(path => {\r\n            setFieldValue(path, fields[path]);\r\n        });\r\n        // regenerate the arrays when the form values change\r\n        fieldArrays.forEach(f => f && f.reset());\r\n    }\r\n    function createModel(path) {\r\n        const { value } = _useFieldValue(path, undefined, formCtx);\r\n        watch(value, () => {\r\n            if (!fieldExists(unref(path))) {\r\n                validate({ mode: 'validated-only' });\r\n            }\r\n        }, {\r\n            deep: true,\r\n        });\r\n        controlledModelPaths.add(unref(path));\r\n        return value;\r\n    }\r\n    function useFieldModel(path) {\r\n        if (!Array.isArray(path)) {\r\n            return createModel(path);\r\n        }\r\n        return path.map(createModel);\r\n    }\r\n    /**\r\n     * Sets the touched meta state on a field\r\n     */\r\n    function setFieldTouched(field, isTouched) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (fieldInstance) {\r\n            applyFieldMutation(fieldInstance, f => f.setTouched(isTouched));\r\n        }\r\n    }\r\n    /**\r\n     * Sets the touched meta state on multiple fields\r\n     */\r\n    function setTouched(fields) {\r\n        keysOf(fields).forEach(field => {\r\n            setFieldTouched(field, !!fields[field]);\r\n        });\r\n    }\r\n    /**\r\n     * Resets all fields\r\n     */\r\n    function resetForm(state) {\r\n        RESET_LOCK = true;\r\n        // Reset all field states first\r\n        mutateAllFields(f => f.resetField());\r\n        // reset values\r\n        const newValues = (state === null || state === void 0 ? void 0 : state.values) ? state.values : originalInitialValues.value;\r\n        setInitialValues(newValues);\r\n        setValues(newValues);\r\n        if (state === null || state === void 0 ? void 0 : state.touched) {\r\n            setTouched(state.touched);\r\n        }\r\n        setErrors((state === null || state === void 0 ? void 0 : state.errors) || {});\r\n        submitCount.value = (state === null || state === void 0 ? void 0 : state.submitCount) || 0;\r\n        nextTick(() => {\r\n            RESET_LOCK = false;\r\n        });\r\n    }\r\n    function insertFieldAtPath(field, path) {\r\n        const rawField = markRaw(field);\r\n        const fieldPath = path;\r\n        // first field at that path\r\n        if (!fieldsByPath.value[fieldPath]) {\r\n            fieldsByPath.value[fieldPath] = rawField;\r\n            return;\r\n        }\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (fieldAtPath && !Array.isArray(fieldAtPath)) {\r\n            fieldsByPath.value[fieldPath] = [fieldAtPath];\r\n        }\r\n        // add the new array to that path\r\n        fieldsByPath.value[fieldPath] = [...fieldsByPath.value[fieldPath], rawField];\r\n    }\r\n    function removeFieldFromPath(field, path) {\r\n        const fieldPath = path;\r\n        const fieldAtPath = fieldsByPath.value[fieldPath];\r\n        if (!fieldAtPath) {\r\n            return;\r\n        }\r\n        // same field at path\r\n        if (!isFieldGroup(fieldAtPath) && field.id === fieldAtPath.id) {\r\n            delete fieldsByPath.value[fieldPath];\r\n            return;\r\n        }\r\n        if (isFieldGroup(fieldAtPath)) {\r\n            const idx = fieldAtPath.findIndex(f => f.id === field.id);\r\n            if (idx === -1) {\r\n                return;\r\n            }\r\n            fieldAtPath.splice(idx, 1);\r\n            if (!fieldAtPath.length) {\r\n                delete fieldsByPath.value[fieldPath];\r\n            }\r\n        }\r\n    }\r\n    function registerField(field) {\r\n        const fieldPath = unref(field.name);\r\n        insertFieldAtPath(field, fieldPath);\r\n        if (isRef(field.name)) {\r\n            // ensures when a field's name was already taken that it preserves its same value\r\n            // necessary for fields generated by loops\r\n            watch(field.name, async (newPath, oldPath) => {\r\n                // cache the value\r\n                await nextTick();\r\n                removeFieldFromPath(field, oldPath);\r\n                insertFieldAtPath(field, newPath);\r\n                // re-validate if either path had errors before\r\n                if (errors.value[oldPath] || errors.value[newPath]) {\r\n                    // clear up both paths errors\r\n                    setFieldError(oldPath, undefined);\r\n                    validateField(newPath);\r\n                }\r\n                // clean up the old path if no other field is sharing that name\r\n                // #3325\r\n                await nextTick();\r\n                if (!fieldExists(oldPath)) {\r\n                    unsetPath(formValues, oldPath);\r\n                }\r\n            });\r\n        }\r\n        // if field already had errors (initial errors) that's not user-set, validate it again to ensure state is correct\r\n        // the difference being that `initialErrors` will contain the error message while other errors (pre-validated schema) won't have them as initial errors\r\n        // #3342\r\n        const initialErrorMessage = unref(field.errorMessage);\r\n        if (initialErrorMessage && (initialErrors === null || initialErrors === void 0 ? void 0 : initialErrors[fieldPath]) !== initialErrorMessage) {\r\n            validateField(fieldPath);\r\n        }\r\n        // marks the initial error as \"consumed\" so it won't be matched later with same non-initial error\r\n        delete initialErrors[fieldPath];\r\n    }\r\n    function unregisterField(field) {\r\n        const fieldName = unref(field.name);\r\n        const fieldInstance = fieldsByPath.value[fieldName];\r\n        const isGroup = !!fieldInstance && isFieldGroup(fieldInstance);\r\n        removeFieldFromPath(field, fieldName);\r\n        // clears a field error on unmounted\r\n        // we wait till next tick to make sure if the field is completely removed and doesn't have any siblings like checkboxes\r\n        nextTick(() => {\r\n            var _a;\r\n            const shouldKeepValue = (_a = unref(field.keepValueOnUnmount)) !== null && _a !== void 0 ? _a : unref(keepValuesOnUnmount);\r\n            const currentGroupValue = getFromPath(formValues, fieldName);\r\n            // The boolean here is we check if the field still belongs to the same control group with that name\r\n            // if another group claimed the name, we should avoid handling it since it is no longer the same group\r\n            // this happens with `v-for` over some checkboxes and field arrays.\r\n            // also if the group no longer exist we can assume this group was the last one that controlled it\r\n            const isSameGroup = isGroup && (fieldInstance === fieldsByPath.value[fieldName] || !fieldsByPath.value[fieldName]);\r\n            // group field that still has a dangling value, the field may exist or not after it was removed.\r\n            // This used to be handled in the useField composable but the form has better context on when it should/not happen.\r\n            // if it does belong to it that means the group still exists\r\n            // #3844\r\n            if (isSameGroup && !shouldKeepValue) {\r\n                if (Array.isArray(currentGroupValue)) {\r\n                    const valueIdx = currentGroupValue.findIndex(i => isEqual(i, unref(field.checkedValue)));\r\n                    if (valueIdx > -1) {\r\n                        const newVal = [...currentGroupValue];\r\n                        newVal.splice(valueIdx, 1);\r\n                        setFieldValue(fieldName, newVal, { force: true });\r\n                    }\r\n                }\r\n                else if (currentGroupValue === unref(field.checkedValue)) {\r\n                    // Remove field if it is a group but does not have an array value, like for radio inputs #3963\r\n                    unsetPath(formValues, fieldName);\r\n                }\r\n            }\r\n            // Field was removed entirely, we should unset its path\r\n            // #3384\r\n            if (!fieldExists(fieldName)) {\r\n                setFieldError(fieldName, undefined);\r\n                // Checks if the field was configured to be unset during unmount or not\r\n                // Checks both the form-level config and field-level one\r\n                // Field has the priority if it is set, otherwise it goes to the form settings\r\n                if (shouldKeepValue) {\r\n                    return;\r\n                }\r\n                // Don't apply emptyContainer check unless the current group value is an array\r\n                if (isGroup && Array.isArray(currentGroupValue) && !isEmptyContainer(currentGroupValue)) {\r\n                    return;\r\n                }\r\n                unsetPath(formValues, fieldName);\r\n            }\r\n        });\r\n    }\r\n    async function validate(opts) {\r\n        const mode = (opts === null || opts === void 0 ? void 0 : opts.mode) || 'force';\r\n        if (mode === 'force') {\r\n            mutateAllFields(f => (f.meta.validated = true));\r\n        }\r\n        if (formCtx.validateSchema) {\r\n            return formCtx.validateSchema(mode);\r\n        }\r\n        // No schema, each field is responsible to validate itself\r\n        const validations = await Promise.all(Object.values(fieldsByPath.value).map(field => {\r\n            const fieldInstance = Array.isArray(field) ? field[0] : field;\r\n            if (!fieldInstance) {\r\n                return Promise.resolve({ key: '', valid: true, errors: [] });\r\n            }\r\n            return fieldInstance.validate(opts).then((result) => {\r\n                return {\r\n                    key: unref(fieldInstance.name),\r\n                    valid: result.valid,\r\n                    errors: result.errors,\r\n                };\r\n            });\r\n        }));\r\n        const results = {};\r\n        const errors = {};\r\n        for (const validation of validations) {\r\n            results[validation.key] = {\r\n                valid: validation.valid,\r\n                errors: validation.errors,\r\n            };\r\n            if (validation.errors.length) {\r\n                errors[validation.key] = validation.errors[0];\r\n            }\r\n        }\r\n        return {\r\n            valid: validations.every(r => r.valid),\r\n            results,\r\n            errors,\r\n        };\r\n    }\r\n    async function validateField(field) {\r\n        const fieldInstance = fieldsByPath.value[field];\r\n        if (!fieldInstance) {\r\n            warn$1(`field with name ${field} was not found`);\r\n            return Promise.resolve({ errors: [], valid: true });\r\n        }\r\n        if (Array.isArray(fieldInstance)) {\r\n            return fieldInstance.map(f => f.validate())[0];\r\n        }\r\n        return fieldInstance.validate();\r\n    }\r\n    function unsetInitialValue(path) {\r\n        unsetPath(initialValues.value, path);\r\n    }\r\n    /**\r\n     * Sneaky function to set initial field values\r\n     */\r\n    function stageInitialValue(path, value, updateOriginal = false) {\r\n        setInPath(formValues, path, value);\r\n        setFieldInitialValue(path, value);\r\n        if (updateOriginal && !(opts === null || opts === void 0 ? void 0 : opts.initialValues)) {\r\n            setInPath(originalInitialValues.value, path, klona(value));\r\n        }\r\n    }\r\n    function setFieldInitialValue(path, value) {\r\n        setInPath(initialValues.value, path, klona(value));\r\n    }\r\n    async function _validateSchema() {\r\n        const schemaValue = unref(schema);\r\n        if (!schemaValue) {\r\n            return { valid: true, results: {}, errors: {} };\r\n        }\r\n        const formResult = isYupValidator(schemaValue)\r\n            ? await validateYupSchema(schemaValue, formValues)\r\n            : await validateObjectSchema(schemaValue, formValues, {\r\n                names: fieldNames.value,\r\n                bailsMap: fieldBailsMap.value,\r\n            });\r\n        return formResult;\r\n    }\r\n    const submitForm = handleSubmit((_, { evt }) => {\r\n        if (isFormSubmitEvent(evt)) {\r\n            evt.target.submit();\r\n        }\r\n    });\r\n    // Trigger initial validation\r\n    onMounted(() => {\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialErrors) {\r\n            setErrors(opts.initialErrors);\r\n        }\r\n        if (opts === null || opts === void 0 ? void 0 : opts.initialTouched) {\r\n            setTouched(opts.initialTouched);\r\n        }\r\n        // if validate on mount was enabled\r\n        if (opts === null || opts === void 0 ? void 0 : opts.validateOnMount) {\r\n            validate();\r\n            return;\r\n        }\r\n        // otherwise run initial silent validation through schema if available\r\n        // the useField should skip their own silent validation if a yup schema is present\r\n        if (formCtx.validateSchema) {\r\n            formCtx.validateSchema('silent');\r\n        }\r\n    });\r\n    if (isRef(schema)) {\r\n        watch(schema, () => {\r\n            var _a;\r\n            (_a = formCtx.validateSchema) === null || _a === void 0 ? void 0 : _a.call(formCtx, 'validated-only');\r\n        });\r\n    }\r\n    // Provide injections\r\n    provide(FormContextKey, formCtx);\r\n    if ((process.env.NODE_ENV !== 'production')) {\r\n        registerFormWithDevTools(formCtx);\r\n        watch(() => (Object.assign(Object.assign({ errors: errorBag.value }, meta.value), { values: formValues, isSubmitting: isSubmitting.value, submitCount: submitCount.value })), refreshInspector, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return Object.assign(Object.assign({}, formCtx), { handleReset: () => resetForm(), submitForm });\r\n}\r\n/**\r\n * Manages form meta aggregation\r\n */\r\nfunction useFormMeta(fieldsByPath, currentValues, initialValues, errors) {\r\n    const MERGE_STRATEGIES = {\r\n        touched: 'some',\r\n        pending: 'some',\r\n        valid: 'every',\r\n    };\r\n    const isDirty = computed(() => {\r\n        return !isEqual(currentValues, unref(initialValues));\r\n    });\r\n    function calculateFlags() {\r\n        const fields = Object.values(fieldsByPath.value).flat(1).filter(Boolean);\r\n        return keysOf(MERGE_STRATEGIES).reduce((acc, flag) => {\r\n            const mergeMethod = MERGE_STRATEGIES[flag];\r\n            acc[flag] = fields[mergeMethod](field => field.meta[flag]);\r\n            return acc;\r\n        }, {});\r\n    }\r\n    const flags = reactive(calculateFlags());\r\n    watchEffect(() => {\r\n        const value = calculateFlags();\r\n        flags.touched = value.touched;\r\n        flags.valid = value.valid;\r\n        flags.pending = value.pending;\r\n    });\r\n    return computed(() => {\r\n        return Object.assign(Object.assign({ initialValues: unref(initialValues) }, flags), { valid: flags.valid && !keysOf(errors.value).length, dirty: isDirty.value });\r\n    });\r\n}\r\n/**\r\n * Manages the initial values prop\r\n */\r\nfunction useFormInitialValues(fields, formValues, providedValues) {\r\n    // these are the mutable initial values as the fields are mounted/unmounted\r\n    const initialValues = ref(klona(unref(providedValues)) || {});\r\n    // these are the original initial value as provided by the user initially, they don't keep track of conditional fields\r\n    // this is important because some conditional fields will overwrite the initial values for other fields who had the same name\r\n    // like array fields, any push/insert operation will overwrite the initial values because they \"create new fields\"\r\n    // so these are the values that the reset function should use\r\n    // these only change when the user explicitly chanegs the initial values or when the user resets them with new values.\r\n    const originalInitialValues = ref(klona(unref(providedValues)) || {});\r\n    function setInitialValues(values, updateFields = false) {\r\n        initialValues.value = klona(values);\r\n        originalInitialValues.value = klona(values);\r\n        if (!updateFields) {\r\n            return;\r\n        }\r\n        // update the pristine non-touched fields\r\n        // those are excluded because it's unlikely you want to change the form values using initial values\r\n        // we mostly watch them for API population or newly inserted fields\r\n        // if the user API is taking too much time before user interaction they should consider disabling or hiding their inputs until the values are ready\r\n        keysOf(fields.value).forEach(fieldPath => {\r\n            const field = fields.value[fieldPath];\r\n            const wasTouched = Array.isArray(field) ? field.some(f => f.meta.touched) : field === null || field === void 0 ? void 0 : field.meta.touched;\r\n            if (!field || wasTouched) {\r\n                return;\r\n            }\r\n            const newValue = getFromPath(initialValues.value, fieldPath);\r\n            setInPath(formValues, fieldPath, klona(newValue));\r\n        });\r\n    }\r\n    if (isRef(providedValues)) {\r\n        watch(providedValues, value => {\r\n            setInitialValues(value, true);\r\n        }, {\r\n            deep: true,\r\n        });\r\n    }\r\n    return {\r\n        initialValues,\r\n        originalInitialValues,\r\n        setInitialValues,\r\n    };\r\n}\r\nfunction useErrorBag(initialErrors) {\r\n    const errorBag = ref({});\r\n    function normalizeErrorItem(message) {\r\n        return Array.isArray(message) ? message : message ? [message] : [];\r\n    }\r\n    /**\r\n     * Manually sets an error message on a specific field\r\n     */\r\n    function setFieldErrorBag(field, message) {\r\n        if (!message) {\r\n            delete errorBag.value[field];\r\n            return;\r\n        }\r\n        errorBag.value[field] = normalizeErrorItem(message);\r\n    }\r\n    /**\r\n     * Sets errors for the fields specified in the object\r\n     */\r\n    function setErrorBag(fields) {\r\n        errorBag.value = keysOf(fields).reduce((acc, key) => {\r\n            const message = fields[key];\r\n            if (message) {\r\n                acc[key] = normalizeErrorItem(message);\r\n            }\r\n            return acc;\r\n        }, {});\r\n    }\r\n    if (initialErrors) {\r\n        setErrorBag(initialErrors);\r\n    }\r\n    return {\r\n        errorBag,\r\n        setErrorBag,\r\n        setFieldErrorBag,\r\n    };\r\n}\n\nconst FormImpl = defineComponent({\r\n    name: 'Form',\r\n    inheritAttrs: false,\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: 'form',\r\n        },\r\n        validationSchema: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialValues: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialErrors: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        initialTouched: {\r\n            type: Object,\r\n            default: undefined,\r\n        },\r\n        validateOnMount: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n        onSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n        onInvalidSubmit: {\r\n            type: Function,\r\n            default: undefined,\r\n        },\r\n        keepValues: {\r\n            type: Boolean,\r\n            default: false,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const initialValues = toRef(props, 'initialValues');\r\n        const validationSchema = toRef(props, 'validationSchema');\r\n        const keepValues = toRef(props, 'keepValues');\r\n        const { errors, values, meta, isSubmitting, submitCount, controlledValues, validate, validateField, handleReset, resetForm, handleSubmit, setErrors, setFieldError, setFieldValue, setValues, setFieldTouched, setTouched, } = useForm({\r\n            validationSchema: validationSchema.value ? validationSchema : undefined,\r\n            initialValues,\r\n            initialErrors: props.initialErrors,\r\n            initialTouched: props.initialTouched,\r\n            validateOnMount: props.validateOnMount,\r\n            keepValuesOnUnmount: keepValues,\r\n        });\r\n        const submitForm = handleSubmit((_, { evt }) => {\r\n            if (isFormSubmitEvent(evt)) {\r\n                evt.target.submit();\r\n            }\r\n        }, props.onInvalidSubmit);\r\n        const onSubmit = props.onSubmit ? handleSubmit(props.onSubmit, props.onInvalidSubmit) : submitForm;\r\n        function handleFormReset(e) {\r\n            if (isEvent(e)) {\r\n                // Prevent default form reset behavior\r\n                e.preventDefault();\r\n            }\r\n            handleReset();\r\n            if (typeof ctx.attrs.onReset === 'function') {\r\n                ctx.attrs.onReset();\r\n            }\r\n        }\r\n        function handleScopedSlotSubmit(evt, onSubmit) {\r\n            const onSuccess = typeof evt === 'function' && !onSubmit ? evt : onSubmit;\r\n            return handleSubmit(onSuccess, props.onInvalidSubmit)(evt);\r\n        }\r\n        function slotProps() {\r\n            return {\r\n                meta: meta.value,\r\n                errors: errors.value,\r\n                values: values,\r\n                isSubmitting: isSubmitting.value,\r\n                submitCount: submitCount.value,\r\n                controlledValues: controlledValues.value,\r\n                validate,\r\n                validateField,\r\n                handleSubmit: handleScopedSlotSubmit,\r\n                handleReset,\r\n                submitForm,\r\n                setErrors,\r\n                setFieldError,\r\n                setFieldValue,\r\n                setValues,\r\n                setFieldTouched,\r\n                setTouched,\r\n                resetForm,\r\n            };\r\n        }\r\n        // expose these functions and methods as part of public API\r\n        ctx.expose({\r\n            setFieldError,\r\n            setErrors,\r\n            setFieldValue,\r\n            setValues,\r\n            setFieldTouched,\r\n            setTouched,\r\n            resetForm,\r\n            validate,\r\n            validateField,\r\n        });\r\n        return function renderForm() {\r\n            // avoid resolving the form component as itself\r\n            const tag = props.as === 'form' ? props.as : resolveDynamicComponent(props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            if (!props.as) {\r\n                return children;\r\n            }\r\n            // Attributes to add on a native `form` tag\r\n            const formAttrs = props.as === 'form'\r\n                ? {\r\n                    // Disables native validation as vee-validate will handle it.\r\n                    novalidate: true,\r\n                }\r\n                : {};\r\n            return h(tag, Object.assign(Object.assign(Object.assign({}, formAttrs), ctx.attrs), { onSubmit, onReset: handleFormReset }), children);\r\n        };\r\n    },\r\n});\r\nconst Form = FormImpl;\n\nfunction useFieldArray(arrayPath) {\r\n    const form = injectWithSelf(FormContextKey, undefined);\r\n    const fields = ref([]);\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    const noOp = () => { };\r\n    const noOpApi = {\r\n        fields,\r\n        remove: noOp,\r\n        push: noOp,\r\n        swap: noOp,\r\n        insert: noOp,\r\n        update: noOp,\r\n        replace: noOp,\r\n        prepend: noOp,\r\n        move: noOp,\r\n    };\r\n    if (!form) {\r\n        warn('FieldArray requires being a child of `<Form/>` or `useForm` being called before it. Array fields may not work correctly');\r\n        return noOpApi;\r\n    }\r\n    if (!unref(arrayPath)) {\r\n        warn('FieldArray requires a field path to be provided, did you forget to pass the `name` prop?');\r\n        return noOpApi;\r\n    }\r\n    const alreadyExists = form.fieldArrays.find(a => unref(a.path) === unref(arrayPath));\r\n    if (alreadyExists) {\r\n        return alreadyExists;\r\n    }\r\n    let entryCounter = 0;\r\n    function initFields() {\r\n        const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\r\n        fields.value = currentValues.map(createEntry);\r\n        updateEntryFlags();\r\n    }\r\n    initFields();\r\n    function updateEntryFlags() {\r\n        const fieldsLength = fields.value.length;\r\n        for (let i = 0; i < fieldsLength; i++) {\r\n            const entry = fields.value[i];\r\n            entry.isFirst = i === 0;\r\n            entry.isLast = i === fieldsLength - 1;\r\n        }\r\n    }\r\n    function createEntry(value) {\r\n        const key = entryCounter++;\r\n        const entry = {\r\n            key,\r\n            value: computedDeep({\r\n                get() {\r\n                    const currentValues = getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(arrayPath), []) || [];\r\n                    const idx = fields.value.findIndex(e => e.key === key);\r\n                    return idx === -1 ? value : currentValues[idx];\r\n                },\r\n                set(value) {\r\n                    const idx = fields.value.findIndex(e => e.key === key);\r\n                    if (idx === -1) {\r\n                        warn(`Attempting to update a non-existent array item`);\r\n                        return;\r\n                    }\r\n                    update(idx, value);\r\n                },\r\n            }),\r\n            isFirst: false,\r\n            isLast: false,\r\n        };\r\n        return entry;\r\n    }\r\n    function remove(idx) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!pathValue || !Array.isArray(pathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        newValue.splice(idx, 1);\r\n        form === null || form === void 0 ? void 0 : form.unsetInitialValue(pathName + `[${idx}]`);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.splice(idx, 1);\r\n        updateEntryFlags();\r\n    }\r\n    function push(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...normalizedPathValue];\r\n        newValue.push(value);\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.push(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    function swap(indexA, indexB) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || !(indexA in pathValue) || !(indexB in pathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        // the old switcheroo\r\n        const temp = newValue[indexA];\r\n        newValue[indexA] = newValue[indexB];\r\n        newValue[indexB] = temp;\r\n        const tempEntry = newFields[indexA];\r\n        newFields[indexA] = newFields[indexB];\r\n        newFields[indexB] = tempEntry;\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function insert(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length < idx) {\r\n            return;\r\n        }\r\n        const newValue = [...pathValue];\r\n        const newFields = [...fields.value];\r\n        newValue.splice(idx, 0, value);\r\n        newFields.splice(idx, 0, createEntry(value));\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    function replace(arr) {\r\n        const pathName = unref(arrayPath);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, arr);\r\n        initFields();\r\n    }\r\n    function update(idx, value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        if (!Array.isArray(pathValue) || pathValue.length - 1 < idx) {\r\n            return;\r\n        }\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(`${pathName}[${idx}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.validate({ mode: 'validated-only' });\r\n    }\r\n    function prepend(value) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const normalizedPathValue = isNullOrUndefined(pathValue) ? [] : pathValue;\r\n        if (!Array.isArray(normalizedPathValue)) {\r\n            return;\r\n        }\r\n        const newValue = [value, ...normalizedPathValue];\r\n        form === null || form === void 0 ? void 0 : form.stageInitialValue(pathName + `[${newValue.length - 1}]`, value);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value.unshift(createEntry(value));\r\n        updateEntryFlags();\r\n    }\r\n    function move(oldIdx, newIdx) {\r\n        const pathName = unref(arrayPath);\r\n        const pathValue = getFromPath(form === null || form === void 0 ? void 0 : form.values, pathName);\r\n        const newValue = isNullOrUndefined(pathValue) ? [] : [...pathValue];\r\n        if (!Array.isArray(pathValue) || !(oldIdx in pathValue) || !(newIdx in pathValue)) {\r\n            return;\r\n        }\r\n        const newFields = [...fields.value];\r\n        const movedItem = newFields[oldIdx];\r\n        newFields.splice(oldIdx, 1);\r\n        newFields.splice(newIdx, 0, movedItem);\r\n        const movedValue = newValue[oldIdx];\r\n        newValue.splice(oldIdx, 1);\r\n        newValue.splice(newIdx, 0, movedValue);\r\n        form === null || form === void 0 ? void 0 : form.setFieldValue(pathName, newValue);\r\n        fields.value = newFields;\r\n        updateEntryFlags();\r\n    }\r\n    const fieldArrayCtx = {\r\n        fields,\r\n        remove,\r\n        push,\r\n        swap,\r\n        insert,\r\n        update,\r\n        replace,\r\n        prepend,\r\n        move,\r\n    };\r\n    form.fieldArrays.push(Object.assign({ path: arrayPath, reset: initFields }, fieldArrayCtx));\r\n    onBeforeUnmount(() => {\r\n        const idx = form.fieldArrays.findIndex(i => unref(i.path) === unref(arrayPath));\r\n        if (idx >= 0) {\r\n            form.fieldArrays.splice(idx, 1);\r\n        }\r\n    });\r\n    return fieldArrayCtx;\r\n}\n\nconst FieldArrayImpl = defineComponent({\r\n    name: 'FieldArray',\r\n    inheritAttrs: false,\r\n    props: {\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const { push, remove, swap, insert, replace, update, prepend, move, fields } = useFieldArray(toRef(props, 'name'));\r\n        function slotProps() {\r\n            return {\r\n                fields: fields.value,\r\n                push,\r\n                remove,\r\n                swap,\r\n                insert,\r\n                update,\r\n                replace,\r\n                prepend,\r\n                move,\r\n            };\r\n        }\r\n        ctx.expose({\r\n            push,\r\n            remove,\r\n            swap,\r\n            insert,\r\n            update,\r\n            replace,\r\n            prepend,\r\n            move,\r\n        });\r\n        return () => {\r\n            const children = normalizeChildren(undefined, ctx, slotProps);\r\n            return children;\r\n        };\r\n    },\r\n});\r\nconst FieldArray = FieldArrayImpl;\n\nconst ErrorMessageImpl = defineComponent({\r\n    name: 'ErrorMessage',\r\n    props: {\r\n        as: {\r\n            type: String,\r\n            default: undefined,\r\n        },\r\n        name: {\r\n            type: String,\r\n            required: true,\r\n        },\r\n    },\r\n    setup(props, ctx) {\r\n        const form = inject(FormContextKey, undefined);\r\n        const message = computed(() => {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[props.name];\r\n        });\r\n        function slotProps() {\r\n            return {\r\n                message: message.value,\r\n            };\r\n        }\r\n        return () => {\r\n            // Renders nothing if there are no messages\r\n            if (!message.value) {\r\n                return undefined;\r\n            }\r\n            const tag = (props.as ? resolveDynamicComponent(props.as) : props.as);\r\n            const children = normalizeChildren(tag, ctx, slotProps);\r\n            const attrs = Object.assign({ role: 'alert' }, ctx.attrs);\r\n            // If no tag was specified and there are children\r\n            // render the slot as is without wrapping it\r\n            if (!tag && (Array.isArray(children) || !children) && (children === null || children === void 0 ? void 0 : children.length)) {\r\n                return children;\r\n            }\r\n            // If no children in slot\r\n            // render whatever specified and fallback to a <span> with the message in it's contents\r\n            if ((Array.isArray(children) || !children) && !(children === null || children === void 0 ? void 0 : children.length)) {\r\n                return h(tag || 'span', attrs, message.value);\r\n            }\r\n            return h(tag, attrs, children);\r\n        };\r\n    },\r\n});\r\nconst ErrorMessage = ErrorMessageImpl;\n\nfunction useResetForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function resetForm(state) {\r\n        if (!form) {\r\n            return;\r\n        }\r\n        return form.resetForm(state);\r\n    };\r\n}\n\n/**\r\n * If a field is dirty or not\r\n */\r\nfunction useIsFieldDirty(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.dirty;\r\n    });\r\n}\n\n/**\r\n * If a field is touched or not\r\n */\r\nfunction useIsFieldTouched(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.touched;\r\n    });\r\n}\n\n/**\r\n * If a field is validated and is valid\r\n */\r\nfunction useIsFieldValid(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return false;\r\n        }\r\n        return field.meta.valid;\r\n    });\r\n}\n\n/**\r\n * If the form is submitting or not\r\n */\r\nfunction useIsSubmitting() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.isSubmitting.value) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validates a single field\r\n */\r\nfunction useValidateField(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    let field = path ? undefined : inject(FieldContextKey);\r\n    return function validateField() {\r\n        if (path) {\r\n            field = normalizeField(form === null || form === void 0 ? void 0 : form.fieldsByPath.value[unref(path)]);\r\n        }\r\n        if (!field) {\r\n            warn(`field with name ${unref(path)} was not found`);\r\n            return Promise.resolve({\r\n                errors: [],\r\n                valid: true,\r\n            });\r\n        }\r\n        return field.validate();\r\n    };\r\n}\n\n/**\r\n * If the form is dirty or not\r\n */\r\nfunction useIsFormDirty() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.dirty) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form is touched or not\r\n */\r\nfunction useIsFormTouched() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.touched) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * If the form has been validated and is valid\r\n */\r\nfunction useIsFormValid() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.meta.value.valid) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n}\n\n/**\r\n * Validate multiple fields\r\n */\r\nfunction useValidateForm() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return function validateField() {\r\n        if (!form) {\r\n            return Promise.resolve({ results: {}, errors: {}, valid: true });\r\n        }\r\n        return form.validate();\r\n    };\r\n}\n\n/**\r\n * The number of form's submission count\r\n */\r\nfunction useSubmitCount() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        var _a;\r\n        return (_a = form === null || form === void 0 ? void 0 : form.submitCount.value) !== null && _a !== void 0 ? _a : 0;\r\n    });\r\n}\n\n/**\r\n * Gives access to a field's current value\r\n */\r\nfunction useFieldValue(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return getFromPath(form === null || form === void 0 ? void 0 : form.values, unref(path));\r\n        }\r\n        return unref(field === null || field === void 0 ? void 0 : field.value);\r\n    });\r\n}\n\n/**\r\n * Gives access to a form's values\r\n */\r\nfunction useFormValues() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return (form === null || form === void 0 ? void 0 : form.values) || {};\r\n    });\r\n}\n\n/**\r\n * Gives access to all form errors\r\n */\r\nfunction useFormErrors() {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    return computed(() => {\r\n        return ((form === null || form === void 0 ? void 0 : form.errors.value) || {});\r\n    });\r\n}\n\n/**\r\n * Gives access to a single field error\r\n */\r\nfunction useFieldError(path) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    // We don't want to use self injected context as it doesn't make sense\r\n    const field = path ? undefined : inject(FieldContextKey);\r\n    return computed(() => {\r\n        if (path) {\r\n            return form === null || form === void 0 ? void 0 : form.errors.value[unref(path)];\r\n        }\r\n        return field === null || field === void 0 ? void 0 : field.errorMessage.value;\r\n    });\r\n}\n\nfunction useSubmitForm(cb) {\r\n    const form = injectWithSelf(FormContextKey);\r\n    if (!form) {\r\n        warn('No vee-validate <Form /> or `useForm` was detected in the component tree');\r\n    }\r\n    const onSubmit = form ? form.handleSubmit(cb) : undefined;\r\n    return function submitForm(e) {\r\n        if (!onSubmit) {\r\n            return;\r\n        }\r\n        return onSubmit(e);\r\n    };\r\n}\n\nexport { ErrorMessage, Field, FieldArray, FieldContextKey, Form, FormContextKey, IS_ABSENT, configure, defineRule, useField, useFieldArray, useFieldError, useFieldValue, useForm, useFormErrors, useFormValues, useIsFieldDirty, useIsFieldTouched, useIsFieldValid, useIsFormDirty, useIsFormTouched, useIsFormValid, useIsSubmitting, useResetForm, useSubmitCount, useSubmitForm, useValidateField, useValidateForm, validate };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}