{"ast":null,"code":"import _defineProperty from \"/home/little/Documents/music_web/startproj/zhengdao-ui/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport { h } from 'vue';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowRight, Loading } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport { getProp } from '../../../utils/objects.mjs';\nvar defaultClassNames = {\n  selection: \"table-column--selection\",\n  expand: \"table__expand-column\"\n};\nvar cellStarts = {\n  \"default\": {\n    order: \"\"\n  },\n  selection: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  },\n  expand: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  },\n  index: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: \"\"\n  }\n};\n\nvar getDefaultClassName = function getDefaultClassName(type) {\n  return defaultClassNames[type] || \"\";\n};\n\nvar cellForced = {\n  selection: {\n    renderHeader: function renderHeader(_ref) {\n      var store = _ref.store;\n\n      function isDisabled() {\n        return store.states.data.value && store.states.data.value.length === 0;\n      }\n\n      return h(ElCheckbox, {\n        disabled: isDisabled(),\n        size: store.states.tableSize.value,\n        indeterminate: store.states.selection.value.length > 0 && !store.states.isAllSelected.value,\n        \"onUpdate:modelValue\": store.toggleAllSelection,\n        modelValue: store.states.isAllSelected.value\n      });\n    },\n    renderCell: function renderCell(_ref2) {\n      var row = _ref2.row,\n          column = _ref2.column,\n          store = _ref2.store,\n          $index = _ref2.$index;\n      return h(ElCheckbox, {\n        disabled: column.selectable ? !column.selectable.call(null, row, $index) : false,\n        size: store.states.tableSize.value,\n        onChange: function onChange() {\n          store.commit(\"rowSelectedChanged\", row);\n        },\n        onClick: function onClick(event) {\n          return event.stopPropagation();\n        },\n        modelValue: store.isSelected(row)\n      });\n    },\n    sortable: false,\n    resizable: false\n  },\n  index: {\n    renderHeader: function renderHeader(_ref3) {\n      var column = _ref3.column;\n      return column.label || \"#\";\n    },\n    renderCell: function renderCell(_ref4) {\n      var column = _ref4.column,\n          $index = _ref4.$index;\n      var i = $index + 1;\n      var index = column.index;\n\n      if (typeof index === \"number\") {\n        i = $index + index;\n      } else if (typeof index === \"function\") {\n        i = index($index);\n      }\n\n      return h(\"div\", {}, [i]);\n    },\n    sortable: false\n  },\n  expand: {\n    renderHeader: function renderHeader(_ref5) {\n      var column = _ref5.column;\n      return column.label || \"\";\n    },\n    renderCell: function renderCell(_ref6) {\n      var row = _ref6.row,\n          store = _ref6.store,\n          expanded = _ref6.expanded;\n      var ns = store.ns;\n      var classes = [ns.e(\"expand-icon\")];\n\n      if (expanded) {\n        classes.push(ns.em(\"expand-icon\", \"expanded\"));\n      }\n\n      var callback = function callback(e) {\n        e.stopPropagation();\n        store.toggleRowExpansion(row);\n      };\n\n      return h(\"div\", {\n        \"class\": classes,\n        onClick: callback\n      }, {\n        \"default\": function _default() {\n          return [h(ElIcon, null, {\n            \"default\": function _default() {\n              return [h(ArrowRight)];\n            }\n          })];\n        }\n      });\n    },\n    sortable: false,\n    resizable: false\n  }\n};\n\nfunction defaultRenderCell(_ref7) {\n  var row = _ref7.row,\n      column = _ref7.column,\n      $index = _ref7.$index;\n\n  var _a;\n\n  var property = column.property;\n  var value = property && getProp(row, property).value;\n\n  if (column && column.formatter) {\n    return column.formatter(row, column, value, $index);\n  }\n\n  return ((_a = value == null ? void 0 : value.toString) == null ? void 0 : _a.call(value)) || \"\";\n}\n\nfunction treeCellPrefix(_ref8) {\n  var row = _ref8.row,\n      treeNode = _ref8.treeNode,\n      store = _ref8.store;\n  var createPlacehoder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var ns = store.ns;\n\n  if (!treeNode) {\n    if (createPlacehoder) {\n      return [h(\"span\", {\n        \"class\": ns.e(\"placeholder\")\n      })];\n    }\n\n    return null;\n  }\n\n  var ele = [];\n\n  var callback = function callback(e) {\n    e.stopPropagation();\n    store.loadOrToggle(row);\n  };\n\n  if (treeNode.indent) {\n    ele.push(h(\"span\", {\n      \"class\": ns.e(\"indent\"),\n      style: {\n        \"padding-left\": \"\".concat(treeNode.indent, \"px\")\n      }\n    }));\n  }\n\n  if (typeof treeNode.expanded === \"boolean\" && !treeNode.noLazyChildren) {\n    var expandClasses = [ns.e(\"expand-icon\"), treeNode.expanded ? ns.em(\"expand-icon\", \"expanded\") : \"\"];\n    var icon = ArrowRight;\n\n    if (treeNode.loading) {\n      icon = Loading;\n    }\n\n    ele.push(h(\"div\", {\n      \"class\": expandClasses,\n      onClick: callback\n    }, {\n      \"default\": function _default() {\n        return [h(ElIcon, {\n          \"class\": _defineProperty({}, ns.is(\"loading\"), treeNode.loading)\n        }, {\n          \"default\": function _default() {\n            return [h(icon)];\n          }\n        })];\n      }\n    }));\n  } else {\n    ele.push(h(\"span\", {\n      \"class\": ns.e(\"placeholder\")\n    }));\n  }\n\n  return ele;\n}\n\nexport { cellForced, cellStarts, defaultRenderCell, getDefaultClassName, treeCellPrefix };","map":{"version":3,"mappings":"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","names":["defaultClassNames","selection","expand","cellStarts","order","width","minWidth","realWidth","index","getDefaultClassName","type","cellForced","renderHeader","store","isDisabled","states","data","value","length","h","ElCheckbox","disabled","size","tableSize","indeterminate","isAllSelected","toggleAllSelection","modelValue","renderCell","row","column","$index","selectable","call","onChange","commit","onClick","event","stopPropagation","isSelected","sortable","resizable","label","i","expanded","ns","classes","e","push","em","callback","toggleRowExpansion","ElIcon","ArrowRight","defaultRenderCell","_a","property","getProp","formatter","toString","treeCellPrefix","treeNode","createPlacehoder","ele","loadOrToggle","indent","style","noLazyChildren","expandClasses","icon","loading","Loading","is"],"sources":["../../../../../../packages/components/table/src/config.ts"],"sourcesContent":["// @ts-nocheck\nimport { h } from 'vue'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ArrowRight, Loading } from '@element-plus/icons-vue'\nimport { getProp } from '@element-plus/utils'\n\nimport type { VNode } from 'vue'\nimport type { TableColumnCtx } from './table-column/defaults'\nimport type { Store } from './store'\nimport type { TreeNode } from './table/defaults'\n\nconst defaultClassNames = {\n  selection: 'table-column--selection',\n  expand: 'table__expand-column',\n}\n\nexport const cellStarts = {\n  default: {\n    order: '',\n  },\n  selection: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: '',\n  },\n  expand: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: '',\n  },\n  index: {\n    width: 48,\n    minWidth: 48,\n    realWidth: 48,\n    order: '',\n  },\n}\n\nexport const getDefaultClassName = (type) => {\n  return defaultClassNames[type] || ''\n}\n\n// 这些选项不应该被覆盖\nexport const cellForced = {\n  selection: {\n    renderHeader<T>({ store }: { store: Store<T> }) {\n      function isDisabled() {\n        return store.states.data.value && store.states.data.value.length === 0\n      }\n      return h(ElCheckbox, {\n        disabled: isDisabled(),\n        size: store.states.tableSize.value,\n        indeterminate:\n          store.states.selection.value.length > 0 &&\n          !store.states.isAllSelected.value,\n        'onUpdate:modelValue': store.toggleAllSelection,\n        modelValue: store.states.isAllSelected.value,\n      })\n    },\n    renderCell<T>({\n      row,\n      column,\n      store,\n      $index,\n    }: {\n      row: T\n      column: TableColumnCtx<T>\n      store: Store<T>\n      $index: string\n    }) {\n      return h(ElCheckbox, {\n        disabled: column.selectable\n          ? !column.selectable.call(null, row, $index)\n          : false,\n        size: store.states.tableSize.value,\n        onChange: () => {\n          store.commit('rowSelectedChanged', row)\n        },\n        onClick: (event: Event) => event.stopPropagation(),\n        modelValue: store.isSelected(row),\n      })\n    },\n    sortable: false,\n    resizable: false,\n  },\n  index: {\n    renderHeader<T>({ column }: { column: TableColumnCtx<T> }) {\n      return column.label || '#'\n    },\n    renderCell<T>({\n      column,\n      $index,\n    }: {\n      column: TableColumnCtx<T>\n      $index: number\n    }) {\n      let i = $index + 1\n      const index = column.index\n\n      if (typeof index === 'number') {\n        i = $index + index\n      } else if (typeof index === 'function') {\n        i = index($index)\n      }\n      return h('div', {}, [i])\n    },\n    sortable: false,\n  },\n  expand: {\n    renderHeader<T>({ column }: { column: TableColumnCtx<T> }) {\n      return column.label || ''\n    },\n    renderCell<T>({\n      row,\n      store,\n      expanded,\n    }: {\n      row: T\n      store: Store<T>\n      expanded: boolean\n    }) {\n      const { ns } = store\n      const classes = [ns.e('expand-icon')]\n      if (expanded) {\n        classes.push(ns.em('expand-icon', 'expanded'))\n      }\n      const callback = function (e: Event) {\n        e.stopPropagation()\n        store.toggleRowExpansion(row)\n      }\n      return h(\n        'div',\n        {\n          class: classes,\n          onClick: callback,\n        },\n        {\n          default: () => {\n            return [\n              h(ElIcon, null, {\n                default: () => {\n                  return [h(ArrowRight)]\n                },\n              }),\n            ]\n          },\n        }\n      )\n    },\n    sortable: false,\n    resizable: false,\n  },\n}\n\nexport function defaultRenderCell<T>({\n  row,\n  column,\n  $index,\n}: {\n  row: T\n  column: TableColumnCtx<T>\n  $index: number\n}) {\n  const property = column.property\n  const value = property && getProp(row, property).value\n  if (column && column.formatter) {\n    return column.formatter(row, column, value, $index)\n  }\n  return value?.toString?.() || ''\n}\n\nexport function treeCellPrefix<T>(\n  {\n    row,\n    treeNode,\n    store,\n  }: {\n    row: T\n    treeNode: TreeNode\n    store: Store<T>\n  },\n  createPlacehoder = false\n) {\n  const { ns } = store\n  if (!treeNode) {\n    if (createPlacehoder) {\n      return [\n        h('span', {\n          class: ns.e('placeholder'),\n        }),\n      ]\n    }\n    return null\n  }\n  const ele: VNode[] = []\n  const callback = function (e) {\n    e.stopPropagation()\n    store.loadOrToggle(row)\n  }\n  if (treeNode.indent) {\n    ele.push(\n      h('span', {\n        class: ns.e('indent'),\n        style: { 'padding-left': `${treeNode.indent}px` },\n      })\n    )\n  }\n  if (typeof treeNode.expanded === 'boolean' && !treeNode.noLazyChildren) {\n    const expandClasses = [\n      ns.e('expand-icon'),\n      treeNode.expanded ? ns.em('expand-icon', 'expanded') : '',\n    ]\n    let icon = ArrowRight\n    if (treeNode.loading) {\n      icon = Loading\n    }\n\n    ele.push(\n      h(\n        'div',\n        {\n          class: expandClasses,\n          onClick: callback,\n        },\n        {\n          default: () => {\n            return [\n              h(\n                ElIcon,\n                { class: { [ns.is('loading')]: treeNode.loading } },\n                {\n                  default: () => [h(icon)],\n                }\n              ),\n            ]\n          },\n        }\n      )\n    )\n  } else {\n    ele.push(\n      h('span', {\n        class: ns.e('placeholder'),\n      })\n    )\n  }\n  return ele\n}\n"]},"metadata":{},"sourceType":"module"}