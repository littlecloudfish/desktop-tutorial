{"ast":null,"code":"import \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/esnext.typed-array.find-last.js\";\nimport \"core-js/modules/esnext.typed-array.find-last-index.js\";\nimport { CircleStencil, Cropper } from 'vue-advanced-cropper';\nimport 'vue-advanced-cropper/dist/style.css';\n\nfunction getMimeType(file, fallback = null) {\n  const byteArray = new Uint8Array(file).subarray(0, 4);\n  let header = '';\n\n  for (let i = 0; i < byteArray.length; i++) {\n    header += byteArray[i].toString(16);\n  }\n\n  switch (header) {\n    case \"89504e47\":\n      return \"image/png\";\n\n    case \"47494638\":\n      return \"image/gif\";\n\n    case \"ffd8ffe0\":\n    case \"ffd8ffe1\":\n    case \"ffd8ffe2\":\n    case \"ffd8ffe3\":\n    case \"ffd8ffe8\":\n      return \"image/jpeg\";\n\n    default:\n      return fallback;\n  }\n}\n\nexport default {\n  components: {\n    Cropper,\n    CircleStencil\n  },\n\n  data() {\n    return {\n      // img: 'https://images.pexels.com/photos/4323307/pexels-photo-4323307.jpeg',\n      img: {\n        src: null,\n        type: null\n      }\n    };\n  },\n\n  methods: {\n    change({\n      coordinates,\n      canvas\n    }) {\n      console.log(coordinates, canvas);\n    },\n\n    crop() {\n      const {\n        canvas\n      } = this.$refs.cropper.getResult();\n      canvas.toBlob(blob => {// Do something with blob: upload to a server, download and etc.\n      }, this.image.type);\n    },\n\n    reset() {\n      this.image = {\n        src: null,\n        type: null\n      };\n    },\n\n    loadImage(event) {\n      // Reference to the DOM input element\n      const {\n        files\n      } = event.target; // Ensure that you have a file before attempting to read it\n\n      if (files && files[0]) {\n        // 1. Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n        if (this.image.src) {\n          URL.revokeObjectURL(this.image.src);\n        } // 2. Create the blob link to the file to optimize performance:\n\n\n        const blob = URL.createObjectURL(files[0]); // 3. The steps below are designated to determine a file mime type to use it during the \n        // getting of a cropped image from the canvas. You can replace it them by the following string, \n        // but the type will be derived from the extension and it can lead to an incorrect result:\n        //\n        // this.image = {\n        // src: blob;\n        // type: files[0].type\n        // }\n        // Create a new FileReader to read this image binary data\n\n        const reader = new FileReader(); // Define a callback function to run, when FileReader finishes its job\n\n        reader.onload = e => {\n          // Note: arrow function used here, so that \"this.image\" refers to the image of Vue component\n          this.image = {\n            // Set the image source (it will look like blob:http://example.com/2c5270a5-18b5-406e-a4fb-07427f5e7b94)\n            src: blob,\n            // Determine the image type to preserve it during the extracting the image from canvas:\n            type: getMimeType(e.target.result, files[0].type)\n          };\n        }; // Start the reader job - read file as a data url (base64 format)\n\n\n        reader.readAsArrayBuffer(files[0]);\n      }\n    }\n\n  },\n\n  destroyed() {\n    // Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n    if (this.image.src) {\n      URL.revokeObjectURL(this.image.src);\n    }\n  }\n\n};","map":{"version":3,"mappings":"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","names":["CircleStencil","Cropper","getMimeType","file","fallback","byteArray","Uint8Array","subarray","header","i","length","toString","components","data","img","src","type","methods","change","coordinates","canvas","console","log","crop","$refs","cropper","getResult","toBlob","blob","image","reset","loadImage","event","files","target","URL","revokeObjectURL","createObjectURL","reader","FileReader","onload","e","result","readAsArrayBuffer","destroyed"],"sourceRoot":"","sources":["/home/little/Documents/music_web/startproj/zhengdao-ui/src/views/Music/MusicSearch.vue"],"sourcesContent":["<template>\n\n    <div class = \"upload-example\">\n        <cropper\n        :src = \"img.src\"\n        :stencil-component=\"$options.components.CircleStencil\"\n        />\n        </div>\n        <div class = \"button-wrapper\">\n        <button class = \"button\" @click = \"$refs.file.click()\">\n        <input type=\"file\" ref=\"file\" @change = \"loadImage($event)\" accept=\"image/*\"/>\n        </button>\n            Load Image\n    </div>\n\n</template>\n\n<script>\nimport { CircleStencil, Cropper } from 'vue-advanced-cropper';\nimport 'vue-advanced-cropper/dist/style.css';\n\nfunction getMimeType(file, fallback = null) {\n    const byteArray = (new Uint8Array(file)).subarray(0, 4);\n    let header = '';\n    for (let i = 0; i < byteArray.length; i++) {\n    header += byteArray[i].toString(16);\n    }\n    switch (header) {\n    case \"89504e47\":\n    return \"image/png\";\n    case \"47494638\":\n    return \"image/gif\";\n    case \"ffd8ffe0\":\n    case \"ffd8ffe1\":\n    case \"ffd8ffe2\":\n    case \"ffd8ffe3\":\n    case \"ffd8ffe8\":\n    return \"image/jpeg\";\n    default:\n    return fallback;\n    }\n}\n\nexport default {\n    components: {\n    Cropper,CircleStencil\n    },\n    data() {\n    return {\n    // img: 'https://images.pexels.com/photos/4323307/pexels-photo-4323307.jpeg',\n    img:{\n    src: null,\n    type:null\n    }\n    };\n    },\n    methods: {\n    change({ coordinates, canvas }) {\n    console.log(coordinates, canvas);\n    },\n    crop() {\n    const { canvas } = this.$refs.cropper.getResult();\n    canvas.toBlob((blob) => {\n    // Do something with blob: upload to a server, download and etc.\n    }, this.image.type);\n    },\n    reset() {\n    this.image = {\n    src: null,\n    type: null\n    }\n    },\n    loadImage(event) {\n        // Reference to the DOM input element\n        const { files } = event.target;\n        // Ensure that you have a file before attempting to read it\n        if (files && files[0]) {\n        // 1. Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n        if (this.image.src) {\n        URL.revokeObjectURL(this.image.src)\n        }\n        // 2. Create the blob link to the file to optimize performance:\n        const blob = URL.createObjectURL(files[0]);\n        // 3. The steps below are designated to determine a file mime type to use it during the \n        // getting of a cropped image from the canvas. You can replace it them by the following string, \n        // but the type will be derived from the extension and it can lead to an incorrect result:\n        //\n        // this.image = {\n        // src: blob;\n        // type: files[0].type\n        // }\n        // Create a new FileReader to read this image binary data\n        const reader = new FileReader();\n        // Define a callback function to run, when FileReader finishes its job\n        reader.onload = (e) => {\n        // Note: arrow function used here, so that \"this.image\" refers to the image of Vue component\n        this.image = {\n        // Set the image source (it will look like blob:http://example.com/2c5270a5-18b5-406e-a4fb-07427f5e7b94)\n        src: blob,\n        // Determine the image type to preserve it during the extracting the image from canvas:\n        type: getMimeType(e.target.result, files[0].type),\n        };\n        };\n        // Start the reader job - read file as a data url (base64 format)\n        reader.readAsArrayBuffer(files[0]);\n        }\n        },\n    },\n    destroyed() {\n    // Revoke the object URL, to allow the garbage collector to destroy the uploaded before file\n    if (this.image.src) {\n    URL.revokeObjectURL(this.image.src)\n    }\n    }\n\n\n\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}