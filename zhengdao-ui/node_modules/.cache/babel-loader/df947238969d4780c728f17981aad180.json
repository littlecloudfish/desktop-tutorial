{"ast":null,"code":"import \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport { ref } from 'vue';\n\nfunction useCursor(input) {\n  var selectionRef = ref();\n\n  function recordCursor() {\n    if (input.value == void 0) return;\n    var _input$value = input.value,\n        selectionStart = _input$value.selectionStart,\n        selectionEnd = _input$value.selectionEnd,\n        value = _input$value.value;\n    if (selectionStart == null || selectionEnd == null) return;\n    var beforeTxt = value.slice(0, Math.max(0, selectionStart));\n    var afterTxt = value.slice(Math.max(0, selectionEnd));\n    selectionRef.value = {\n      selectionStart: selectionStart,\n      selectionEnd: selectionEnd,\n      value: value,\n      beforeTxt: beforeTxt,\n      afterTxt: afterTxt\n    };\n  }\n\n  function setCursor() {\n    if (input.value == void 0 || selectionRef.value == void 0) return;\n    var value = input.value.value;\n    var _selectionRef$value = selectionRef.value,\n        beforeTxt = _selectionRef$value.beforeTxt,\n        afterTxt = _selectionRef$value.afterTxt,\n        selectionStart = _selectionRef$value.selectionStart;\n    if (beforeTxt == void 0 || afterTxt == void 0 || selectionStart == void 0) return;\n    var startPos = value.length;\n\n    if (value.endsWith(afterTxt)) {\n      startPos = value.length - afterTxt.length;\n    } else if (value.startsWith(beforeTxt)) {\n      startPos = beforeTxt.length;\n    } else {\n      var beforeLastChar = beforeTxt[selectionStart - 1];\n      var newIndex = value.indexOf(beforeLastChar, selectionStart - 1);\n\n      if (newIndex !== -1) {\n        startPos = newIndex + 1;\n      }\n    }\n\n    input.value.setSelectionRange(startPos, startPos);\n  }\n\n  return [recordCursor, setCursor];\n}\n\nexport { useCursor };","map":{"version":3,"mappings":";;;;;;AACO,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;EAC/B,IAAMC,YAAY,GAAGC,GAAG,EAAxB;;EACA,SAASC,YAAT,GAAwB;IACtB,IAAIH,KAAK,CAACI,KAAN,IAAe,KAAK,CAAxB,EACE;IACF,mBAAgDJ,KAAK,CAACI,KAAtD;IAAA,IAAQC,cAAR,gBAAQA,cAAR;IAAA,IAAwBC,YAAxB,gBAAwBA,YAAxB;IAAA,IAAsCF,KAAtC,gBAAsCA,KAAtC;IACA,IAAIC,cAAc,IAAI,IAAlB,IAA0BC,YAAY,IAAI,IAA9C,EACE;IACF,IAAMC,SAAS,GAAGH,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYL,cAAZ,CAAf,CAAlB;IACA,IAAMM,QAAQ,GAAGP,KAAK,CAACI,KAAN,CAAYC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYJ,YAAZ,CAAZ,CAAjB;IACAL,YAAY,CAACG,KAAb,GAAqB;MACnBC,cAAc,EAAdA,cADmB;MAEnBC,YAAY,EAAZA,YAFmB;MAGnBF,KAAK,EAALA,KAHmB;MAInBG,SAAS,EAATA,SAJmB;MAKnBI,QAAQ,EAARA;IALmB,CAArB;EAOD;;EACD,SAASC,SAAT,GAAqB;IACnB,IAAIZ,KAAK,CAACI,KAAN,IAAe,KAAK,CAApB,IAAyBH,YAAY,CAACG,KAAb,IAAsB,KAAK,CAAxD,EACE;IACF,IAAQA,KAAR,GAAkBJ,KAAK,CAACI,KAAxB,CAAQA,KAAR;IACA,0BAAgDH,YAAY,CAACG,KAA7D;IAAA,IAAQG,SAAR,uBAAQA,SAAR;IAAA,IAAmBI,QAAnB,uBAAmBA,QAAnB;IAAA,IAA6BN,cAA7B,uBAA6BA,cAA7B;IACA,IAAIE,SAAS,IAAI,KAAK,CAAlB,IAAuBI,QAAQ,IAAI,KAAK,CAAxC,IAA6CN,cAAc,IAAI,KAAK,CAAxE,EACE;IACF,IAAIQ,QAAQ,GAAGT,KAAK,CAACU,MAArB;;IACA,IAAIV,KAAK,CAACW,QAAN,CAAeJ,QAAf,CAAJ,EAA8B;MAC5BE,QAAQ,GAAGT,KAAK,CAACU,MAAN,GAAeH,QAAQ,CAACG,MAAnC;IACD,CAFD,MAEO,IAAIV,KAAK,CAACY,UAAN,CAAiBT,SAAjB,CAAJ,EAAiC;MACtCM,QAAQ,GAAGN,SAAS,CAACO,MAArB;IACD,CAFM,MAEA;MACL,IAAMG,cAAc,GAAGV,SAAS,CAACF,cAAc,GAAG,CAAlB,CAAhC;MACA,IAAMa,QAAQ,GAAGd,KAAK,CAACe,OAAN,CAAcF,cAAd,EAA8BZ,cAAc,GAAG,CAA/C,CAAjB;;MACA,IAAIa,QAAQ,KAAK,CAAC,CAAlB,EAAqB;QACnBL,QAAQ,GAAGK,QAAQ,GAAG,CAAtB;MACD;IACF;;IACDlB,KAAK,CAACI,KAAN,CAAYgB,iBAAZ,CAA8BP,QAA9B,EAAwCA,QAAxC;EACD;;EACD,OAAO,CAACV,YAAD,EAAeS,SAAf,CAAP;AACF","names":["useCursor","input","selectionRef","ref","recordCursor","value","selectionStart","selectionEnd","beforeTxt","slice","Math","max","afterTxt","setCursor","startPos","length","endsWith","startsWith","beforeLastChar","newIndex","indexOf","setSelectionRange"],"sources":["../../../../../packages/hooks/use-cursor/index.ts"],"sourcesContent":["import { ref } from 'vue'\n\nimport type { ShallowRef } from 'vue'\n\n// Keep input cursor in the correct position when we use formatter.\nexport function useCursor(\n  input: ShallowRef<HTMLInputElement | undefined>\n): [() => void, () => void] {\n  const selectionRef = ref<{\n    selectionStart?: number\n    selectionEnd?: number\n    value?: string\n    beforeTxt?: string\n    afterTxt?: string\n  }>()\n\n  function recordCursor() {\n    if (input.value == undefined) return\n\n    const { selectionStart, selectionEnd, value } = input.value\n\n    if (selectionStart == null || selectionEnd == null) return\n\n    const beforeTxt = value.slice(0, Math.max(0, selectionStart))\n    const afterTxt = value.slice(Math.max(0, selectionEnd))\n\n    selectionRef.value = {\n      selectionStart,\n      selectionEnd,\n      value,\n      beforeTxt,\n      afterTxt,\n    }\n  }\n  function setCursor() {\n    if (input.value == undefined || selectionRef.value == undefined) return\n\n    const { value } = input.value\n    const { beforeTxt, afterTxt, selectionStart } = selectionRef.value\n\n    if (\n      beforeTxt == undefined ||\n      afterTxt == undefined ||\n      selectionStart == undefined\n    )\n      return\n\n    let startPos = value.length\n\n    if (value.endsWith(afterTxt)) {\n      startPos = value.length - afterTxt.length\n    } else if (value.startsWith(beforeTxt)) {\n      startPos = beforeTxt.length\n    } else {\n      const beforeLastChar = beforeTxt[selectionStart - 1]\n      const newIndex = value.indexOf(beforeLastChar, selectionStart - 1)\n      if (newIndex !== -1) {\n        startPos = newIndex + 1\n      }\n    }\n\n    input.value.setSelectionRange(startPos, startPos)\n  }\n\n  return [recordCursor, setCursor]\n}\n"]},"metadata":{},"sourceType":"module"}