"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.usePlayerContext = exports.usePlayer = void 0;
var vue_1 = require("vue");
var core_1 = require("@vime/core");
/**
 * Finds and returns the closest ancestor player element to the given `el`.
 *
 * @param el A HTMLElement that is within the player's subtree.
 */
var usePlayer = function (el) {
    var player = (0, vue_1.ref)(null);
    var find = function () { return __awaiter(void 0, void 0, void 0, function () {
        var _c, _d;
        var _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    _c = player;
                    if (!el.value) return [3 /*break*/, 2];
                    return [4 /*yield*/, (0, core_1.findPlayer)(el.value)];
                case 1:
                    _d = (_e = (_f.sent())) !== null && _e !== void 0 ? _e : null;
                    return [3 /*break*/, 3];
                case 2:
                    _d = null;
                    _f.label = 3;
                case 3:
                    _c.value = _d;
                    return [2 /*return*/];
            }
        });
    }); };
    (0, vue_1.onMounted)(find);
    (0, vue_1.watch)(el, find);
    return (0, vue_1.readonly)(player);
};
exports.usePlayer = usePlayer;
/**
 * Binds the given `prop` to the closest ancestor player of the given `ref`. When the property
 * changes on the player, this hook will trigger a re-render with the new value.
 *
 * @param el The HTMLElement to start searching from.
 * @param prop The property to bind to.
 * @param defaultValue The initial value of the property until the the player context is bound.
 */
var usePlayerContext = function (el, prop, defaultValue) {
    var noop = function () { };
    var binding = (0, vue_1.ref)(defaultValue);
    var dispatch = (0, vue_1.ref)(noop);
    var prevValue = defaultValue;
    (0, vue_1.watch)(el, function () {
        dispatch.value = el.value ? (0, core_1.createDispatcher)(el.value) : noop;
    });
    (0, vue_1.watch)(binding, function () {
        if (binding.value !== prevValue)
            dispatch.value(prop, binding.value);
    });
    (0, vue_1.watch)(el, function (_a, _b, onInvalidate) { return __awaiter(void 0, void 0, void 0, function () {
        var off;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    if (!el.value)
                        return [2 /*return*/];
                    return [4 /*yield*/, (0, core_1.usePlayerContext)(el.value, [prop], function (_, newValue) {
                            binding.value = newValue;
                            prevValue = newValue;
                        })];
                case 1:
                    off = _c.sent();
                    onInvalidate(off);
                    return [2 /*return*/];
            }
        });
    }); });
    return ((0, core_1.isWritableProp)(prop) ? binding : (0, vue_1.readonly)(binding));
};
exports.usePlayerContext = usePlayerContext;
//# sourceMappingURL=composition.js.map