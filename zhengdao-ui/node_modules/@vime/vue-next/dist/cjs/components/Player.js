"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
var vue_1 = require("vue");
var lib_1 = require("../lib");
var core_1 = require("@vime/core");
var lib_2 = require("../lib");
(0, lib_2.define)('vm-player', core_1.VmPlayer);
exports.default = (0, vue_1.defineComponent)({
    emits: ['vmThemeChange', 'vmPausedChange', 'vmPlay', 'vmPlayingChange', 'vmSeekingChange', 'vmSeeked', 'vmBufferingChange', 'vmDurationChange', 'vmCurrentTimeChange', 'vmReady', 'vmPlaybackReady', 'vmPlaybackStarted', 'vmPlaybackEnded', 'vmBufferedChange', 'vmError', 'vmLoadStart', 'vmCurrentProviderChange', 'vmCurrentSrcChange', 'vmCurrentPosterChange', 'vmMediaTitleChange', 'vmControlsChange', 'vmPlaybackRateChange', 'vmPlaybackRatesChange', 'vmPlaybackQualityChange', 'vmPlaybackQualitiesChange', 'vmMutedChange', 'vmVolumeChange', 'vmViewTypeChange', 'vmMediaTypeChange', 'vmLiveChange', 'vmTouchChange', 'vmLanguageChange', 'vmI18nChange', 'vmTranslationsChange', 'vmLanguagesChange', 'vmFullscreenChange', 'vmPiPChange', 'vmTextTracksChange', 'vmCurrentTextTrackChange', 'vmTextTrackVisibleChange', 'vmAudioTracksChange', 'vmCurrentAudioTrackChange'],
    methods: {
        getProvider: (0, lib_1.method)('getProvider'),
        getAdapter: (0, lib_1.method)('getAdapter'),
        play: (0, lib_1.method)('play'),
        pause: (0, lib_1.method)('pause'),
        canPlay: (0, lib_1.method)('canPlay'),
        canAutoplay: (0, lib_1.method)('canAutoplay'),
        canMutedAutoplay: (0, lib_1.method)('canMutedAutoplay'),
        canSetPlaybackRate: (0, lib_1.method)('canSetPlaybackRate'),
        canSetPlaybackQuality: (0, lib_1.method)('canSetPlaybackQuality'),
        canSetFullscreen: (0, lib_1.method)('canSetFullscreen'),
        enterFullscreen: (0, lib_1.method)('enterFullscreen'),
        exitFullscreen: (0, lib_1.method)('exitFullscreen'),
        canSetPiP: (0, lib_1.method)('canSetPiP'),
        enterPiP: (0, lib_1.method)('enterPiP'),
        exitPiP: (0, lib_1.method)('exitPiP'),
        canSetAudioTrack: (0, lib_1.method)('canSetAudioTrack'),
        setCurrentAudioTrack: (0, lib_1.method)('setCurrentAudioTrack'),
        canSetTextTrack: (0, lib_1.method)('canSetTextTrack'),
        setCurrentTextTrack: (0, lib_1.method)('setCurrentTextTrack'),
        canSetTextTrackVisibility: (0, lib_1.method)('canSetTextTrackVisibility'),
        setTextTrackVisibility: (0, lib_1.method)('setTextTrackVisibility'),
        extendLanguage: (0, lib_1.method)('extendLanguage'),
        getContainer: (0, lib_1.method)('getContainer'),
        callAdapter: (0, lib_1.method)('callAdapter'),
    },
    render: (0, lib_1.render)('vm-player', ['vmThemeChange', 'vmPausedChange', 'vmPlay', 'vmPlayingChange', 'vmSeekingChange', 'vmSeeked', 'vmBufferingChange', 'vmDurationChange', 'vmCurrentTimeChange', 'vmReady', 'vmPlaybackReady', 'vmPlaybackStarted', 'vmPlaybackEnded', 'vmBufferedChange', 'vmError', 'vmLoadStart', 'vmCurrentProviderChange', 'vmCurrentSrcChange', 'vmCurrentPosterChange', 'vmMediaTitleChange', 'vmControlsChange', 'vmPlaybackRateChange', 'vmPlaybackRatesChange', 'vmPlaybackQualityChange', 'vmPlaybackQualitiesChange', 'vmMutedChange', 'vmVolumeChange', 'vmViewTypeChange', 'vmMediaTypeChange', 'vmLiveChange', 'vmTouchChange', 'vmLanguageChange', 'vmI18nChange', 'vmTranslationsChange', 'vmLanguagesChange', 'vmFullscreenChange', 'vmPiPChange', 'vmTextTracksChange', 'vmCurrentTextTrackChange', 'vmTextTrackVisibleChange', 'vmAudioTracksChange', 'vmCurrentAudioTrackChange']),
});
//# sourceMappingURL=Player.js.map