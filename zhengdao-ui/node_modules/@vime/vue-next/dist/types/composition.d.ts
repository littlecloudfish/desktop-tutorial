import { Ref } from 'vue';
import { PlayerProps, WritableProps } from '@vime/core';
/**
 * Finds and returns the closest ancestor player element to the given `el`.
 *
 * @param el A HTMLElement that is within the player's subtree.
 */
export declare const usePlayer: <T extends HTMLElement>(el: Ref<T | null>) => Readonly<Ref<HTMLVmPlayerElement | null>>;
export declare type PropBinding<P extends keyof PlayerProps> = P extends keyof WritableProps ? Ref<PlayerProps[P]> : Readonly<Ref<PlayerProps[P]>>;
/**
 * Binds the given `prop` to the closest ancestor player of the given `ref`. When the property
 * changes on the player, this hook will trigger a re-render with the new value.
 *
 * @param el The HTMLElement to start searching from.
 * @param prop The property to bind to.
 * @param defaultValue The initial value of the property until the the player context is bound.
 */
export declare const usePlayerContext: <T extends HTMLElement, P extends keyof PlayerProps>(el: Ref<T | null>, prop: P, defaultValue: PlayerProps[P]) => PropBinding<P>;
