export declare const Audio: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmAudio, {}, {}, {}, {
    getAdapter: () => Promise<{
        getInternalPlayer: () => Promise<HTMLMediaElement>;
        play: () => Promise<void | undefined>;
        pause: () => Promise<void | undefined>;
        canPlay: (type: any) => Promise<boolean>;
        setCurrentTime: (time: number) => Promise<void>;
        setMuted: (muted: boolean) => Promise<void>;
        setVolume: (volume: number) => Promise<void>;
        canSetPlaybackRate: () => Promise<boolean>;
        setPlaybackRate: (rate: number) => Promise<void>;
        canSetPiP: () => Promise<boolean>;
        enterPiP: () => Promise<any>;
        exitPiP: () => Promise<any>;
        canSetFullscreen: () => Promise<boolean>;
        enterFullscreen: () => Promise<void>;
        exitFullscreen: () => Promise<void>;
        setCurrentTextTrack: (trackId: number) => Promise<void>;
        setTextTrackVisibility: (isVisible: boolean) => Promise<void>;
    }>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmAudio>, {}>;
export declare const CaptionControl: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmCaptionControl, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmCaptionControl>, {}>;
export declare const Captions: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmCaptions, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmCaptions>, {}>;
export declare const ClickToPlay: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmClickToPlay, {}, {}, {}, {
    forceClick: () => Promise<void>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmClickToPlay>, {}>;
export declare const Control: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmControl, {}, {}, {}, {
    focusControl: () => Promise<void>;
    blurControl: () => Promise<void>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmControl>, {}>;
export declare const ControlGroup: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmControlGroup, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmControlGroup>, {}>;
export declare const ControlSpacer: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmControlSpacer, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmControlSpacer>, {}>;
export declare const Controls: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmControls, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmControls>, {}>;
export declare const CurrentTime: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmCurrentTime, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmCurrentTime>, {}>;
export declare const Dailymotion: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmDailymotion, {}, {}, {}, {
    getAdapter: () => Promise<{
        getInternalPlayer: () => Promise<HTMLVmEmbedElement>;
        play: () => Promise<void>;
        pause: () => Promise<void>;
        canPlay: (type: any) => Promise<boolean>;
        setCurrentTime: (time: number) => Promise<void>;
        setMuted: (muted: boolean) => Promise<void>;
        setVolume: (volume: number) => Promise<void>;
        canSetPlaybackQuality: () => Promise<boolean>;
        setPlaybackQuality: (quality: string) => Promise<void>;
        canSetFullscreen: () => Promise<boolean>;
        enterFullscreen: () => Promise<void>;
        exitFullscreen: () => Promise<void>;
    }>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmDailymotion>, {}>;
export declare const Dash: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmDash, {}, {}, {}, {
    getAdapter: () => Promise<{
        getInternalPlayer: () => Promise<any>;
        canPlay: (type: any) => Promise<boolean>;
        canSetPlaybackQuality: () => Promise<boolean>;
        setPlaybackQuality: (quality: string) => Promise<void>;
        setCurrentTextTrack: (trackId: number) => Promise<void>;
        setTextTrackVisibility: (isVisible: boolean) => Promise<void>;
        play: () => Promise<void | undefined>;
        pause: () => Promise<void | undefined>;
        setCurrentTime: (time: number) => Promise<void>;
        setMuted: (muted: boolean) => Promise<void>;
        setVolume: (volume: number) => Promise<void>;
        canSetPlaybackRate: () => Promise<boolean>;
        setPlaybackRate: (rate: number) => Promise<void>;
        canSetPiP: () => Promise<boolean>;
        enterPiP: () => Promise<any>;
        exitPiP: () => Promise<any>;
        canSetFullscreen: () => Promise<boolean>;
        enterFullscreen: () => Promise<void>;
        exitFullscreen: () => Promise<void>;
    }>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmDash>, {}>;
export declare const DblClickFullscreen: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmDblClickFullscreen, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmDblClickFullscreen>, {}>;
export declare const DefaultControls: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmDefaultControls, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmDefaultControls>, {}>;
export declare const DefaultSettings: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmDefaultSettings, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmDefaultSettings>, {}>;
export declare const DefaultUi: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmDefaultUi, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmDefaultUi>, {}>;
export declare const Embed: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmEmbed, {}, {}, {}, {
    postMessage: (message: any, target?: string | undefined) => Promise<void>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmEmbed>, {}>;
export declare const EndTime: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmEndTime, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmEndTime>, {}>;
export declare const File: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmFile, {}, {}, {}, {
    getAdapter: () => Promise<{
        getInternalPlayer: () => Promise<HTMLMediaElement>;
        play: () => Promise<void | undefined>;
        pause: () => Promise<void | undefined>;
        canPlay: (type: any) => Promise<boolean>;
        setCurrentTime: (time: number) => Promise<void>;
        setMuted: (muted: boolean) => Promise<void>;
        setVolume: (volume: number) => Promise<void>;
        canSetPlaybackRate: () => Promise<boolean>;
        setPlaybackRate: (rate: number) => Promise<void>;
        canSetPiP: () => Promise<boolean>;
        enterPiP: () => Promise<any>;
        exitPiP: () => Promise<any>;
        canSetFullscreen: () => Promise<boolean>;
        enterFullscreen: () => Promise<void>;
        exitFullscreen: () => Promise<void>;
        setCurrentTextTrack: (trackId: number) => Promise<void>;
        setTextTrackVisibility: (isVisible: boolean) => Promise<void>;
    }>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmFile>, {}>;
export declare const FullscreenControl: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmFullscreenControl, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmFullscreenControl>, {}>;
export declare const Hls: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmHls, {}, {}, {}, {
    getAdapter: () => Promise<{
        getInternalPlayer: () => Promise<any>;
        canPlay: (type: any) => Promise<boolean>;
        canSetPlaybackQuality: () => Promise<boolean>;
        setPlaybackQuality: (quality: string) => Promise<void>;
        setCurrentAudioTrack: (trackId: number) => Promise<void>;
        play: () => Promise<void | undefined>;
        pause: () => Promise<void | undefined>;
        setCurrentTime: (time: number) => Promise<void>;
        setMuted: (muted: boolean) => Promise<void>;
        setVolume: (volume: number) => Promise<void>;
        canSetPlaybackRate: () => Promise<boolean>;
        setPlaybackRate: (rate: number) => Promise<void>;
        canSetPiP: () => Promise<boolean>;
        enterPiP: () => Promise<any>;
        exitPiP: () => Promise<any>;
        canSetFullscreen: () => Promise<boolean>;
        enterFullscreen: () => Promise<void>;
        exitFullscreen: () => Promise<void>;
        setCurrentTextTrack: (trackId: number) => Promise<void>;
        setTextTrackVisibility: (isVisible: boolean) => Promise<void>;
    }>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmHls>, {
    config: any;
}>;
export declare const Icon: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmIcon, {}, {}, {}, {
    redraw: () => Promise<void>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmIcon>, {}>;
export declare const IconLibrary: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmIconLibrary, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmIconLibrary>, {}>;
export declare const LiveIndicator: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmLiveIndicator, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmLiveIndicator>, {}>;
export declare const LoadingScreen: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmLoadingScreen, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmLoadingScreen>, {}>;
export declare const Menu: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmMenu, {}, {}, {}, {
    focusMenu: () => Promise<void>;
    blurMenu: () => Promise<void>;
    getActiveMenuItem: () => Promise<HTMLVmMenuItemElement | undefined>;
    setActiveMenuItem: (item?: HTMLVmMenuItemElement | undefined) => Promise<void>;
    calculateHeight: () => Promise<number>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmMenu>, {}>;
export declare const MenuItem: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmMenuItem, {}, {}, {}, {
    focusItem: () => Promise<void>;
    blurItem: () => Promise<void>;
    getHeight: () => Promise<number>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmMenuItem>, {}>;
export declare const MenuRadio: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmMenuRadio, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmMenuRadio>, {}>;
export declare const MenuRadioGroup: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmMenuRadioGroup, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmMenuRadioGroup>, {}>;
export declare const MuteControl: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmMuteControl, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmMuteControl>, {}>;
export declare const PipControl: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmPipControl, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmPipControl>, {}>;
export declare const PlaybackControl: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmPlaybackControl, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmPlaybackControl>, {}>;
export declare const Player: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmPlayer, {}, {}, {}, {
    getProvider: <InternalPlayerType = any>() => Promise<import("@vime/core").AdapterHost<InternalPlayerType> | undefined>;
    getAdapter: <InternalPlayerType_1 = any>() => Promise<import("@vime/core").MediaProviderAdapter<InternalPlayerType_1> | undefined>;
    play: () => Promise<void | undefined>;
    pause: () => Promise<void | undefined>;
    canPlay: (type: string) => Promise<boolean>;
    canAutoplay: () => Promise<boolean>;
    canMutedAutoplay: () => Promise<boolean>;
    canSetPlaybackRate: () => Promise<boolean>;
    canSetPlaybackQuality: () => Promise<boolean>;
    canSetFullscreen: () => Promise<boolean>;
    enterFullscreen: (options?: FullscreenOptions | undefined) => Promise<void>;
    exitFullscreen: () => Promise<void>;
    canSetPiP: () => Promise<boolean>;
    enterPiP: () => Promise<void | undefined>;
    exitPiP: () => Promise<void | undefined>;
    canSetAudioTrack: () => Promise<boolean>;
    setCurrentAudioTrack: (trackId: number) => Promise<void>;
    canSetTextTrack: () => Promise<boolean>;
    setCurrentTextTrack: (trackId: number) => Promise<void>;
    canSetTextTrackVisibility: () => Promise<boolean>;
    setTextTrackVisibility: (isVisible: boolean) => Promise<void>;
    extendLanguage: (language: string, translation: Partial<import("@vime/core").Translation>) => Promise<void>;
    getContainer: () => Promise<HTMLDivElement | undefined>;
    callAdapter: (method: keyof import("@vime/core").MediaProviderAdapter<any>, value?: any) => Promise<any>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmPlayer>, {}>;
export declare const Poster: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmPoster, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmPoster>, {}>;
export declare const Scrim: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmScrim, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmScrim>, {}>;
export declare const ScrubberControl: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmScrubberControl, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmScrubberControl>, {}>;
export declare const Settings: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmSettings, {}, {}, {}, {
    setController: (controller: import("@vime/core/dist/types/components/ui/settings/settings/SettingsController").SettingsController) => Promise<void>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmSettings>, {}>;
export declare const SettingsControl: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmSettingsControl, {}, {}, {}, {
    focusControl: () => Promise<void>;
    blurControl: () => Promise<void>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmSettingsControl>, {}>;
export declare const Skeleton: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmSkeleton, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmSkeleton>, {}>;
export declare const Slider: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmSlider, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmSlider>, {}>;
export declare const Spinner: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmSpinner, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmSpinner>, {}>;
export declare const Submenu: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmSubmenu, {}, {}, {}, {
    getController: () => Promise<HTMLVmMenuItemElement | undefined>;
    getMenu: () => Promise<HTMLVmMenuElement | undefined>;
    getControllerHeight: () => Promise<number>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmSubmenu>, {}>;
export declare const Time: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmTime, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmTime>, {}>;
export declare const TimeProgress: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmTimeProgress, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmTimeProgress>, {}>;
export declare const Tooltip: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmTooltip, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmTooltip>, {}>;
export declare const Ui: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmUi, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmUi>, {}>;
export declare const Video: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmVideo, {}, {}, {}, {
    getAdapter: () => Promise<{
        getInternalPlayer: () => Promise<HTMLMediaElement>;
        play: () => Promise<void | undefined>;
        pause: () => Promise<void | undefined>;
        canPlay: (type: any) => Promise<boolean>;
        setCurrentTime: (time: number) => Promise<void>;
        setMuted: (muted: boolean) => Promise<void>;
        setVolume: (volume: number) => Promise<void>;
        canSetPlaybackRate: () => Promise<boolean>;
        setPlaybackRate: (rate: number) => Promise<void>;
        canSetPiP: () => Promise<boolean>;
        enterPiP: () => Promise<any>;
        exitPiP: () => Promise<any>;
        canSetFullscreen: () => Promise<boolean>;
        enterFullscreen: () => Promise<void>;
        exitFullscreen: () => Promise<void>;
        setCurrentTextTrack: (trackId: number) => Promise<void>;
        setTextTrackVisibility: (isVisible: boolean) => Promise<void>;
    }>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmVideo>, {}>;
export declare const Vimeo: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmVimeo, {}, {}, {}, {
    getAdapter: () => Promise<{
        getInternalPlayer: () => Promise<HTMLVmEmbedElement>;
        play: () => Promise<void>;
        pause: () => Promise<void>;
        canPlay: (type: any) => Promise<boolean>;
        setCurrentTime: (time: number) => Promise<void>;
        setMuted: (muted: boolean) => Promise<void>;
        setVolume: (volume: number) => Promise<void>;
        canSetPlaybackRate: () => Promise<boolean>;
        setPlaybackRate: (rate: number) => Promise<void>;
    }>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmVimeo>, {}>;
export declare const VolumeControl: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmVolumeControl, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmVolumeControl>, {}>;
export declare const Youtube: import("vue").DefineComponent<import("@vime/core/dist/types/components").JSX.VmYoutube, {}, {}, {}, {
    getAdapter: () => Promise<{
        getInternalPlayer: () => Promise<HTMLVmEmbedElement>;
        play: () => Promise<void>;
        pause: () => Promise<void>;
        canPlay: (type: any) => Promise<boolean>;
        setCurrentTime: (time: number) => Promise<void>;
        setMuted: (muted: boolean) => Promise<void>;
        setVolume: (volume: number) => Promise<void>;
        canSetPlaybackRate: () => Promise<boolean>;
        setPlaybackRate: (rate: number) => Promise<void>;
    }>;
}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("@vime/core/dist/types/components").JSX.VmYoutube>, {}>;
