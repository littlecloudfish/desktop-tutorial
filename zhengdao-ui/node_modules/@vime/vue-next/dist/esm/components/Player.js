/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import { defineComponent } from 'vue';
import { method, render } from '../lib';
import { VmPlayer } from '@vime/core';
import { define } from '../lib';
define('vm-player', VmPlayer);
export default defineComponent({
    emits: ['vmThemeChange', 'vmPausedChange', 'vmPlay', 'vmPlayingChange', 'vmSeekingChange', 'vmSeeked', 'vmBufferingChange', 'vmDurationChange', 'vmCurrentTimeChange', 'vmReady', 'vmPlaybackReady', 'vmPlaybackStarted', 'vmPlaybackEnded', 'vmBufferedChange', 'vmError', 'vmLoadStart', 'vmCurrentProviderChange', 'vmCurrentSrcChange', 'vmCurrentPosterChange', 'vmMediaTitleChange', 'vmControlsChange', 'vmPlaybackRateChange', 'vmPlaybackRatesChange', 'vmPlaybackQualityChange', 'vmPlaybackQualitiesChange', 'vmMutedChange', 'vmVolumeChange', 'vmViewTypeChange', 'vmMediaTypeChange', 'vmLiveChange', 'vmTouchChange', 'vmLanguageChange', 'vmI18nChange', 'vmTranslationsChange', 'vmLanguagesChange', 'vmFullscreenChange', 'vmPiPChange', 'vmTextTracksChange', 'vmCurrentTextTrackChange', 'vmTextTrackVisibleChange', 'vmAudioTracksChange', 'vmCurrentAudioTrackChange'],
    methods: {
        getProvider: method('getProvider'),
        getAdapter: method('getAdapter'),
        play: method('play'),
        pause: method('pause'),
        canPlay: method('canPlay'),
        canAutoplay: method('canAutoplay'),
        canMutedAutoplay: method('canMutedAutoplay'),
        canSetPlaybackRate: method('canSetPlaybackRate'),
        canSetPlaybackQuality: method('canSetPlaybackQuality'),
        canSetFullscreen: method('canSetFullscreen'),
        enterFullscreen: method('enterFullscreen'),
        exitFullscreen: method('exitFullscreen'),
        canSetPiP: method('canSetPiP'),
        enterPiP: method('enterPiP'),
        exitPiP: method('exitPiP'),
        canSetAudioTrack: method('canSetAudioTrack'),
        setCurrentAudioTrack: method('setCurrentAudioTrack'),
        canSetTextTrack: method('canSetTextTrack'),
        setCurrentTextTrack: method('setCurrentTextTrack'),
        canSetTextTrackVisibility: method('canSetTextTrackVisibility'),
        setTextTrackVisibility: method('setTextTrackVisibility'),
        extendLanguage: method('extendLanguage'),
        getContainer: method('getContainer'),
        callAdapter: method('callAdapter'),
    },
    render: render('vm-player', ['vmThemeChange', 'vmPausedChange', 'vmPlay', 'vmPlayingChange', 'vmSeekingChange', 'vmSeeked', 'vmBufferingChange', 'vmDurationChange', 'vmCurrentTimeChange', 'vmReady', 'vmPlaybackReady', 'vmPlaybackStarted', 'vmPlaybackEnded', 'vmBufferedChange', 'vmError', 'vmLoadStart', 'vmCurrentProviderChange', 'vmCurrentSrcChange', 'vmCurrentPosterChange', 'vmMediaTitleChange', 'vmControlsChange', 'vmPlaybackRateChange', 'vmPlaybackRatesChange', 'vmPlaybackQualityChange', 'vmPlaybackQualitiesChange', 'vmMutedChange', 'vmVolumeChange', 'vmViewTypeChange', 'vmMediaTypeChange', 'vmLiveChange', 'vmTouchChange', 'vmLanguageChange', 'vmI18nChange', 'vmTranslationsChange', 'vmLanguagesChange', 'vmFullscreenChange', 'vmPiPChange', 'vmTextTracksChange', 'vmCurrentTextTrackChange', 'vmTextTrackVisibleChange', 'vmAudioTracksChange', 'vmCurrentAudioTrackChange']),
});
//# sourceMappingURL=Player.js.map