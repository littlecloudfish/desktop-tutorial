import { h } from 'vue';
export function define(tagName, clazz) {
    const isClient = typeof window !== 'undefined';
    if (isClient && !customElements.get(tagName))
        customElements.define(tagName, clazz);
}
export function method(name) {
    return function proxy(...args) {
        return this.$refs.ref[name](...args);
    };
}
function listen(node, event, handler) {
    node.addEventListener(event, handler);
    return () => {
        node.removeEventListener(event, handler);
    };
}
export function render(tagName, events) {
    return function proxy() {
        var _a, _b;
        let dispose = [];
        const forwardEvent = (event) => ($event) => {
            const { detail } = $event;
            this.$emit(event, detail);
        };
        return h(tagName, Object.assign(Object.assign({ ref: 'ref' }, this.$props), { onVnodeMounted(vnode) {
                events.forEach(event => {
                    dispose.push(listen(vnode.el, event, forwardEvent(event)));
                });
            },
            onVnodeBeforeUnmount() {
                dispose.forEach(fn => fn());
                dispose = [];
            } }), (_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a));
    };
}
//# sourceMappingURL=lib.js.map